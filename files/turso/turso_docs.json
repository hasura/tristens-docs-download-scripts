{"https://docs.turso.tech/": "# Turso documentation\n\n## About Turso\u200b\n\n[ Turso ](https://turso.tech/)is an edge-hosted, distributed database based on[ libSQL ](https://github.com/libsql/libsql#readme), an\nopen-source and open-contribution fork of[ SQLite ](https://sqlite.org/). It was designed to minimize\nquery latency for applications where queries come from anywhere in the world. In\nparticular, it works well with edge functions provided by cloud platforms such\nas CloudFlare, Netlify, and Vercel, by putting your data geographically close to\nthe code that accesses it.\n\n## Getting started\u200b\n\n- [ Install and learn to use the Turso CLI ](https://docs.turso.tech/tutorials/get-started-turso-cli)\n- [ Access Turso using the libSQL client libraries ](https://docs.turso.tech/libsql/client-access)\n- Follow along with Turso[ tutorials ](https://docs.turso.tech/tutorials/)\n\n\n## Learn more about Turso\u200b\n\nWatch this video presentation to learn more about the origin of Turso and\nlibSQL, and the problems they were designed to solve. This presentation was\ngiven to collegiate level web development students, but is accessible to a wider\naudience.\n\nEmbedded content: [ View content ](https://www.youtube.com/embed/ANuraQJTc7c)\n\n- [ About Turso ](https://docs.turso.tech/#about-turso)\n- [ Getting started ](https://docs.turso.tech/#getting-started)\n- [ Learn more about Turso ](https://docs.turso.tech/#learn-more-about-turso)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//": "# Turso documentation\n\n## About Turso\u200b\n\n[ Turso ](https://turso.tech/)is an edge-hosted, distributed database based on[ libSQL ](https://github.com/libsql/libsql#readme), an\nopen-source and open-contribution fork of[ SQLite ](https://sqlite.org/). It was designed to minimize\nquery latency for applications where queries come from anywhere in the world. In\nparticular, it works well with edge functions provided by cloud platforms such\nas CloudFlare, Netlify, and Vercel, by putting your data geographically close to\nthe code that accesses it.\n\n## Getting started\u200b\n\n- [ Install and learn to use the Turso CLI ](https://docs.turso.tech/tutorials/get-started-turso-cli)\n- [ Access Turso using the libSQL client libraries ](https://docs.turso.tech/libsql/client-access)\n- Follow along with Turso[ tutorials ](https://docs.turso.tech/tutorials/)\n\n\n## Learn more about Turso\u200b\n\nWatch this video presentation to learn more about the origin of Turso and\nlibSQL, and the problems they were designed to solve. This presentation was\ngiven to collegiate level web development students, but is accessible to a wider\naudience.\n\nEmbedded content: [ View content ](https://www.youtube.com/embed/ANuraQJTc7c)\n\n- [ About Turso ](https://docs.turso.tech/#about-turso)\n- [ Getting started ](https://docs.turso.tech/#getting-started)\n- [ Learn more about Turso ](https://docs.turso.tech/#learn-more-about-turso)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/": "# Turso tutorials\n\nThe following guides are available to help you learn how Turso works:\n\n## Get started with the Turso CLI\u200b\n\nFollow a step-by-step walkthrough of the Turso CLI. You will learn how to log\nin, create a database, query it, and replicate it to other locations.\n\n## Netlify setup guide\u200b\n\nThis guide illustrates how to use Netlify environment variables to provide\nvalues required by the[ libSQL client library ](https://docs.turso.tech/libsql/client-access)used in a web application\ndeployment.\n\n## Vercel setup guide\u200b\n\nThis guide illustrates how to use Vercel environment variables to provide\nvalues required by the[ libSQL client library ](https://docs.turso.tech/libsql/client-access)used in a web application\ndeployment.\n\n## Fermyon Spin with Rust setup guide\u200b\n\nThis guide illustrates how to use Fermyon Spin variables to provide values\nrequired by the[ libSQL client library ](https://docs.turso.tech/libsql/client-access)for Rust.\n\n## Creating an e-commerce store with Remix, Turso, Drizzle, and Cloudflare Workers\u200b\n\nThis tutorial guides you towards the creation of an e-commerce store using[ Remix ](https://remix.run), Turso,[ Drizzle ](https://orm.drizzle.team), and deploying it to[ Cloudflare Workers ](https://workers.cloudflare.com).\n\n## Using Turso with Cloudflare Workers and TypeScript\u200b\n\nThis tutorial guides you through the process of creating a Cloudflare Worker\nwith TypeScript and using that to query a Turso database.\n\n## More resources\u200b\n\n- [ Example apps and more on github.com/turso-extended ](https://github.com/turso-extended)\n- [ Working with GraphQL and Turso using Edge Resolvers ](https://grafbase.com/guides/working-with-graphql-and-turso-using-edge-resolvers)\n\n\n- [ Get started with the Turso CLI ](https://docs.turso.tech//tutorials/#get-started-with-the-turso-cli)\n- [ Netlify setup guide ](https://docs.turso.tech//tutorials/#netlify-setup-guide)\n- [ Vercel setup guide ](https://docs.turso.tech//tutorials/#vercel-setup-guide)\n- [ Fermyon Spin with Rust setup guide ](https://docs.turso.tech//tutorials/#fermyon-spin-with-rust-setup-guide)\n- [ Creating an e-commerce store with Remix, Turso, Drizzle, and Cloudflare Workers ](https://docs.turso.tech//tutorials/#creating-an-e-commerce-store-with-remix-turso-drizzle-and-cloudflare-workers)\n- [ Using Turso with Cloudflare Workers and TypeScript ](https://docs.turso.tech//tutorials/#using-turso-with-cloudflare-workers-and-typescript)\n- [ More resources ](https://docs.turso.tech//tutorials/#more-resources)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/": "# Turso technical reference\n\nThis section of the documentation provides details on the tools, SDKs, and\nprotocols used when working with Turso.\n\n| Component | Source code |\n|---|---|\n| [ Turso CLI ](https://docs.turso.tech/reference/turso-cli) | [ GitHub ](https://github.com/tursodatabase/turso-cli/) |\n| [ Platform REST API ](https://docs.turso.tech/reference/platform-rest-api) | Not open source |\n\n\nTurso is built upon libSQL, which provides open source, open contribution client\nand server[ components ](https://docs.turso.tech/libsql/).\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/": "# libSQL technical reference\n\nThis section of the documentation provides details on the tools, SDKs, and\nprotocols used when working with libSQL.\n\n| Component | Source code |\n|---|---|\n| [ TypeScript SDK ](https://docs.turso.tech/libsql/client-access/javascript-typescript-sdk) | [ GitHub ](https://github.com/libsql/libsql-client-ts/) |\n| [ Rust SDK ](https://docs.turso.tech/libsql/client-access/rust-sdk) | [ GitHub ](https://github.com/libsql/libsql-client-rs/) |\n| [ Python SDK ](https://docs.turso.tech/libsql/client-access/python-sdk) | [ GitHub ](https://github.com/libsql/libsql-client-py/) |\n| [ Go SDK ](https://docs.turso.tech/libsql/client-access/go-sdk) | [ GitHub ](https://github.com/libsql/libsql-client-go/) |\n| [ libSQL server ](https://docs.turso.tech/libsql/server/setup) | [ GitHub ](https://github.com/libsql/libsql#readme) |\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//concepts": "# Concepts\n\nIn order to better understand how Turso works, please read through the following\nconcepts that are used throughout this documentation.\n\n## Location\u200b\n\nTurso databases are deployed using Fly.io, which allows Turso to host database\ninstances in[ many locations around the world ](https://fly.io/docs/reference/regions/), each identified with a three\nletter code. When creating a logical database in a placement group with replica\nlocations, you should consider which locations best support the code running any\nqueries. In general, the physical distance between the code and the database\ndetermines the latency, so it's recommended to benchmark your location options\nfor better performance.\n\nBy default, when the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)needs a primary location for a new placement\ngroup, it will automatically choose a location based on the physical location of\nthe machine where you run the CLI. The default can be overridden on the command\nline.\n\n## Placement group\u200b\n\nTurso requires that all logical databases belong to a \"placement group\". These\ngroups define how the databases in the group are deployed and replicated\ntogether in the same set of locations while also sharing the same managed\nhardware. In the Turso CLI, a placement group is abbreviated as \"[ group ](https://docs.turso.tech/reference/turso-cli#manage-placement-groups-and-logical-databases)\". You\nmight also hear this feature referred to as \"multitenancy\", where the tenants\nare databases you create that must share the same replication behavior and\nmanaged servers.\n\nPlacement groups are configured with a single primary location and zero or more\nreplica locations. Each logical database that you create within the placement\ngroup uses the same primary and replica locations - they are all \"placed\"\ntogether, each using the same replication behavior on the same hardware.\nHowever, each logical database within a placement group remains fully\nindependent and isolated in every other way.\n\nOnce a primary location is assigned to a placement group, it can't be moved to\nanother location. However, replica locations can be added and removed as needed.\n\n## Logical database\u200b\n\nA logical database is a collection of libSQL databases, each with a schema and\ndata that exists in one primary location and zero or more replica locations for\nthe placement group in which it was created. The schema and data are\nautomatically replicated from the primary to all replicas in the group.\n\nA logical database has a unique[ libSQL URL ](https://docs.turso.tech/reference/libsql-urls)that, when queried using the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access), routes the client to the database instance at the location\nwith the lowest latency, therefore minimizing the total round trip time for read\noperations.\n\n## Instance\u200b\n\nA database instance is one component of a logical database in specific location.\nAn instance is serviced by a managed installation of[ libSQL server ](https://github.com/libsql/libsql#readme)running on\na single machine. Database instances of multiple logical databases in the same\nplacement group are handled by the same libSQL server process in the same\nhardware.\n\nThere are two types of instances:[ primary ](https://docs.turso.tech//concepts/#primary)and[ replica ](https://docs.turso.tech//concepts/#replica).\n\n### Primary\u200b\n\nThe primary instance of a logical database is the main source of data for the\ndatabase. All changes to the logical database are handled by the primary, and\nthose changes are synchronized to all replica instances.\n\n### Replica\u200b\n\nA replica instance of a logical database contains a copy of all data from the\nprimary, and is kept in sync with it as changes are made over time. Client\napplications can connect directly to a replica for read and write operations,\nbut any writes are automatically forwarded to the primary. As such, read\noperations have minimized latency, but write operations must make another hop to\nthe primary. Changes on the primary are then pushed to all replicas. The\nreplicas provide snapshot isolation for read transactions.\n\n- [ Location ](https://docs.turso.tech//concepts/#location)\n- [ Placement group ](https://docs.turso.tech//concepts/#placement-group)\n- [ Logical database ](https://docs.turso.tech//concepts/#logical-database)\n- [ Instance ](https://docs.turso.tech//concepts/#instance)\n    - [ Primary ](https://docs.turso.tech//concepts/#primary)\n\n- [ Replica ](https://docs.turso.tech//concepts/#replica)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//billing-details": "# Billing details\n\n## Pricing tiers\u200b\n\nTurso has three pricing tiers:\n\n- Starter (free, with limits)\n- Scaler (monthly cost, with limits)\n- Enterprise (unlimited)\n\n\nFor a breakdown of what each plan costs and includes, see the[ pricing page ](http://turso.tech/pricing).\n\n## Usage-based billing model\u200b\n\nFor the Starter and Scaler plans, Turso usage is limited monthly based on the\nfollowing usage observations during each calendar month:\n\n- Number of table rows read\n- Number of table rows written\n- Amount of total storage\n\n\nThe accounting for this usage is based on SQLite internal implementation\ndetails. This documentation explains the usage patterns that affect the above\nmetrics. In order to understand the usage of a particular database operation,\nyou must first understand how SQLite implements that operation.\n\n## Show current monthly usage\u200b\n\nYou can use the Turso CLI to[ inspect usage statistics ](https://docs.turso.tech/reference/turso-cli#inspect-database-usage)for a database for the\ncurrent calendar month.\n\n## Accounting for rows read\u200b\n\nA \"row read\" is more accurately described as a \"row scanned\" by SQLite during\nthe process of executing a statement. There are two things to know as you\nobserve the rows read metric provided by the Turso CLI:\n\n- A SQL query may cause more rows to be scanned than are returned by that query.\n- A SQL update statement incurs at least one row read for each row updated.\n\n\n### Queries with aggregate functions\u200b\n\nUse of[ aggregate functions ](https://www.sqlite.org/lang_aggfunc.html)such as `count` , `avg` , `min` , `max` , and `sum` incur one row read for each table row considered in the aggregation.\n\ninfo\n\nYou may want to optimize both the cost and performance of aggregation queries by\nusing another table to store aggregate values, and keeping it up to date (using\na transaction) as the original table is updated.\n\n### Queries without a supporting index (full table scan)\u200b\n\nAny query that is not able to make use of an index on a table incurs one row\nread for each row in the table.\n\nRead some[ general advice ](https://docs.turso.tech//billing-details/#advice-for-reducing-usage)on avoiding expensive\ntable scans.\n\n### Table joins, subqueries, and compound queries\u200b\n\nA query that consults multiple tables incurs one row read for each row that was\nconsidered from each table participating in the query.\n\n### Row updates\u200b\n\nA SQL update command that changes row data incurs one read (in addition to one\nwrite) for each row updated. If the update uses a filter to choose rows to\nmodify, and SQLite is unable to use an index to find those rows, it performs a\nfull table scan, incurring one read for *each* row in the entire table, in\naddition to one row write for each row updated.\n\n### ALTER TABLE row reads\u200b\n\n`ALTER TABLE`\n\nUse of an `ALTER TABLE` statement that effectively rewrites the contents of each\nrow in a table requires a full table scan, which incurs one row read for each\nexisting row in the table.\n\nAn `ALTER TABLE DROP COLUMN` statement[ might not cause a full-table scan ](https://www.sqlite.org/lang_altertable.html).\n\nAn `ALTER TABLE` statement might also[ incur row\nwrites ](https://docs.turso.tech//billing-details/#alter-table-row-writes).\n\n### Adding an index to a table with existing rows\u200b\n\nAdding an index to a table requires a full table scan, and incurs one read for\neach row that currently exists in the table.\n\n### SQLite system tables\u200b\n\nSQLite tables that are maintained internally, such as `dbstat` and tables\nprefixed with `sqlite_` do not incur row reads when used in a query.\n\n### Commands that incur no row reads\u200b\n\nIf a command doesn't incur any row reads or row writes as part of its execution,\nthe command instead incurs one row read. For example, `select 1` incurs one row\nread.\n\n## Accounting for rows written\u200b\n\nA \"row written\" includes both a newly inserted row and an update of a single\nexisting row.\n\n### ALTER TABLE row writes\u200b\n\n`ALTER TABLE`\n\n `ALTER TABLE` statements may incur one row write for each existing row if row\ndata is modified during the operation. Read about[ how SQLite works for\ndifferent types of alterations ](https://www.sqlite.org/lang_altertable.html#how_it_works).\n\nAn `ALTER TABLE` statement might also[ incur row reads ](https://docs.turso.tech//billing-details/#alter-table-row-reads).\n\n### Aborted transactions\u200b\n\nA row inserted or updated during a transaction still incurs a row write even if\nthe transaction isn't committed.\n\n## Accounting for total storage\u200b\n\nThe SQLite virtual table[ dbstat ](https://www.sqlite.org/dbstat.html)is used to determine the total space occupied\nby all tables and indexes. The smallest unit of measurement is a database file[ page ](https://www.sqlite.org/fileformat.html#pages)of 4KB in size.\n\ninfo\n\nWith SQLite databases, the VACUUM command is normally used to optimize storage.\nThis command is currently disabled in Turso. In the future, we hope to provide a\nway for developers to compact the total storage of a database.\n\n## Exceeding quotas\u200b\n\nFor billing plans with monthly usage quotas for row reads, row writes, and total\nstorage, a query that causes overage fails with the error code `BLOCKED` .\n\n## Advice for reducing usage\u200b\n\nTo minimize the incurred reads and writes on your database:\n\n- Read about the[ SQLite query planner ](https://www.sqlite.org/queryplanner.html)to understand how queries work.\n- Use SQLite's[ EXPLAIN QUERY PLAN statement ](https://www.sqlite.org/eqp.html)to understand if a query performs\na full table scan, and if it's using the best available index to minimize\nreads.\n- Ensure that every query that filters rows is able to use an index to find the\nrelevant rows. Without an index, SQLite performs a table scan to find the\nrows, which costs one read for each existing row in the table.\n- Add all required indexes at the time a table is created. Adding indexes to\ntables with existing rows incurs one read for each existing row.\n\n\n## Report issues with billing\u200b\n\nIf there is a question or problem with your bill or its accounting, contact[ support@turso.tech ](mailto:support@turso.tech).\n\n- [ Pricing tiers ](https://docs.turso.tech//billing-details/#pricing-tiers)\n- [ Usage-based billing model ](https://docs.turso.tech//billing-details/#usage-based-billing-model)\n- [ Show current monthly usage ](https://docs.turso.tech//billing-details/#show-current-monthly-usage)\n- [ Accounting for rows read ](https://docs.turso.tech//billing-details/#accounting-for-rows-read)\n    - [ Queries with aggregate functions ](https://docs.turso.tech//billing-details/#queries-with-aggregate-functions)\n\n- [ Queries without a supporting index (full table scan) ](https://docs.turso.tech//billing-details/#queries-without-a-supporting-index-full-table-scan)\n\n- [ Table joins, subqueries, and compound queries ](https://docs.turso.tech//billing-details/#table-joins-subqueries-and-compound-queries)\n\n- [ Row updates ](https://docs.turso.tech//billing-details/#row-updates)\n\n- [ ALTER TABLE row reads ](https://docs.turso.tech//billing-details/#alter-table-row-reads)\n\n- [ Adding an index to a table with existing rows ](https://docs.turso.tech//billing-details/#adding-an-index-to-a-table-with-existing-rows)\n\n- [ SQLite system tables ](https://docs.turso.tech//billing-details/#sqlite-system-tables)\n\n- [ Commands that incur no row reads ](https://docs.turso.tech//billing-details/#commands-that-incur-no-row-reads)\n- [ Accounting for rows written ](https://docs.turso.tech//billing-details/#accounting-for-rows-written)\n    - [ ALTER TABLE row writes ](https://docs.turso.tech//billing-details/#alter-table-row-writes)\n\n- [ Aborted transactions ](https://docs.turso.tech//billing-details/#aborted-transactions)\n- [ Accounting for total storage ](https://docs.turso.tech//billing-details/#accounting-for-total-storage)\n- [ Exceeding quotas ](https://docs.turso.tech//billing-details/#exceeding-quotas)\n- [ Advice for reducing usage ](https://docs.turso.tech//billing-details/#advice-for-reducing-usage)\n- [ Report issues with billing ](https://docs.turso.tech//billing-details/#report-issues-with-billing)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//3p-dev-tools": "# Third party developer tools\n\nThere are a number of tools supported by third party organizations that work\nwith Turso and libSQL.\n\n- [ Migration tools ](https://docs.turso.tech//3p-dev-tools/#migration-tools)\n- [ ORMs ](https://docs.turso.tech//3p-dev-tools/#orms)\n- [ Query builders ](https://docs.turso.tech//3p-dev-tools/#query-builders)\n- [ Compatibility libraries ](https://docs.turso.tech//3p-dev-tools/#compatibility-libraries)\n\n\nIf you're interested in adding libSQL support to your own tool, please reach out\nto us to coordinate.\n\n## Migration tools\u200b\n\n### Atlas\u200b\n\n[ Atlas ](https://atlasgo.io)is an open-source tool for managing and migrating database schemas using\nmodern DevOps principles. In order to work with a Turso database, you can simply\nprovide it with a `libsql+wss://` URL for your logical database wherever URLs\nare accepted by the Atlas CLI. You must also provide an[ auth token ](https://docs.turso.tech/reference/turso-cli#authentication-tokens-for-client-access)in the URL.\nFor example:\n\n`atlas schema inspect -u  \"libsql+wss://<db-host>?authToken=<token>\"`\n\n[ Go to Atlas documentation for Turso integration. ](https://atlasgo.io/guides/sqlite/turso)\n\n## ORMs\u200b\n\n### Drizzle ORM\u200b\n\n[ Drizzle ORM ](https://github.com/drizzle-team/drizzle-orm#readme)is a TypeScript ORM for SQL databases designed with maximum type\nsafety in mind. Drizzle supports libSQL, with an complete example that shows how\nto build a Hono server that:\n\n- Declares a Drizzle schema for tables\n- Uses a Zod validator with the schema to handle incoming JSON\n- Uses the schema make queries with a type-safe, fluent API\n- Switch seamlessly between SQLite local file and Turso remote database\n\n\n[ Go to the example for libSQL on the Drizzle GitHub. ](https://github.com/drizzle-team/drizzle-orm/tree/main/examples/libsql#readme)\n\n### SQLAlchemy\u200b\n\n[ SQLAlchemy ](https://www.sqlalchemy.org/)is the Python SQL toolkit and Object Relational Mapper that gives\napplication developers the full power and flexibility of SQL. A dialect is\nprovided for libSQL, which works with Turso. The only requirement for Turso is\nthe construction of a URL in a special format that instructs SQLAlchemy to use\nthis dialect, which is discussed in the README of the dialect repo.\n\n[ Go to the SQLAlchemy libSQL dialect repo on GitHub. ](https://github.com/libsql/sqlalchemy-libsql#readme)\n\n## Query builders\u200b\n\n### Kysely\u200b\n\n[ Kysely ](https://github.com/kysely-org/kysely#readme)is a type-safe and autocompletion-friendly TypeScript SQL query builder.\nlibSQL provides a plugin (dialect) that allows you to take full advantage of the\nfeatures of Kysely.\n\n[ Go to the Kysely libSQL dialect repo on GitHub. ](https://github.com/libsql/kysely-libsql#readme)\n\n### Knex.js\u200b\n\n[ Knex.js ](https://knexjs.org/)is a \"batteries included\" SQL query builder for a variety of\ndatabases, designed to be flexible, portable, and fun to use. It supports use of\nlibSQL server instances in the same way that it supports local SQLite files by\nswapping the sqlite3 module with[ libsql-node-sqlite3 ](https://docs.turso.tech//3p-dev-tools/#libsql-node-sqlite3).\n\n[ Go to example code in the libsql-node-sqlite3 README. ](https://github.com/libsql/libsql-node-sqlite3#usage-with-knex)\n\n## Compatibility libraries\u200b\n\n### libsql-node-sqlite3 (node-sqlite3 replacement)\u200b\n\nThe[ sqlite3 node module ](https://github.com/TryGhost/node-sqlite3#readme)is commonly used to access SQLite database files.\nlibSQL provides a drop-in replacement module for this that exposes the same API,\naccessing a libSQL server instance instead. This replacement module can also be\nused with[ Knex.js ](https://docs.turso.tech//3p-dev-tools/#knex-js).\n\n[ Go to the libsql-node-sqlite3 repo on GitHub. ](https://github.com/libsql/libsql-node-sqlite3#readme)\n\n- [ Migration tools ](https://docs.turso.tech//3p-dev-tools/#migration-tools)\n    - [ Atlas ](https://docs.turso.tech//3p-dev-tools/#atlas)\n- [ ORMs ](https://docs.turso.tech//3p-dev-tools/#orms)\n    - [ Drizzle ORM ](https://docs.turso.tech//3p-dev-tools/#drizzle-orm)\n\n- [ SQLAlchemy ](https://docs.turso.tech//3p-dev-tools/#sqlalchemy)\n- [ Query builders ](https://docs.turso.tech//3p-dev-tools/#query-builders)\n    - [ Kysely ](https://docs.turso.tech//3p-dev-tools/#kysely)\n\n- [ Knex.js ](https://docs.turso.tech//3p-dev-tools/#knex-js)\n- [ Compatibility libraries ](https://docs.turso.tech//3p-dev-tools/#compatibility-libraries)\n    - [ libsql-node-sqlite3 (node-sqlite3 replacement) ](https://docs.turso.tech//3p-dev-tools/#libsql-node-sqlite3)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli": "# Get started with the Turso CLI\n\nThe[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)is the main interface to work with Turso databases. You can use\nit to create, destroy, replicate, and query a database.\n\nThe following are requirements to get started with Turso using the CLI:\n\n- macOS, Linux, or WSL\n- A GitHub account\n- Familiarity with a unix style command shell (e.g. bash)\n\n\nTurso requires that you log in using a GitHub account. Any databases you create\nwhile logged in effectively belong to that account.\n\nFollow along with the commands shown in this tutorial to learn about how the\nTurso CLI works.\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access": "# Client SDKs\n\nlibSQL provides client SDKs that work for a variety of use cases:\n\n- [ Local access ](https://docs.turso.tech//libsql/client-access/#local-access)(in-memory, or using the same database file\nformat as SQLite)\n- [ Remote access ](https://docs.turso.tech//libsql/client-access/#remote-access)using a libSQL server instance (including\nTurso)\n- [ Hybrid access ](https://docs.turso.tech//libsql/client-access/#hybrid-access)using an embedded replica of data primarily hosted by libSQL\nserver\n\n\nSDKs are provided for the following languages:\n\n- [ JavaScript & TypeScript ](https://docs.turso.tech/libsql/client-access/javascript-typescript-sdk)\n- [ Rust ](https://docs.turso.tech/libsql/client-access/rust-sdk)\n- [ Python ](https://docs.turso.tech/libsql/client-access/python-sdk)\n- [ Go ](https://docs.turso.tech/libsql/client-access/go-sdk)\n\n\n## Access types\u200b\n\n### Local access\u200b\n\nWhen building an application that uses a local database, the client libraries\ncan act as a replacement for embedded SQLite (using the[ libSQL core library ](https://github.com/libsql/libsql)with native language bindings). The database can be in memory, or persisted to a\nfile using the same database file format as SQLite.\n\nTo use a libSQL client SDK for local database access, you must provide a `file:` URL with the path to the database file to use. The SDK attempts to create the\nfile if it doesn\u2019t exist.\n\n### Remote access\u200b\n\nWhen building an application that uses a remote libSQL server (including Turso),\nyou can use libSQL client libraries that communicate with the server over HTTP\nusing a custom protocol (\u201chrana\u201d). This is appropriate for code deployed to edge\nand serverless frameworks that act as an API gateway or middleware for a client\napplication.\n\nTo use a libSQL client SDK for remote database access, you must provide an `http:` , `https:` , or `libsql:` URL identifying the libSQL server to use.\n\n#### Turso databases\u200b\n\nFor databases hosted by Turso, you must provide a libsql URL and authentication\ntoken.  The URL for a database can be found using the Turso CLI:\n\n`$ turso db show  $DBNAME  --url`\n\nYou can generate a new[ database client authentication token ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)using the\nfollowing command:\n\n`$ turso db tokens create  $DBNAME`\n\n### Hybrid access (embedded replica)\u200b\n\ninfo\n\nHybrid access with embedded replicas is currently only supported for the\nJavaScript runtimes Node.js, Bun, and Deno with write access to a filesystem.\nSupport for hybrid access requires version 0.3.5 or later of the JavaScript SDK.\n\nThe libSQL client SDKs have the ability to maintain an embedded local copy of\nthe data hosted by a remote libSQL server for fast read access without requiring\nnetwork connectivity at the time of the query. Applications can request the\nlatest updates from the remote server by simply calling a method. libSQL then\nfigures out which changes on the remote server must be synchronized to the local\nreplica. When the host application performs a write operation, it\u2019s forwarded to\nthe remote libSQL server for execution, similar to the way that all writes to a\nlibSQL server replica are forwarded to the primary instance.\n\n## Client SDK capabilities\u200b\n\n### Batches\u200b\n\nWith the libSQL client library, a batch is one or more SQL statements executed\nin order in an implicit transaction. The transaction is controlled by the libSQL\nbackend. If all of the statements are successful, the transaction is committed.\nIf any of the statements fail, the entire transaction is rolled back and no\nchanges are made.\n\n### Interactive transactions\u200b\n\nInteractive transactions allow you to execute a series of read and write\nstatements in the context of a[ SQLite transaction ](https://www.sqlite.org/lang_transaction.html). Reads and writes are all\nconsistent within the scope of that transaction, unaffected by other client\nactivity. The transaction API requires you to choose when to commit or roll back\nthe transaction.\n\ndanger\n\nInteractive transactions effectively lock the entire database for writing when a\nwrite is first performed, and until the transaction is committed or rolled back.\nlibSQL aborts transactions after a 5 second timeout. Transactions may negatively\nimpact overall database performance when used on high latency connections or\nwith busy databases.\n\n### Embedded replicas\u200b\n\nIn order to use an embedded replica for hybrid access, the SDK must be\ninitialized with three values:\n\n- The URL of the remote database hosted by libSQL server\n- An authentication token for that database (required only by Turso)\n- The path to the local database file to be kept in sync with the remote\ndatabase. The local database file is fully compatible with SQLite.\n\n\ncaution\n\nYou should allow the libSQL SDK to create the local database files and perform\nwrite operations on them. Writes from other sources are not supported, and the\ndata might be lost upon the next sync with the remote database.\n\nWhen you provide a path to the local database file, two other files appear\nalongside it with the same name as the database file you provide with \"-shm\" and\n\"-wal\" suffixes. These files should be considered part of the local database. If\nyou need to relocate the embedded replica, these files should be moved along\nwith the main database file.\n\n- [ Access types ](https://docs.turso.tech//libsql/client-access/#access-types)\n    - [ Local access ](https://docs.turso.tech//libsql/client-access/#local-access)\n\n- [ Remote access ](https://docs.turso.tech//libsql/client-access/#remote-access)\n\n- [ Hybrid access (embedded replica) ](https://docs.turso.tech//libsql/client-access/#hybrid-access)\n- [ Client SDK capabilities ](https://docs.turso.tech//libsql/client-access/#client-sdk-capabilities)\n    - [ Batches ](https://docs.turso.tech//libsql/client-access/#batches)\n\n- [ Interactive transactions ](https://docs.turso.tech//libsql/client-access/#interactive-transactions)\n\n- [ Embedded replicas ](https://docs.turso.tech//libsql/client-access/#embedded-replicas)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/": "# Get started with the Turso CLI\n\nThe[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)is the main interface to work with Turso databases. You can use\nit to create, destroy, replicate, and query a database.\n\nThe following are requirements to get started with Turso using the CLI:\n\n- macOS, Linux, or WSL\n- A GitHub account\n- Familiarity with a unix style command shell (e.g. bash)\n\n\nTurso requires that you log in using a GitHub account. Any databases you create\nwhile logged in effectively belong to that account.\n\nFollow along with the commands shown in this tutorial to learn about how the\nTurso CLI works.\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/netlify-setup-guide/": "# Netlify setup guide\n\nIn this setup guide, you will deploy a web application that uses[ Turso ](https://turso.tech)as its\ndatabase. The deployment is configured with environment variables whose values\nare obtained from the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli).\n\nYou can find the[ source code for the app on GitHub ](https://github.com/turso-extended/app-find-me-on).\n\n## Prerequisites\u200b\n\n- A[ Netlify account ](https://app.netlify.com/signup)\n- The Turso CLI installed on your machine ([ installation instructions ](https://docs.turso.tech/reference/turso-cli#installation))\n\n\n## 1. Set up the Turso database\u200b\n\n### 1a. Create a new database\u200b\n\nRun the following CLI command:\n\n`$ turso db create findmeon`\n\n### 1b. Access the database using the shell\u200b\n\nRun the following CLI command:\n\n`$ turso db shell findmeon`\n\n### 1c. Define and populate the database\u200b\n\nCopy and paste the following SQL statements into the shell to create tables,\nindexes, and sample data:\n\n```\n-- users table\ncreate   table  users (\n  id  integer   primary   key ,\n  email  varchar ( 255 )   not   null ,\n  full_name  varchar ( 100 )   not   null ,\n  username  varchar ( 50 )   not   null ,\n  created_at  integer   default   ( cast ( unixepoch ( )   as   int ) )\n) ;\n-- links table\ncreate   table  links (\n  id  integer   primary   key ,\n  user_id  integer   not   null ,\n  website  varchar ( 100 )   not   null ,\n  link  text   not   null ,\n  created_at  integer   default   ( cast ( unixepoch ( )   as   int ) ) ,\n   foreign   key ( user_id )   references  users ( id )\n) ;\n-- unique index for the email row\ncreate   unique   index  idx_users_email  on  users ( email ) ;\n-- unique index for the username row\ncreate   unique   index  idx_users_username  on  users ( username ) ;\n-- a multicolumn index for the user_id and link columns\ncreate   unique   index  idx_links_userid_link  on  links ( user_id ,  link ) ;\n-- create user: \"turso\"\ninsert   into  users ( id ,  email ,  full_name ,  username )   values ( 1 ,   \"no-reply@turso.tech\" ,   \"Turso\" ,   \"turso\" ) ;\n-- add some links to \"turso\"\ninsert   into  links ( user_id ,  website ,  link )   values ( 1 ,   \"Twitter\" ,   \"https://twitter.com/tursodatabase\" ) ,\n( 1 ,   \"Linkedin\" ,   \"https://www.linkedin.com/company/turso/\" ) ,\n( 1 ,   \"GitHub\" ,   \"https://github.com/chiselstrike/\" ) ;\n```\n\n### 1d. Quit the shell\u200b\n\nType the following at the shell prompt to terminate the shell:\n\n`.quit`\n\n## 2. Deploy the app to Netlify\u200b\n\n### 2a. Start a guided installation\u200b\n\nClick this button to start a guided deployment. It will automatically copy the[ app's source code ](https://github.com/turso-extended/app-find-me-on)into your personal GitHub and deploy it from there.\n\n[  ](https://app.netlify.com/start/deploy?repository=https://github.com/turso-extended/app-find-me-on)\n\nImage: [ Deploy to Netlify ](https://www.netlify.com/img/deploy/button.svg)\n\nnote\n\nIf you would prefer to fork and deploy the source repo and configure the\ndeployment manually, follow the[ manual installation instructions ](https://docs.turso.tech//tutorials/netlify-setup-guide/#manual-installation)at the end of\nthis page. The following instructions assume that you're using the above button\nto perform the deployment.\n\n### 2b. Connect your Netlify account to your GitHub account\u200b\n\nNetlify will prompt you to log in with your GitHub account:\n\nImage: [ Screenshot of connecting Netlify to GitHub ](https://docs.turso.tech/assets/images/01-connect-netlify-github-a86781074b066ba1824f4f4c5e1f8916.png)\n\nImage: [ Screenshot of connecting Netlify to GitHub ](https://docs.turso.tech/assets/images/01-connect-netlify-github-a86781074b066ba1824f4f4c5e1f8916.png)\n\n### 2c. Provide values for the project's environment variables\u200b\n\nThe app (FindMeOn) requires two environment variables to enable it to connect to\nthe database you created earlier: `VITE_TURSO_DB_URL` and `VITE_TURSO_DB_AUTH_TOKEN` . These values are required by the[ libSQL TypeScript\nclient SDK ](https://docs.turso.tech/reference/client-access/javascript-typescript-sdk)to initialize the client and connect to the Turso database.\n\nNetlify prompts you for those values on the page you see after logging in.\n\n#### Get the value for VITE_TURSO_DB_URL\u200b\n\n`VITE_TURSO_DB_URL`\n\nRun the following CLI command:\n\n`$ turso db show findmeon --url`\n\nIt outputs the URL for the database. Copy that string into the `VITE_TURSO_DB_URL` variable.\n\n#### Get the value for VITE_TURSO_DB_AUTH_TOKEN\u200b\n\n`VITE_TURSO_DB_AUTH_TOKEN`\n\nRun the following CLI command:\n\n`$ turso db tokens create findmeon`\n\nThis creates a long-lived authentication token that allows the libSQL client\nlibrary used by the app to connect to the database.\n\nCopy the string into the `VITE_TURSO_DB_AUTH_TOKEN` variable.\n\n#### Deploy the app\u200b\n\nClick the \"Save & Deploy\" button to finalize the project\u2019s deployment.\n\nImage: [ Screenshot of Netlify prompting for environment variables ](https://docs.turso.tech/assets/images/02-netlify-prompt-env-vars-ea2114c35e6702626a87c00305094423.png)\n\nImage: [ Screenshot of Netlify prompting for environment variables ](https://docs.turso.tech/assets/images/02-netlify-prompt-env-vars-ea2114c35e6702626a87c00305094423.png)\n\nThis will take you to the \"Site overview\" page on your Netlify dashboard which\ndisplays the deployment status of the project. Once deployment is complete, you\ncan verify that the app works.\n\nImage: [ Screenshot of Netlify deployment status ](https://docs.turso.tech/assets/images/03-netlify-deployment-status-805ab8ad1dc644a2ac9c5b31a5e6060d.png)\n\nImage: [ Screenshot of Netlify deployment status ](https://docs.turso.tech/assets/images/03-netlify-deployment-status-805ab8ad1dc644a2ac9c5b31a5e6060d.png)\n\n## 3. Verify the app works\u200b\n\nIn step 1, you created and populated the database with some sample data. You can\nuse the deployed app to view the sample data to verify that it's correctly\nconnected to Turso.\n\nUsing the deployment URL provided by Netlify, visit the path `/u/turso` under\nit. This page displays the user data from the `users` and `links` tables.\n\nImage: [ Screenshot of deployed app working ](https://docs.turso.tech/assets/images/04-verify-app-works-68e88a8c6c2ed6da264d217f55a1492a.png)\n\nImage: [ Screenshot of deployed app working ](https://docs.turso.tech/assets/images/04-verify-app-works-68e88a8c6c2ed6da264d217f55a1492a.png)\n\n## (Alternative) manual installation\u200b\n\nIf you want to deploy an app without the help of the \"Deploy to Netlify\" button\nin step 2, you can instead use the Netlify dashboard to manually specify your\nGitHub repo and configure its environment variables. The steps below walk you\nthrough this process using the same source repository.\n\n### 1. Fork the repo\u200b\n\nVisit the[ project on GitHub ](https://github.com/turso-extended/app-find-me-on)and fork the repository to your own personal\naccount.\n\n### 2. Import the project in the Netlify dashboard\u200b\n\nOpen your Netlify dashboard, add a new site, and import the existing project\nthat you just forked.\n\nImage: [ Screenshot of importing a project in Netlify ](https://docs.turso.tech/assets/images/05-netlify-import-project-f67068f2d3442d7d4a1708e097dd2c92.png)\n\nImage: [ Screenshot of importing a project in Netlify ](https://docs.turso.tech/assets/images/05-netlify-import-project-f67068f2d3442d7d4a1708e097dd2c92.png)\n\n### 3. Connect to a Git provider\u200b\n\nChoose GitHub from the list (if you forked the repo in step 1).\n\nImage: [ Screenshot of connecting a Git project in Netlify ](https://docs.turso.tech/assets/images/06-netlify-connect-git-provider-3e2edb2298f7455c01997012a5583634.png)\n\nImage: [ Screenshot of connecting a Git project in Netlify ](https://docs.turso.tech/assets/images/06-netlify-connect-git-provider-3e2edb2298f7455c01997012a5583634.png)\n\n### 4. Pick your project\u2019s repository\u200b\n\nNetlify provides a list of repositories in your account. Choose your fork from\nthe list.\n\nImage: [ Screenshot of picking a git project in Netlify ](https://docs.turso.tech/assets/images/07-netlify-pick-repository-647e258319efd908b678de9de92536c5.png)\n\nImage: [ Screenshot of picking a git project in Netlify ](https://docs.turso.tech/assets/images/07-netlify-pick-repository-647e258319efd908b678de9de92536c5.png)\n\n### 5. Configure site settings\u200b\n\nConfigure the site settings for your project, including the production branch,\nbuild command, publish and base directory. (For most frameworks, Netlify\nautomatically detects and sets this configuration.)\n\nImage: [ Screenshot of configuring site settings in Netlify ](https://docs.turso.tech/assets/images/08-netlify-site-settings-dca1ab7d2c10a4f5f3524ca23f50c015.png)\n\nImage: [ Screenshot of configuring site settings in Netlify ](https://docs.turso.tech/assets/images/08-netlify-site-settings-dca1ab7d2c10a4f5f3524ca23f50c015.png)\n\n### 6. Configure the app's environment variables\u200b\n\nThe app (FindMeOn) requires two environment variables to enable it to connect to\nthe database you created earlier: `VITE_TURSO_DB_URL` and `VITE_TURSO_DB_AUTH_TOKEN` . These values are required by the[ libSQL TypeScript\nclient SDK ](https://docs.turso.tech/reference/client-access/javascript-typescript-sdk)to initialize the client and connect to the Turso database.\n\nClick the \"Show advanced\" button on the site setting page.\n\n#### 6a. Create an environment variable for VITE_TURSO_DB_URL\u200b\n\n`VITE_TURSO_DB_URL`\n\nUse the \"New variable\" button to create a new environment variable called `VITE_TURSO_DB_URL` .\n\nImage: [ Screenshot of adding an environment variable in Netlify ](https://docs.turso.tech/assets/images/09-netlify-create-env-var-0f19753dcb92098405603c5e821e9d98.png)\n\nImage: [ Screenshot of adding an environment variable in Netlify ](https://docs.turso.tech/assets/images/09-netlify-create-env-var-0f19753dcb92098405603c5e821e9d98.png)\n\nRun the following CLI command:\n\n`$ turso db show findmeon --url`\n\nIt outputs the URL for the database. Copy that string into the `VITE_TURSO_DB_URL` variable.\n\n#### 6b. Create an environment variable for VITE_TURSO_DB_AUTH_TOKEN\u200b\n\n`VITE_TURSO_DB_AUTH_TOKEN`\n\nUse the \"New variable\" button to create a new environment variable called `VITE_TURSO_DB_AUTH_TOKEN` .\n\nRun the following CLI command:\n\n`$ turso db tokens create findmeon -e none`\n\nThis creates a long-lived authentication token that allows the libSQL client\nlibrary used by the app to connect to the database. The `-e` flag in this\ncommand is short for `--expiration` .\n\nCopy the string into the `VITE_TURSO_DB_AUTH_TOKEN` variable.\n\n### 7. Deploy the site\u200b\n\nImage: [ Screenshot of deploying a site in Netlify ](https://docs.turso.tech/assets/images/10-netlify-deploy-site-91862180358731faddb1674bfd3e3dd1.png)\n\nImage: [ Screenshot of deploying a site in Netlify ](https://docs.turso.tech/assets/images/10-netlify-deploy-site-91862180358731faddb1674bfd3e3dd1.png)\n\n### 8. Preview the site after deployment\u200b\n\nImage: [ Screenshot of opening a preview in Netlify ](https://docs.turso.tech/assets/images/11-netlify-open-preview-dd6691bca20ce00fe3e5a33335b353bd.png)\n\nImage: [ Screenshot of opening a preview in Netlify ](https://docs.turso.tech/assets/images/11-netlify-open-preview-dd6691bca20ce00fe3e5a33335b353bd.png)\n\n- [ Prerequisites ](https://docs.turso.tech//tutorials/netlify-setup-guide/#prerequisites)\n- [ 1. Set up the Turso database ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1-set-up-the-turso-database)\n    - [ 1a. Create a new database ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1a-create-a-new-database)\n\n- [ 1b. Access the database using the shell ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1b-access-the-database-using-the-shell)\n\n- [ 1c. Define and populate the database ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1c-define-and-populate-the-database)\n\n- [ 1d. Quit the shell ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1d-quit-the-shell)\n- [ 2. Deploy the app to Netlify ](https://docs.turso.tech//tutorials/netlify-setup-guide/#2-deploy-the-app-to-netlify)\n    - [ 2a. Start a guided installation ](https://docs.turso.tech//tutorials/netlify-setup-guide/#2a-start-a-guided-installation)\n\n- [ 2b. Connect your Netlify account to your GitHub account ](https://docs.turso.tech//tutorials/netlify-setup-guide/#2b-connect-your-netlify-account-to-your-github-account)\n\n- [ 2c. Provide values for the project's environment variables ](https://docs.turso.tech//tutorials/netlify-setup-guide/#2c-provide-values-for-the-projects-environment-variables)\n- [ 3. Verify the app works ](https://docs.turso.tech//tutorials/netlify-setup-guide/#3-verify-the-app-works)\n- [ (Alternative) manual installation ](https://docs.turso.tech//tutorials/netlify-setup-guide/#manual-installation)\n    - [ 1. Fork the repo ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1-fork-the-repo)\n\n- [ 2. Import the project in the Netlify dashboard ](https://docs.turso.tech//tutorials/netlify-setup-guide/#2-import-the-project-in-the-netlify-dashboard)\n\n- [ 3. Connect to a Git provider ](https://docs.turso.tech//tutorials/netlify-setup-guide/#3-connect-to-a-git-provider)\n\n- [ 4. Pick your project\u2019s repository ](https://docs.turso.tech//tutorials/netlify-setup-guide/#4-pick-your-projects-repository)\n\n- [ 5. Configure site settings ](https://docs.turso.tech//tutorials/netlify-setup-guide/#5-configure-site-settings)\n\n- [ 6. Configure the app's environment variables ](https://docs.turso.tech//tutorials/netlify-setup-guide/#6-configure-the-apps-environment-variables)\n\n- [ 7. Deploy the site ](https://docs.turso.tech//tutorials/netlify-setup-guide/#7-deploy-the-site)\n\n- [ 8. Preview the site after deployment ](https://docs.turso.tech//tutorials/netlify-setup-guide/#8-preview-the-site-after-deployment)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/vercel-setup-guide/": "# Vercel setup guide\n\nIn this setup guide, we are deploying a web application made in[ Nuxt ](https://nuxt.com)that\u2019s\nusing[ Turso ](https://turso.tech)as its database.\n\nThe project being deployed is available on this[ GitHub repo ](https://github.com/turso-extended/app-top-web-frameworks).\n\n## Prerequisites\u200b\n\n1. [ A Vercel account ](https://app.netlify.com/signup).\n2. The Turso CLI installed in your machine ([ installation instructions ](https://docs.turso.tech/reference/turso-cli#installation)).\n\n\n## 1. Set up the Turso database\u200b\n\n### 1a. Create a new database\u200b\n\nRun the following CLI command:\n\n`turso db create topwebframeworks`\n\n### 1b. Access the database using the shell.\u200b\n\nRun the following CLI command\n\n`turso db shell topwebframeworks`\n\n### 1c. Define and populate the database\u200b\n\nCopy and paste the following SQL statements to the shell to create tables,\nindexes, and seed the database with sample data.\n\n```\n-- create frameworks table\ncreate   table  frameworks  (\n    id  integer   primary   key ,\n    name  varchar   ( 50 )   not   null ,\n     language   varchar   ( 50 )   not   null ,\n    url  text   not   null ,\n    stars  integer   not   null\n) ;\n-- \"name\" column unique index\ncreate   unique   index  idx_frameworks_name  on  frameworks  ( name ) ;\n-- \"url\" column unique index\ncreate   unique   index  idx_frameworks_url  on  frameworks  ( url ) ;\n-- seed some data\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Vue.js\"   ,   \"JavaScript\" ,   \"<https://github.com/vuejs/vue>\" ,   203000 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"React\" ,   \"JavaScript\" ,   \"<https://github.com/facebook/react>\" ,   206000 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Angular\" ,   \"TypeScript\" ,   \"<https://github.com/angular/angular>\" ,   87400 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"ASP.NET Core\" ,   \"C#\" ,   \"<https://github.com/dotnet/aspnetcore>\" ,   31400 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Express\" ,   \"JavaScript\" ,   \"<https://github.com/expressjs/express>\" ,   60500 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Django\" ,   \"Python\" ,   \"<https://github.com/django/django>\" ,   69800 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Ruby on Rails\" ,   \"Ruby\" ,   \"<https://github.com/rails/rails>\" ,   52600 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Spring\" ,   \"Java\" ,   \"<https://github.com/spring-projects/spring-framework>\" ,   51400 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Laravel\" ,   \"PHP\" ,   \"<https://github.com/laravel/laravel>\" ,   73100 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Flask\" ,   \"Python\" ,   \"<https://github.com/pallets/flask>\" ,   62500 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Ruby\" ,   \"Ruby\" ,   \"<https://github.com/ruby/ruby>\" ,   41000 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Symfony\" ,   \"PHP\" ,   \"<https://github.com/symfony/symfony>\" ,   28200 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"CodeIgniter\" ,   \"PHP\" ,   \"<https://github.com/bcit-ci/CodeIgniter>\" ,   18200 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"CakePHP\" ,   \"PHP\" ,   \"<https://github.com/cakephp/cakephp>\" ,   8600 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Qwik\" ,   \"TypeScript\" ,   \"<https://github.com/BuilderIO/qwik>\" ,   16400 ) ;\n```\n\n### 1d. Quit the shell\u200b\n\nType the following at the shell prompt to terminate the shell:\n\n`. quit`\n\n## 2. Deploy the app to Vercel\u200b\n\n### 2a. Start a guided installation\u200b\n\nClick this button to start a guided deployment. It will copy the app\u2019s source\ncode into your GitHub and deploy it from there.\n\n[  ](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fturso-extended%2Fapp-top-web-frameworks&env=NUXT_TURSO_DB_URL,NUXT_TURSO_DB_AUTH_TOKEN)\n\nImage: [ Deploy with Vercel ](https://vercel.com/button)\n\nnote\n\nIf you would prefer to fork and deploy the source repo and configure the\ndeployment manually, follow the[ manual installation\ninstructions ](https://docs.turso.tech//tutorials/vercel-setup-guide/#alternative-manual-deployment)at the end of this page. The\nfollowing instructions assume that you're using the above button to perform the\ndeployment.\n\n### 2b: Create a copy of the GitHub repository\u200b\n\nVercel will create a copy of the GitHub repository containing the project\u2019s\nsource to your GitHub account to facilitate continuous integration.\n\nImage: [ Screenshot of creating a new GitHub repository on Vercel ](https://docs.turso.tech/assets/images/01-vercel-create-copy-of-repository-0e2ca2ad46838c776c6272f3c05ae382.png)\n\nImage: [ Screenshot of creating a new GitHub repository on Vercel ](https://docs.turso.tech/assets/images/01-vercel-create-copy-of-repository-0e2ca2ad46838c776c6272f3c05ae382.png)\n\nAfter filing up the project\u2019s name and selecting the Git scope, click create to\nproceed.\n\n### 2c: Provide the values for the project\u2019s environment variables\u200b\n\nThe app (Top Web Frameworks) requires two environment variables to facilitate\nthe connection to the database created earlier: `NUXT_TURSO_DB_URL` and `NUXT_TURSO_DB_AUTH_TOKEN` .\n\nThese values are required by the[ libSQL TypeScript client ](https://github.com/libsql/libsql-client-ts/)SDK to initialize\nthe client and connect to the Turso database.\n\nImage: [ Screenshot of required environment variables in Vercel ](https://docs.turso.tech/assets/images/02-vercel-environment-variables-values-ccc72dde20dca1be0f9de2b59c9fbafd.png)\n\nImage: [ Screenshot of required environment variables in Vercel ](https://docs.turso.tech/assets/images/02-vercel-environment-variables-values-ccc72dde20dca1be0f9de2b59c9fbafd.png)\n\nVercel prompts you for these variables after you complete the previous step.\n\n#### Get the value for NUXT_TURSO_DB_URL\u200b\n\n`NUXT_TURSO_DB_URL`\n\nRun the following CLI command:\n\n`turso db show topwebframeworks --url`\n\nIt outputs the URL for the database. Copy that string into the `NUXT_TURSO_DB_URL` variable.\n\n#### Get the value for NUXT_TURSO_DB_AUTH_TOKEN\u200b\n\n`NUXT_TURSO_DB_AUTH_TOKEN`\n\nRun the following CLI command:\n\n`turso db tokens create topwebframeworks`\n\nIt outputs a non-expiring authentication token that allows the libSQL client\nlibrary used by the app to connect to the database.\n\nCopy the resulting string into the `NUXT_TURSO_DB_AUTH_TOKEN` variable.\n\n#### Deploy the app.\u200b\n\nClick the \u201cDeploy\u201d button to finalise the project\u2019s deployment.\n\nWhen the project completes deploying, you\u2019ll be redirected to the project\ndeployment\u2019s congratulatory page seen below.\n\nImage: [ Screenshot of deployed app success page on Vercel ](https://docs.turso.tech/assets/images/03-verce-app-deployment-success-page-cab90558b104bda03e0981f0fc0b7799.png)\n\nImage: [ Screenshot of deployed app success page on Vercel ](https://docs.turso.tech/assets/images/03-verce-app-deployment-success-page-cab90558b104bda03e0981f0fc0b7799.png)\n\n## 3. Verify the app works\u200b\n\nIn step 1, you\u00a0 created and seeded the database with some data. You can view the\ndeployed app by clicking the project\u2019s screenshot at the end of step 2 to view\nthe seeded data and verify that the app is correctly connected to Turso.\n\nImage: [ Screenshot of the deployed app preview ](https://docs.turso.tech/assets/images/04-vercel-deployed-app-preview-0d3fc01309cb0b43df956be318a54715.png)\n\nImage: [ Screenshot of the deployed app preview ](https://docs.turso.tech/assets/images/04-vercel-deployed-app-preview-0d3fc01309cb0b43df956be318a54715.png)\n\nHere onwards, Vercel will automate continuous deployments whenever you push to\nthe created git repository\u2019s production branch unless this setting is manually\ndisabled.\n\n## (Alternative) manual deployment\u200b\n\nTo manually set up your project for deployment on Vercel, without the help of\nthe \u201cVercel deploy button\u201d in step 2, you can instead use the Vercel dashboard\nto manually pick your GitHub repo and configure its environment variables.\n\nThe following instructions will walk you through this process using the same\nsource repository.\n\n### 1. Fork the repo\u200b\n\nVisit[ the project on\nGitHub ](https://github.com/turso-extended/app-top-web-frameworks)and fork the\nrepository to your account.\n\n### 2. Add a new project on your Vercel dashboard\u200b\n\nOpen your Vercel dashboard, select \u201cAdd New\u201d, and pick \u201cProject\u201d.\n\nImage: [ Screenshot of adding a new project on the vercel dashboard ](https://docs.turso.tech/assets/images/05-vercel-add-new-project-37a2e60a507f3cd1c2bae0faff380124.png)\n\nImage: [ Screenshot of adding a new project on the vercel dashboard ](https://docs.turso.tech/assets/images/05-vercel-add-new-project-37a2e60a507f3cd1c2bae0faff380124.png)\n\n### 3. Authorise Vercel\u200b\n\nIf you\u2019ve not authorised Vercel on your GitHub account you\u2019ll be requested to\nprovide such access.\n\nImage: [ Screenshot of installing Vercel to a GitHub account ](https://docs.turso.tech/assets/images/06-vercel-authorising-vercel-1c26fe4321a8b30278df406760c187e3.png)\n\nImage: [ Screenshot of installing Vercel to a GitHub account ](https://docs.turso.tech/assets/images/06-vercel-authorising-vercel-1c26fe4321a8b30278df406760c187e3.png)\n\nLikewise, at the repository level.\n\nImage: [ Screenshot of authorising Vercel access to a GitHub repository ](https://docs.turso.tech/assets/images/07-vercel-authorise-at-repository-level-2ed65793217a35d4cb73b91fd3f25e76.png)\n\nImage: [ Screenshot of authorising Vercel access to a GitHub repository ](https://docs.turso.tech/assets/images/07-vercel-authorise-at-repository-level-2ed65793217a35d4cb73b91fd3f25e76.png)\n\n### 4. Pick your GitHub repository\u200b\n\nNext, pick the forked GitHub repository and import it.\n\nImage: [ Screenshot of importing a GitHub repository on the Vercel deployment ](https://docs.turso.tech/assets/images/08-vercel-import-github-repository-4289f43e18d22199c8b2c3fb71b3fe18.png)\n\nImage: [ Screenshot of importing a GitHub repository on the Vercel deployment ](https://docs.turso.tech/assets/images/08-vercel-import-github-repository-4289f43e18d22199c8b2c3fb71b3fe18.png)\n\n### 5. Configure the site settings\u200b\n\nSet the site settings for your project on Vercel, including the project\u2019s name,\nbuild, and output configurations. (For most frameworks, as is the case here,\nVercel auto-detects and populates the default configuration for the project.)\n\nImage: [ Screenshot of configuring site settings on Vercel ](https://docs.turso.tech/assets/images/09-vercel-configuring-site-settings-be7d340185090f4151cae6d3938b05a1.png)\n\nImage: [ Screenshot of configuring site settings on Vercel ](https://docs.turso.tech/assets/images/09-vercel-configuring-site-settings-be7d340185090f4151cae6d3938b05a1.png)\n\n### 6. Configure the app\u2019s environment variables\u200b\n\nThe app (Top Web Frameworks) requires two environment variables to facilitate\nthe connection to the database created earlier: `NUXT_TURSO_DB_URL` and `NUXT_TURSO_DB_AUTH_TOKEN` .\n\nExpand the \u201cEnvironment Variables\u201d section on the site settings page.\n\nThese values are required by the[ libSQL TypeScript client ](https://github.com/libsql/libsql-client-ts/)SDK to initialize\nthe client and connect to the Turso database.\n\n#### 6a. Create an environment variable for NUXT_TURSO_DB_URL\u200b\n\n`NUXT_TURSO_DB_URL`\n\nOn the available environment section fields, add `NUXT_TURSO_DB_URL` as a new\nenvironment key.\n\nRun the following CLI command:\n\n`turso db show topwebframeworks --url`\n\nIt outputs the URL for the database. Copy that string into the `NUXT_TURSO_DB_URL` variable, and click the \u201cAdd\u201d button.\n\n#### 6b. Create an environment variable for NUXT_TURSO_DB_AUTH_TOKEN\u200b\n\n`NUXT_TURSO_DB_AUTH_TOKEN`\n\nAdd `NUXT_TURSO_DB_AUTH_TOKEN` as a new environment key.\n\nRun the following CLI command:\n\n`turso db tokens create topwebframeworks -e none`\n\nIt outputs a non-expiring authentication token that allows the libSQL client\nlibrary used by the app to connect to the database. The `-e` flag in the command\nis the short for `--expiration` .\n\nCopy the resulting string into the `NUXT_TURSO_DB_AUTH_TOKEN` variable, and\nclick the \u201cAdd\u201d button.\n\nImage: [ Screenshot of configuring environment variables in Vercel manual deployment settings ](https://docs.turso.tech/assets/images/10-vercel-configuring-environment-variables-manual-setup-384ffa0357267498c5765a01aed37848.png)\n\nImage: [ Screenshot of configuring environment variables in Vercel manual deployment settings ](https://docs.turso.tech/assets/images/10-vercel-configuring-environment-variables-manual-setup-384ffa0357267498c5765a01aed37848.png)\n\n### 7. Deploy the site\u200b\n\nImage: [ Screenshot of deploying a configured Vercel deployment ](https://docs.turso.tech/assets/images/11-vercel-deploying-the-site-manual-setup-51f1c7eaccc89753df5898f4b730c1a1.png)\n\nImage: [ Screenshot of deploying a configured Vercel deployment ](https://docs.turso.tech/assets/images/11-vercel-deploying-the-site-manual-setup-51f1c7eaccc89753df5898f4b730c1a1.png)\n\nAfter the deployment is completed, you\u2019ll be directed to a congratulatory page\nlike the one below.\n\nImage: [ Screenshot of a Vercel manual deployment success page ](https://docs.turso.tech/assets/images/12-vercel-deployment-success-page-2-729eac3238d53595b4612ba484d82a0b.png)\n\nImage: [ Screenshot of a Vercel manual deployment success page ](https://docs.turso.tech/assets/images/12-vercel-deployment-success-page-2-729eac3238d53595b4612ba484d82a0b.png)\n\n### 8. Preview the site after deployment\u200b\n\nClick the site preview screenshot on the previous step to see the deployed site.\n\nImage: [ Screenshot of the deployed app preview ](https://docs.turso.tech/assets/images/04-vercel-deployed-app-preview-0d3fc01309cb0b43df956be318a54715.png)\n\nImage: [ Screenshot of the deployed app preview ](https://docs.turso.tech/assets/images/04-vercel-deployed-app-preview-0d3fc01309cb0b43df956be318a54715.png)\n\n- [ Prerequisites ](https://docs.turso.tech//tutorials/vercel-setup-guide/#prerequisites)\n- [ 1. Set up the Turso database ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1-set-up-the-turso-database)\n    - [ 1a. Create a new database ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1a-create-a-new-database)\n\n- [ 1b. Access the database using the shell. ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1b-access-the-database-using-the-shell)\n\n- [ 1c. Define and populate the database ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1c-define-and-populate-the-database)\n\n- [ 1d. Quit the shell ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1d-quit-the-shell)\n- [ 2. Deploy the app to Vercel ](https://docs.turso.tech//tutorials/vercel-setup-guide/#2-deploy-the-app-to-vercel)\n    - [ 2a. Start a guided installation ](https://docs.turso.tech//tutorials/vercel-setup-guide/#2a-start-a-guided-installation)\n\n- [ 2b: Create a copy of the GitHub repository ](https://docs.turso.tech//tutorials/vercel-setup-guide/#2b-create-a-copy-of-the-github-repository)\n\n- [ 2c: Provide the values for the project\u2019s environment variables ](https://docs.turso.tech//tutorials/vercel-setup-guide/#2c-provide-the-values-for-the-projects-environment-variables)\n- [ 3. Verify the app works ](https://docs.turso.tech//tutorials/vercel-setup-guide/#3-verify-the-app-works)\n- [ (Alternative) manual deployment ](https://docs.turso.tech//tutorials/vercel-setup-guide/#alternative-manual-deployment)\n    - [ 1. Fork the repo ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1-fork-the-repo)\n\n- [ 2. Add a new project on your Vercel dashboard ](https://docs.turso.tech//tutorials/vercel-setup-guide/#2-add-a-new-project-on-your-vercel-dashboard)\n\n- [ 3. Authorise Vercel ](https://docs.turso.tech//tutorials/vercel-setup-guide/#3-authorise-vercel)\n\n- [ 4. Pick your GitHub repository ](https://docs.turso.tech//tutorials/vercel-setup-guide/#4-pick-your-github-repository)\n\n- [ 5. Configure the site settings ](https://docs.turso.tech//tutorials/vercel-setup-guide/#5-configure-the-site-settings)\n\n- [ 6. Configure the app\u2019s environment variables ](https://docs.turso.tech//tutorials/vercel-setup-guide/#6-configure-the-apps-environment-variables)\n\n- [ 7. Deploy the site ](https://docs.turso.tech//tutorials/vercel-setup-guide/#7-deploy-the-site)\n\n- [ 8. Preview the site after deployment ](https://docs.turso.tech//tutorials/vercel-setup-guide/#8-preview-the-site-after-deployment)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/": "# Fermyon Spin with Rust setup guide\n\nIn this setup guide, you will deploy a simple route component to Fermyon Spin\nthat queries a[ Turso ](https://turso.tech)database. The deployment is configured with variables\nwhose values are obtained from the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli).\n\n## Prerequisites\u200b\n\n- A[ Fermyon Cloud account ](https://cloud.fermyon.com/login)\n- The Turso CLI installed on your machine ([ installation instructions ](https://docs.turso.tech/reference/turso-cli#installation))\n- Rust toolchain installed[ using rustup ](https://www.rust-lang.org/tools/install)(Homebrew installation will not work)\n- Spin CLI installed\n- Familiarity with Spin is suggested ([ follow the Spin quickstart ](https://developer.fermyon.com/spin/quickstart))\n\n\nCheck that the turso CLI is installed:\n\n`$ turso --version`\n\nCheck that rust is installed using rustup:\n\n```\n$ rustup --version\nrustup 1.26.0 (5af9b9484 2023-04-05)\ninfo: This is the version for the rustup toolchain manager, not the rustc compiler.\ninfo: The currently active `rustc` version is `rustc 1.70.0 (90c541806 2023-05-31)`\n```\n\nYou must have the wasm32-wasi toolchain support installed:\n\n```\n$ rustup target add wasm32-wasi\n$ rustup target list | grep wasm32-wasi\nwasm32-wasi (installed)\n```\n\nCheck that the Spin CLI is installed:\n\n```\n$ spin --version\nspin 1.3.0 (9fb8256 2023-06-12)\n```\n\nMake sure you are already logged in to the CLI using `spin login` .\n\n## 1. Create a Turso database\u200b\n\nRun the following Turso CLI command to create a new database named \"turso-fermyon\":\n\n`$ turso db create turso-fermyon`\n\nThis tutorial does not cover populating or querying tables in the database.\nInstead, you will simply run a query that requires no tables.\n\n## 2. Deploy a new spin app using the Rust template\u200b\n\n### 2a. Create a new app using a template for Rust\u200b\n\nIn a shell, change to a directory where you want to create a project. The Spin\nCLI will create another directory under it.\n\nRun the following Spin CLI command to create a new project using a template:\n\n`$ spin new`\n\n1. Select the \"http-rust\" template.\n2. When prompted, give the new application the name \"turso-fermyon\".\n3. Take all the other defaults by pressing enter at each prompt.\n\n\n```\nPick a template to start your application with: http-rust (HTTP request handler using Rust)\nEnter a name for your new application: turso-fermyon\nDescription:\nHTTP base: /\nHTTP path: /...\n```\n\nSpin creates a new directory with the in the current directory with the same\nname that you gave the application.\n\nOpen `src/lib.rs` in a code editor. This contains minimal code to respond to an\nHTTP request at the route specified in `spin.toml` . It responds with the text\n\"Hello, Fermyon\".\n\n```\n#[http_component]\nfn   handle_turso_fermyon ( req :   Request )   ->   Result < Response >   {\n     println! ( \"{:?}\" ,  req . headers ( ) ) ;\n     Ok ( http :: Response :: builder ( )\n         . status ( 200 )\n         . header ( \"foo\" ,   \"bar\" )\n         . body ( Some ( \"Hello, Fermyon\" . into ( ) ) ) ? )\n}\n```\n\n### 2b. Build the template app\u200b\n\nBuild the template application as-is without any modifications to verify that\nit works.\n\n```\n$  cd  turso-fermyon\n$ spin build\n.. .\nFinished building all Spin components\n```\n\nThe build process creates a file `target/wasm32-wasi/release/turso_fermyon.wasm` . This file is referenced in the\nproject `spin.toml` as the component source to deploy.\n\n### 2c. Run the template app locally\u200b\n\nRun the template app:\n\n`$ spin up`\n\n```\nLogging component stdio to \".spin/logs/\"\nServing http://127.0.0.1:3000\nAvailable Routes:\n  turso-fermyon: http://127.0.0.1:3000 (wildcard)\n```\n\nThe output contains a local URL you can use to invoke the route. Copy the URL\nand use curl to access it:\n\n`$  curl  http://127.0.0.1:3000`\n\n`Hello, Fermyon`\n\nIt outputs the string \"Hello, Fermyon\".\n\nStop the local Spin server with ctrl-C.\n\n### 2c. Deploy the template app to Fermyon Cloud\u200b\n\nDeploy the template app:\n\n`$ spin deploy`\n\n```\nUploading turso-fermyon version 0.1.0+rb01010f5...\nDeploying...\nWaiting for application to become ready...... ready\nAvailable Routes:\n  turso-fermyon: https://turso-fermyon-[RANDOM-CHARS].fermyon.app (wildcard)\n```\n\nThe output contains a remote URL you can use to invoke the route. It has random\ncharacters that are unique to your deployment. Copy the URL and use curl to\naccess it:\n\n`$ curl https://turso-fermyon-[RANDOM-CHARS].fermyon.app`\n\n`Hello, Fermyon`\n\n## 3. Add the libSQL Rust SDK\u200b\n\nNow that you've verified that you can run and deploy the application, the next\nstep is to change the code add the libSQL client SDK for Rust used to query your\nTurso database.\n\nThe[ libsql-client crate ](https://crates.io/crates/libsql-client)requires the feature `spin_backend` at installation,\nand no default features. Run the following command:\n\n```\n$ cargo  add   \\\n    --git https://github.com/libsql/libsql-client-rs  \\\n    --no-default-features -F spin_backend\n```\n\nThis adds the following line to your `Cargo.toml` in the `[dependencies]` table:\n\n`libsql-client   =   {   git   =   \"https://github.com/libsql/libsql-client-rs\" ,   version   =   \"0.31.4\" ,   default-features   =   false ,   features   =   [ \"spin_backend\" ]   }`\n\nnote\n\nYou must install the client using the GitHub URL. The Spin SDK doesn't support\ninstallation of crates from crates.io as you would normally with a Rust program.\n\n### 3a. Add configuration for Turso in spin.toml\u200b\n\nYou can use[ Spin Application Variables and Secrets ](https://developer.fermyon.com/cloud/variables)to configure values in a\nSpin app.\n\nAdd the following lines to `spin.toml`  **above** the `[[component]]` table to define\ntwo variables whose values will be used later in code:\n\n```\n# The [variables] table must occur above the [[component]] table\n[ variables ]\nturso_url   =   {   default   =   \"libsql://your-turso-database.turso.io\"   }\nturso_auth_token   =   {   required   =   true ,   secret   =   true   }\n```\n\nnote\n\nAbove, `turso_auth_token` is defined as a secret variable that will eventually\ncontain a database auth token that you will create later. You should not share\nthis token with anyone you don't trust with full access to your database.\n\nAdd the following lines to `spin.toml`  **below** the `[[component]]` table to add\nthe variables to the component config:\n\n```\n# The [component.config] table must occur below the [[component]] table\n[ component.config ]\nturso_url   =   \"{{ turso_url }}\"\nturso_auth_token   =   \"{{ turso_auth_token }}\"\n```\n\nModify the value for `allowed_http_hosts` within the `[[component]]` table:\n\n```\n# The following line must be modified under the [[component]] table\nallowed_http_hosts   =   [ \"your-turso-database.turso.io\" ]\n```\n\nnote\n\nBy default, Spin does not allow any outgoing network connections. In order to\nquery your Turso database, `allowed_http_hosts` must contain the hostname of\nyour database in order for Spin to[ allow network access ](https://developer.fermyon.com/spin/writing-apps#granting-networking-permissions-to-components)to it.\n\nIn the above configurations, \"your-turso-database.turso.io\" must be replaced by\nyour Turso database hostname.\n\nRun the following Turso CLI command to get the libSQL URL for your database:\n\n`$ turso db show turso-fermyon --url`\n\nCopy the hostname part of the URL and paste it to the two places where you see\n\"your-turso-database.turso.io\" in `spin.toml` (both the `turso_url` variable and `allowed_http_hosts` ).\n\nnote\n\n- The `turso_url` variable must have the full URL of the database, including\n\"libsql://\".\n- The `allowed_http_hosts` array just requires the hostname part of the URL.\n\n\nThe entire spin.toml file will look something like this, with your database\nhostname substituted in the highlighted lines:\n\n```\nspin_manifest_version   =   \"1\"\nauthors   =   [ \"your-name <your-email>\" ]\ndescription   =   \"\"\nname   =   \"turso-fermyon\"\ntrigger   =   {   type   =   \"http\" ,   base   =   \"/\"   }\nversion   =   \"0.1.0\"\n[ variables ]\nturso_url   =   {   default   =   \"libsql://turso-fermyon-[your-github].turso.io\"   }\nturso_auth_token   =   {   required   =   true ,   secret   =   true   }\n[ [ component ] ]\nid   =   \"turso-fermyon\"\nsource   =   \"target/wasm32-wasi/release/turso_fermyon.wasm\"\nallowed_http_hosts   =   [ \"turso-fermyon-[your-github].turso.io\" ]\n[ component.trigger ]\nroute   =   \"/...\"\n[ component.build ]\ncommand   =   \"cargo build --target wasm32-wasi --release\"\nwatch   =   [ \"src/**/*.rs\" ,   \"Cargo.toml\" ]\n[ component.config ]\nturso_url   =   \"{{ turso_url }}\"\nturso_auth_token   =   \"{{ turso_auth_token }}\"\n```\n\n### 3b. Add code to create a client object and query Turso in src/lib.rs\u200b\n\n`src/lib.rs`\n\nOpen `src/lib.rs` , delete all of the template code, and replace it with the following:\n\n```\nuse   anyhow :: Result ;\n// Use the libsql_client module\nuse   libsql_client :: { Config ,   SyncClient } ;\nuse   spin_sdk :: {\n     http :: { Request ,   Response } ,\n    http_component ,  config ,\n} ;\n/// A simple Spin HTTP component.\n#[http_component]\nfn   handle_turso_fermyon ( _req :   Request )   ->   Result < Response >   {\n     // Get component configuration for the Turso database\n     let  turso_url  =   config :: get ( \"turso_url\" ) ? ;\n     let  turso_auth_token  =   config :: get ( \"turso_auth_token\" ) ? ;\n     // Create a SyncClient object for querying Turso\n     let  libsql_config  =   Config :: new ( turso_url . as_str ( ) ) ?\n         . with_auth_token ( turso_auth_token ) ;\n     let  libsql_client  =   SyncClient :: from_config ( libsql_config ) ? ;\n     // Make a query that returns a ResultSet with one row with one column containing a string\n     let  rs  =  libsql_client . execute ( \"select 'Hello, Turso'\" ) ? ;\n     let  message  =  rs . rows [ 0 ] . values [ 0 ] . to_string ( ) ;\n     Ok ( http :: Response :: builder ( )\n         . status ( 200 )\n         . body ( Some ( message . into ( ) ) ) ? )\n}\n```\n\nThe value of the `turso_auth_token` config variable will be specified when running\nand deploying the component.\n\nnote\n\nThis code uses a version of the client `SyncClient` that offers a fully\nsynchronous API. The libSQL Rust SDK also offers a client with an asynchronous\nAPI, but async functions are not yet supported by Spin.\n\nnote\n\nIn order to keep this code sample small, it does no error checking at all. You\nmay want to perform your own error checking wherever you see the `?` operator.\n\n## 4. Run the component locally with spin up\u200b\n\n`spin up`\n\nBefore running, you will need an auth token string for the `turso_auth_token` variable in the configuration and code you added in the prior step. Run the\nfollowing Turso CLI command to get a database auth token:\n\n`$ turso db tokens create turso-fermyon`\n\ncaution\n\nDo not share this token with anyone that you do not trust with full access to\nyour database.\n\nCopy the output and paste it into the following command to export a new shell\nenvironment variable:\n\n`$  export   SPIN_CONFIG_TURSO_AUTH_TOKEN = \"paste-your-token-here\"`\n\nnote\n\nSpin environment variables always start with `SPIN_CONFIG_` , and the remainder\nof the env var name must match the variable defined in `spin.toml` . In this\ncase, the shell environment variable `SPIN_CONFIG_TURSO_AUTH_TOKEN` contains the\nvalue for the `turso_auth_token` secret variable.\n\nBuild and run the component locally using the Spin CLI:\n\n`$ spin build  &&  spin up`\n\nThe Spin CLI outputs the local URL you can use to invoke the component. Copy the\nURL and paste it on the curl command line:\n\n`$  curl  http://127.0.0.1:3000`\n\n`Hello, Turso`\n\nIt outputs the message \"Hello, Turso\" generated by the select SQL statement in\nthe code.\n\nStop the local Spin server with ctrl-C.\n\n## 5. Deploy and run the component on Fermyon Cloud\u200b\n\nDeploy the updated component using the Spin CLI, specifying the value of the `turso_auth_token` value using the shell environment variable defined in the\nprior step:\n\n`$ spin deploy --variable  turso_auth_token = \" $SPIN_CONFIG_TURSO_AUTH_TOKEN \"`\n\nThe CLI outputs the same remote URL that you got previously in step 2. Copy the\nURL and use curl to access it:\n\n`$ curl https://turso-fermyon-[RANDOM-CHARS].fermyon.app`\n\n`Hello, Turso`\n\nCongratulations, you have deployed a Spin application to Fermyon Cloud that\nqueries Turso with the libSQL Rust SDK!\n\n## 6. More resources\u200b\n\nNow that you know how to deploy a Fermyon Spin application using Turso, use the\nfollowing resources to learn more about how Turso and the libSQL Rust SDK work.\n\n- [ Turso documentation ](https://docs.turso.tech)\n- [ Turso CLI reference ](https://docs.turso.tech/reference/turso-cli)\n- [ libSQL Rust SDK reference ](https://docs.turso.tech/reference/client-access/rust-sdk)\n- [ libsql-client crate ](https://crates.io/crates/libsql-client)\n\n\n- [ Prerequisites ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#prerequisites)\n- [ 1. Create a Turso database ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#1-create-a-turso-database)\n- [ 2. Deploy a new spin app using the Rust template ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#2-deploy-a-new-spin-app-using-the-rust-template)\n    - [ 2a. Create a new app using a template for Rust ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#2a-create-a-new-app-using-a-template-for-rust)\n\n- [ 2b. Build the template app ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#2b-build-the-template-app)\n\n- [ 2c. Run the template app locally ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#2c-run-the-template-app-locally)\n\n- [ 2c. Deploy the template app to Fermyon Cloud ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#2c-deploy-the-template-app-to-fermyon-cloud)\n- [ 3. Add the libSQL Rust SDK ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#3-add-the-libsql-rust-sdk)\n    - [ 3a. Add configuration for Turso in spin.toml ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#3a-add-configuration-for-turso-in-spintoml)\n\n- [ 3b. Add code to create a client object and query Turso in src/lib.rs ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#3b-add-code-to-create-a-client-object-and-query-turso-in-srclibrs)\n- [ 4. Run the component locally with spin up ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#4-run-the-component-locally-with-spin-up)\n- [ 5. Deploy and run the component on Fermyon Cloud ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#5-deploy-and-run-the-component-on-fermyon-cloud)\n- [ 6. More resources ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#6-more-resources)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/": "# Creating an e-commerce store with Remix, Turso, Drizzle, and Cloudflare Workers\n\nIn this tutorial, we are going to learn how to build an e-commerce store \u201cThe\nMugs Store\u201d using the titled stack and afterwards deploy it to Cloudflare\nworkers. The store builds upon the implementation that is listed on the[ Create a shopping cart using Qwik and Turso ](https://blog.turso.tech/create-a-shopping-cart-using-qwik-and-turso-b51994f6ab73), with the addition of user\nauthentication.\n\nWe are using the stack in question (Cloudflare Workers and Turso) to build The\n\"Mugs Store\" since it makes for a good combination for an e-commerce website\noffering low-latency for all visitors as Cloudflare workers places the compute\non the edge with a globally distributed network, and with Turso\u2019s database\nreplication, we get to place the site\u2019s data where our users are.\n\nThe complete source code to the project we will build in this tutorial can also\nbe[ found on GitHub ](https://github.com/turso-extended/app-the-mug-store)for reference.\n\n[ Remix ](https://github.com/turso-extended/app-the-mug-store)is a full stack web framework that lets you focus on the user interface\nand work back through web standards and deliver a fast, slick, and resilient\nuser experience.\n\n[ Turso ](https://turso.tech)is the distributed database based on[ libSQL ](https://github.com/libsql/libsql#readme), the open-contribution\nfork of SQLite.\n\n[ Drizzle ](https://orm.drizzle.team)is a TypeScript Object-Relational Mapping tool (ORM) with support for\nPostgreSQL, MySQL, and SQLite databases.\n\nThe tutorial has been broken down to the following steps for readability.\n\n## Setting up the project\u200b\n\nIn this step, you'll be walked through creating a new Remix project and setting\nup some essential parts of the e-commerce store user interface (UI).\n\n## Setting up Turso\u200b\n\nIn this step, you'll be guided through creating a Turso database, acquiring the\ndatabase credentials required by the[ libSQL client library ](https://github.com/libsql/libsql-client-ts), and adding them as\nthe Remix app's environment variables.\n\n## Configuring Drizzle\u200b\n\nIn this step, you'll be guided through configuring Drizzle as the Remix app's\nobject-relational mapping (ORM) tool.\n\n## Listing store items\u200b\n\nIn this step, you will be walked through implementing the store's product\nlisting and it's associated components.\n\n## User authentication\u200b\n\nIn this step, we'll see how user authentication can be set up to guard some\nparts of the store that should only be accessible to registered users.\n\n## Adding the shopping cart\u200b\n\nIn this step, we'll go through setting up the store's cart page, a mini cart\ncomponent that's accessible throughout the store, and implementing logic that\nwill help us manage the items within the cart.\n\n## Checking out and placing orders\u200b\n\nIn this step, we will take care of checking out customers that have added items\nto their carts and want to place orders.\n\n## Deploying the app to Cloudflare Workers\u200b\n\nIn the final step we will go through the deployment of the e-commerce store to\nCloudflare Workers.\n\n## More resources\u200b\n\n- [ Remix documentation ](https://remix.run/docs/en/1.18.1)\n- [ Cloudflare Workers documentation ](https://workers.cloudflare.com/)\n- [ Drizzle documentation ](https://orm.drizzle.team/)\n- [ Example apps and more on github.com/turso-extended ](https://github.com/turso-extended)\n\n\n- [ Setting up the project ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#setting-up-the-project)\n- [ Setting up Turso ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#setting-up-turso)\n- [ Configuring Drizzle ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#configuring-drizzle)\n- [ Listing store items ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#listing-store-items)\n- [ User authentication ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#user-authentication)\n- [ Adding the shopping cart ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#adding-the-shopping-cart)\n- [ Checking out and placing orders ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#checking-out-and-placing-orders)\n- [ Deploying the app to Cloudflare Workers ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#deploying-the-app-to-cloudflare-workers)\n- [ More resources ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#more-resources)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/netlify-setup-guide": "# Netlify setup guide\n\nIn this setup guide, you will deploy a web application that uses[ Turso ](https://turso.tech)as its\ndatabase. The deployment is configured with environment variables whose values\nare obtained from the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli).\n\nYou can find the[ source code for the app on GitHub ](https://github.com/turso-extended/app-find-me-on).\n\n## Prerequisites\u200b\n\n- A[ Netlify account ](https://app.netlify.com/signup)\n- The Turso CLI installed on your machine ([ installation instructions ](https://docs.turso.tech/reference/turso-cli#installation))\n\n\n## 1. Set up the Turso database\u200b\n\n### 1a. Create a new database\u200b\n\nRun the following CLI command:\n\n`$ turso db create findmeon`\n\n### 1b. Access the database using the shell\u200b\n\nRun the following CLI command:\n\n`$ turso db shell findmeon`\n\n### 1c. Define and populate the database\u200b\n\nCopy and paste the following SQL statements into the shell to create tables,\nindexes, and sample data:\n\n```\n-- users table\ncreate   table  users (\n  id  integer   primary   key ,\n  email  varchar ( 255 )   not   null ,\n  full_name  varchar ( 100 )   not   null ,\n  username  varchar ( 50 )   not   null ,\n  created_at  integer   default   ( cast ( unixepoch ( )   as   int ) )\n) ;\n-- links table\ncreate   table  links (\n  id  integer   primary   key ,\n  user_id  integer   not   null ,\n  website  varchar ( 100 )   not   null ,\n  link  text   not   null ,\n  created_at  integer   default   ( cast ( unixepoch ( )   as   int ) ) ,\n   foreign   key ( user_id )   references  users ( id )\n) ;\n-- unique index for the email row\ncreate   unique   index  idx_users_email  on  users ( email ) ;\n-- unique index for the username row\ncreate   unique   index  idx_users_username  on  users ( username ) ;\n-- a multicolumn index for the user_id and link columns\ncreate   unique   index  idx_links_userid_link  on  links ( user_id ,  link ) ;\n-- create user: \"turso\"\ninsert   into  users ( id ,  email ,  full_name ,  username )   values ( 1 ,   \"no-reply@turso.tech\" ,   \"Turso\" ,   \"turso\" ) ;\n-- add some links to \"turso\"\ninsert   into  links ( user_id ,  website ,  link )   values ( 1 ,   \"Twitter\" ,   \"https://twitter.com/tursodatabase\" ) ,\n( 1 ,   \"Linkedin\" ,   \"https://www.linkedin.com/company/turso/\" ) ,\n( 1 ,   \"GitHub\" ,   \"https://github.com/chiselstrike/\" ) ;\n```\n\n### 1d. Quit the shell\u200b\n\nType the following at the shell prompt to terminate the shell:\n\n`.quit`\n\n## 2. Deploy the app to Netlify\u200b\n\n### 2a. Start a guided installation\u200b\n\nClick this button to start a guided deployment. It will automatically copy the[ app's source code ](https://github.com/turso-extended/app-find-me-on)into your personal GitHub and deploy it from there.\n\n[  ](https://app.netlify.com/start/deploy?repository=https://github.com/turso-extended/app-find-me-on)\n\nImage: [ Deploy to Netlify ](https://www.netlify.com/img/deploy/button.svg)\n\nnote\n\nIf you would prefer to fork and deploy the source repo and configure the\ndeployment manually, follow the[ manual installation instructions ](https://docs.turso.tech//tutorials/netlify-setup-guide/#manual-installation)at the end of\nthis page. The following instructions assume that you're using the above button\nto perform the deployment.\n\n### 2b. Connect your Netlify account to your GitHub account\u200b\n\nNetlify will prompt you to log in with your GitHub account:\n\nImage: [ Screenshot of connecting Netlify to GitHub ](https://docs.turso.tech/assets/images/01-connect-netlify-github-a86781074b066ba1824f4f4c5e1f8916.png)\n\nImage: [ Screenshot of connecting Netlify to GitHub ](https://docs.turso.tech/assets/images/01-connect-netlify-github-a86781074b066ba1824f4f4c5e1f8916.png)\n\n### 2c. Provide values for the project's environment variables\u200b\n\nThe app (FindMeOn) requires two environment variables to enable it to connect to\nthe database you created earlier: `VITE_TURSO_DB_URL` and `VITE_TURSO_DB_AUTH_TOKEN` . These values are required by the[ libSQL TypeScript\nclient SDK ](https://docs.turso.tech/reference/client-access/javascript-typescript-sdk)to initialize the client and connect to the Turso database.\n\nNetlify prompts you for those values on the page you see after logging in.\n\n#### Get the value for VITE_TURSO_DB_URL\u200b\n\n`VITE_TURSO_DB_URL`\n\nRun the following CLI command:\n\n`$ turso db show findmeon --url`\n\nIt outputs the URL for the database. Copy that string into the `VITE_TURSO_DB_URL` variable.\n\n#### Get the value for VITE_TURSO_DB_AUTH_TOKEN\u200b\n\n`VITE_TURSO_DB_AUTH_TOKEN`\n\nRun the following CLI command:\n\n`$ turso db tokens create findmeon`\n\nThis creates a long-lived authentication token that allows the libSQL client\nlibrary used by the app to connect to the database.\n\nCopy the string into the `VITE_TURSO_DB_AUTH_TOKEN` variable.\n\n#### Deploy the app\u200b\n\nClick the \"Save & Deploy\" button to finalize the project\u2019s deployment.\n\nImage: [ Screenshot of Netlify prompting for environment variables ](https://docs.turso.tech/assets/images/02-netlify-prompt-env-vars-ea2114c35e6702626a87c00305094423.png)\n\nImage: [ Screenshot of Netlify prompting for environment variables ](https://docs.turso.tech/assets/images/02-netlify-prompt-env-vars-ea2114c35e6702626a87c00305094423.png)\n\nThis will take you to the \"Site overview\" page on your Netlify dashboard which\ndisplays the deployment status of the project. Once deployment is complete, you\ncan verify that the app works.\n\nImage: [ Screenshot of Netlify deployment status ](https://docs.turso.tech/assets/images/03-netlify-deployment-status-805ab8ad1dc644a2ac9c5b31a5e6060d.png)\n\nImage: [ Screenshot of Netlify deployment status ](https://docs.turso.tech/assets/images/03-netlify-deployment-status-805ab8ad1dc644a2ac9c5b31a5e6060d.png)\n\n## 3. Verify the app works\u200b\n\nIn step 1, you created and populated the database with some sample data. You can\nuse the deployed app to view the sample data to verify that it's correctly\nconnected to Turso.\n\nUsing the deployment URL provided by Netlify, visit the path `/u/turso` under\nit. This page displays the user data from the `users` and `links` tables.\n\nImage: [ Screenshot of deployed app working ](https://docs.turso.tech/assets/images/04-verify-app-works-68e88a8c6c2ed6da264d217f55a1492a.png)\n\nImage: [ Screenshot of deployed app working ](https://docs.turso.tech/assets/images/04-verify-app-works-68e88a8c6c2ed6da264d217f55a1492a.png)\n\n## (Alternative) manual installation\u200b\n\nIf you want to deploy an app without the help of the \"Deploy to Netlify\" button\nin step 2, you can instead use the Netlify dashboard to manually specify your\nGitHub repo and configure its environment variables. The steps below walk you\nthrough this process using the same source repository.\n\n### 1. Fork the repo\u200b\n\nVisit the[ project on GitHub ](https://github.com/turso-extended/app-find-me-on)and fork the repository to your own personal\naccount.\n\n### 2. Import the project in the Netlify dashboard\u200b\n\nOpen your Netlify dashboard, add a new site, and import the existing project\nthat you just forked.\n\nImage: [ Screenshot of importing a project in Netlify ](https://docs.turso.tech/assets/images/05-netlify-import-project-f67068f2d3442d7d4a1708e097dd2c92.png)\n\nImage: [ Screenshot of importing a project in Netlify ](https://docs.turso.tech/assets/images/05-netlify-import-project-f67068f2d3442d7d4a1708e097dd2c92.png)\n\n### 3. Connect to a Git provider\u200b\n\nChoose GitHub from the list (if you forked the repo in step 1).\n\nImage: [ Screenshot of connecting a Git project in Netlify ](https://docs.turso.tech/assets/images/06-netlify-connect-git-provider-3e2edb2298f7455c01997012a5583634.png)\n\nImage: [ Screenshot of connecting a Git project in Netlify ](https://docs.turso.tech/assets/images/06-netlify-connect-git-provider-3e2edb2298f7455c01997012a5583634.png)\n\n### 4. Pick your project\u2019s repository\u200b\n\nNetlify provides a list of repositories in your account. Choose your fork from\nthe list.\n\nImage: [ Screenshot of picking a git project in Netlify ](https://docs.turso.tech/assets/images/07-netlify-pick-repository-647e258319efd908b678de9de92536c5.png)\n\nImage: [ Screenshot of picking a git project in Netlify ](https://docs.turso.tech/assets/images/07-netlify-pick-repository-647e258319efd908b678de9de92536c5.png)\n\n### 5. Configure site settings\u200b\n\nConfigure the site settings for your project, including the production branch,\nbuild command, publish and base directory. (For most frameworks, Netlify\nautomatically detects and sets this configuration.)\n\nImage: [ Screenshot of configuring site settings in Netlify ](https://docs.turso.tech/assets/images/08-netlify-site-settings-dca1ab7d2c10a4f5f3524ca23f50c015.png)\n\nImage: [ Screenshot of configuring site settings in Netlify ](https://docs.turso.tech/assets/images/08-netlify-site-settings-dca1ab7d2c10a4f5f3524ca23f50c015.png)\n\n### 6. Configure the app's environment variables\u200b\n\nThe app (FindMeOn) requires two environment variables to enable it to connect to\nthe database you created earlier: `VITE_TURSO_DB_URL` and `VITE_TURSO_DB_AUTH_TOKEN` . These values are required by the[ libSQL TypeScript\nclient SDK ](https://docs.turso.tech/reference/client-access/javascript-typescript-sdk)to initialize the client and connect to the Turso database.\n\nClick the \"Show advanced\" button on the site setting page.\n\n#### 6a. Create an environment variable for VITE_TURSO_DB_URL\u200b\n\n`VITE_TURSO_DB_URL`\n\nUse the \"New variable\" button to create a new environment variable called `VITE_TURSO_DB_URL` .\n\nImage: [ Screenshot of adding an environment variable in Netlify ](https://docs.turso.tech/assets/images/09-netlify-create-env-var-0f19753dcb92098405603c5e821e9d98.png)\n\nImage: [ Screenshot of adding an environment variable in Netlify ](https://docs.turso.tech/assets/images/09-netlify-create-env-var-0f19753dcb92098405603c5e821e9d98.png)\n\nRun the following CLI command:\n\n`$ turso db show findmeon --url`\n\nIt outputs the URL for the database. Copy that string into the `VITE_TURSO_DB_URL` variable.\n\n#### 6b. Create an environment variable for VITE_TURSO_DB_AUTH_TOKEN\u200b\n\n`VITE_TURSO_DB_AUTH_TOKEN`\n\nUse the \"New variable\" button to create a new environment variable called `VITE_TURSO_DB_AUTH_TOKEN` .\n\nRun the following CLI command:\n\n`$ turso db tokens create findmeon -e none`\n\nThis creates a long-lived authentication token that allows the libSQL client\nlibrary used by the app to connect to the database. The `-e` flag in this\ncommand is short for `--expiration` .\n\nCopy the string into the `VITE_TURSO_DB_AUTH_TOKEN` variable.\n\n### 7. Deploy the site\u200b\n\nImage: [ Screenshot of deploying a site in Netlify ](https://docs.turso.tech/assets/images/10-netlify-deploy-site-91862180358731faddb1674bfd3e3dd1.png)\n\nImage: [ Screenshot of deploying a site in Netlify ](https://docs.turso.tech/assets/images/10-netlify-deploy-site-91862180358731faddb1674bfd3e3dd1.png)\n\n### 8. Preview the site after deployment\u200b\n\nImage: [ Screenshot of opening a preview in Netlify ](https://docs.turso.tech/assets/images/11-netlify-open-preview-dd6691bca20ce00fe3e5a33335b353bd.png)\n\nImage: [ Screenshot of opening a preview in Netlify ](https://docs.turso.tech/assets/images/11-netlify-open-preview-dd6691bca20ce00fe3e5a33335b353bd.png)\n\n- [ Prerequisites ](https://docs.turso.tech//tutorials/netlify-setup-guide/#prerequisites)\n- [ 1. Set up the Turso database ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1-set-up-the-turso-database)\n    - [ 1a. Create a new database ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1a-create-a-new-database)\n- [ 2. Deploy the app to Netlify ](https://docs.turso.tech//tutorials/netlify-setup-guide/#2-deploy-the-app-to-netlify)\n    - [ 2a. Start a guided installation ](https://docs.turso.tech//tutorials/netlify-setup-guide/#2a-start-a-guided-installation)\n- [ 3. Verify the app works ](https://docs.turso.tech//tutorials/netlify-setup-guide/#3-verify-the-app-works)\n- [ (Alternative) manual installation ](https://docs.turso.tech//tutorials/netlify-setup-guide/#manual-installation)\n    - [ 1. Fork the repo ](https://docs.turso.tech//tutorials/netlify-setup-guide/#1-fork-the-repo)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/vercel-setup-guide": "# Vercel setup guide\n\nIn this setup guide, we are deploying a web application made in[ Nuxt ](https://nuxt.com)that\u2019s\nusing[ Turso ](https://turso.tech)as its database.\n\nThe project being deployed is available on this[ GitHub repo ](https://github.com/turso-extended/app-top-web-frameworks).\n\n## Prerequisites\u200b\n\n1. [ A Vercel account ](https://app.netlify.com/signup).\n2. The Turso CLI installed in your machine ([ installation instructions ](https://docs.turso.tech/reference/turso-cli#installation)).\n\n\n## 1. Set up the Turso database\u200b\n\n### 1a. Create a new database\u200b\n\nRun the following CLI command:\n\n`turso db create topwebframeworks`\n\n### 1b. Access the database using the shell.\u200b\n\nRun the following CLI command\n\n`turso db shell topwebframeworks`\n\n### 1c. Define and populate the database\u200b\n\nCopy and paste the following SQL statements to the shell to create tables,\nindexes, and seed the database with sample data.\n\n```\n-- create frameworks table\ncreate   table  frameworks  (\n    id  integer   primary   key ,\n    name  varchar   ( 50 )   not   null ,\n     language   varchar   ( 50 )   not   null ,\n    url  text   not   null ,\n    stars  integer   not   null\n) ;\n-- \"name\" column unique index\ncreate   unique   index  idx_frameworks_name  on  frameworks  ( name ) ;\n-- \"url\" column unique index\ncreate   unique   index  idx_frameworks_url  on  frameworks  ( url ) ;\n-- seed some data\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Vue.js\"   ,   \"JavaScript\" ,   \"<https://github.com/vuejs/vue>\" ,   203000 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"React\" ,   \"JavaScript\" ,   \"<https://github.com/facebook/react>\" ,   206000 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Angular\" ,   \"TypeScript\" ,   \"<https://github.com/angular/angular>\" ,   87400 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"ASP.NET Core\" ,   \"C#\" ,   \"<https://github.com/dotnet/aspnetcore>\" ,   31400 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Express\" ,   \"JavaScript\" ,   \"<https://github.com/expressjs/express>\" ,   60500 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Django\" ,   \"Python\" ,   \"<https://github.com/django/django>\" ,   69800 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Ruby on Rails\" ,   \"Ruby\" ,   \"<https://github.com/rails/rails>\" ,   52600 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Spring\" ,   \"Java\" ,   \"<https://github.com/spring-projects/spring-framework>\" ,   51400 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Laravel\" ,   \"PHP\" ,   \"<https://github.com/laravel/laravel>\" ,   73100 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Flask\" ,   \"Python\" ,   \"<https://github.com/pallets/flask>\" ,   62500 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Ruby\" ,   \"Ruby\" ,   \"<https://github.com/ruby/ruby>\" ,   41000 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Symfony\" ,   \"PHP\" ,   \"<https://github.com/symfony/symfony>\" ,   28200 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"CodeIgniter\" ,   \"PHP\" ,   \"<https://github.com/bcit-ci/CodeIgniter>\" ,   18200 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"CakePHP\" ,   \"PHP\" ,   \"<https://github.com/cakephp/cakephp>\" ,   8600 ) ;\ninsert   into  frameworks ( name ,   language ,  url ,  stars )   values ( \"Qwik\" ,   \"TypeScript\" ,   \"<https://github.com/BuilderIO/qwik>\" ,   16400 ) ;\n```\n\n### 1d. Quit the shell\u200b\n\nType the following at the shell prompt to terminate the shell:\n\n`. quit`\n\n## 2. Deploy the app to Vercel\u200b\n\n### 2a. Start a guided installation\u200b\n\nClick this button to start a guided deployment. It will copy the app\u2019s source\ncode into your GitHub and deploy it from there.\n\n[  ](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fturso-extended%2Fapp-top-web-frameworks&env=NUXT_TURSO_DB_URL,NUXT_TURSO_DB_AUTH_TOKEN)\n\nImage: [ Deploy with Vercel ](https://vercel.com/button)\n\nnote\n\nIf you would prefer to fork and deploy the source repo and configure the\ndeployment manually, follow the[ manual installation\ninstructions ](https://docs.turso.tech//tutorials/vercel-setup-guide/#alternative-manual-deployment)at the end of this page. The\nfollowing instructions assume that you're using the above button to perform the\ndeployment.\n\n### 2b: Create a copy of the GitHub repository\u200b\n\nVercel will create a copy of the GitHub repository containing the project\u2019s\nsource to your GitHub account to facilitate continuous integration.\n\nImage: [ Screenshot of creating a new GitHub repository on Vercel ](https://docs.turso.tech/assets/images/01-vercel-create-copy-of-repository-0e2ca2ad46838c776c6272f3c05ae382.png)\n\nImage: [ Screenshot of creating a new GitHub repository on Vercel ](https://docs.turso.tech/assets/images/01-vercel-create-copy-of-repository-0e2ca2ad46838c776c6272f3c05ae382.png)\n\nAfter filing up the project\u2019s name and selecting the Git scope, click create to\nproceed.\n\n### 2c: Provide the values for the project\u2019s environment variables\u200b\n\nThe app (Top Web Frameworks) requires two environment variables to facilitate\nthe connection to the database created earlier: `NUXT_TURSO_DB_URL` and `NUXT_TURSO_DB_AUTH_TOKEN` .\n\nThese values are required by the[ libSQL TypeScript client ](https://github.com/libsql/libsql-client-ts/)SDK to initialize\nthe client and connect to the Turso database.\n\nImage: [ Screenshot of required environment variables in Vercel ](https://docs.turso.tech/assets/images/02-vercel-environment-variables-values-ccc72dde20dca1be0f9de2b59c9fbafd.png)\n\nImage: [ Screenshot of required environment variables in Vercel ](https://docs.turso.tech/assets/images/02-vercel-environment-variables-values-ccc72dde20dca1be0f9de2b59c9fbafd.png)\n\nVercel prompts you for these variables after you complete the previous step.\n\n#### Get the value for NUXT_TURSO_DB_URL\u200b\n\n`NUXT_TURSO_DB_URL`\n\nRun the following CLI command:\n\n`turso db show topwebframeworks --url`\n\nIt outputs the URL for the database. Copy that string into the `NUXT_TURSO_DB_URL` variable.\n\n#### Get the value for NUXT_TURSO_DB_AUTH_TOKEN\u200b\n\n`NUXT_TURSO_DB_AUTH_TOKEN`\n\nRun the following CLI command:\n\n`turso db tokens create topwebframeworks`\n\nIt outputs a non-expiring authentication token that allows the libSQL client\nlibrary used by the app to connect to the database.\n\nCopy the resulting string into the `NUXT_TURSO_DB_AUTH_TOKEN` variable.\n\n#### Deploy the app.\u200b\n\nClick the \u201cDeploy\u201d button to finalise the project\u2019s deployment.\n\nWhen the project completes deploying, you\u2019ll be redirected to the project\ndeployment\u2019s congratulatory page seen below.\n\nImage: [ Screenshot of deployed app success page on Vercel ](https://docs.turso.tech/assets/images/03-verce-app-deployment-success-page-cab90558b104bda03e0981f0fc0b7799.png)\n\nImage: [ Screenshot of deployed app success page on Vercel ](https://docs.turso.tech/assets/images/03-verce-app-deployment-success-page-cab90558b104bda03e0981f0fc0b7799.png)\n\n## 3. Verify the app works\u200b\n\nIn step 1, you\u00a0 created and seeded the database with some data. You can view the\ndeployed app by clicking the project\u2019s screenshot at the end of step 2 to view\nthe seeded data and verify that the app is correctly connected to Turso.\n\nImage: [ Screenshot of the deployed app preview ](https://docs.turso.tech/assets/images/04-vercel-deployed-app-preview-0d3fc01309cb0b43df956be318a54715.png)\n\nImage: [ Screenshot of the deployed app preview ](https://docs.turso.tech/assets/images/04-vercel-deployed-app-preview-0d3fc01309cb0b43df956be318a54715.png)\n\nHere onwards, Vercel will automate continuous deployments whenever you push to\nthe created git repository\u2019s production branch unless this setting is manually\ndisabled.\n\n## (Alternative) manual deployment\u200b\n\nTo manually set up your project for deployment on Vercel, without the help of\nthe \u201cVercel deploy button\u201d in step 2, you can instead use the Vercel dashboard\nto manually pick your GitHub repo and configure its environment variables.\n\nThe following instructions will walk you through this process using the same\nsource repository.\n\n### 1. Fork the repo\u200b\n\nVisit[ the project on\nGitHub ](https://github.com/turso-extended/app-top-web-frameworks)and fork the\nrepository to your account.\n\n### 2. Add a new project on your Vercel dashboard\u200b\n\nOpen your Vercel dashboard, select \u201cAdd New\u201d, and pick \u201cProject\u201d.\n\nImage: [ Screenshot of adding a new project on the vercel dashboard ](https://docs.turso.tech/assets/images/05-vercel-add-new-project-37a2e60a507f3cd1c2bae0faff380124.png)\n\nImage: [ Screenshot of adding a new project on the vercel dashboard ](https://docs.turso.tech/assets/images/05-vercel-add-new-project-37a2e60a507f3cd1c2bae0faff380124.png)\n\n### 3. Authorise Vercel\u200b\n\nIf you\u2019ve not authorised Vercel on your GitHub account you\u2019ll be requested to\nprovide such access.\n\nImage: [ Screenshot of installing Vercel to a GitHub account ](https://docs.turso.tech/assets/images/06-vercel-authorising-vercel-1c26fe4321a8b30278df406760c187e3.png)\n\nImage: [ Screenshot of installing Vercel to a GitHub account ](https://docs.turso.tech/assets/images/06-vercel-authorising-vercel-1c26fe4321a8b30278df406760c187e3.png)\n\nLikewise, at the repository level.\n\nImage: [ Screenshot of authorising Vercel access to a GitHub repository ](https://docs.turso.tech/assets/images/07-vercel-authorise-at-repository-level-2ed65793217a35d4cb73b91fd3f25e76.png)\n\nImage: [ Screenshot of authorising Vercel access to a GitHub repository ](https://docs.turso.tech/assets/images/07-vercel-authorise-at-repository-level-2ed65793217a35d4cb73b91fd3f25e76.png)\n\n### 4. Pick your GitHub repository\u200b\n\nNext, pick the forked GitHub repository and import it.\n\nImage: [ Screenshot of importing a GitHub repository on the Vercel deployment ](https://docs.turso.tech/assets/images/08-vercel-import-github-repository-4289f43e18d22199c8b2c3fb71b3fe18.png)\n\nImage: [ Screenshot of importing a GitHub repository on the Vercel deployment ](https://docs.turso.tech/assets/images/08-vercel-import-github-repository-4289f43e18d22199c8b2c3fb71b3fe18.png)\n\n### 5. Configure the site settings\u200b\n\nSet the site settings for your project on Vercel, including the project\u2019s name,\nbuild, and output configurations. (For most frameworks, as is the case here,\nVercel auto-detects and populates the default configuration for the project.)\n\nImage: [ Screenshot of configuring site settings on Vercel ](https://docs.turso.tech/assets/images/09-vercel-configuring-site-settings-be7d340185090f4151cae6d3938b05a1.png)\n\nImage: [ Screenshot of configuring site settings on Vercel ](https://docs.turso.tech/assets/images/09-vercel-configuring-site-settings-be7d340185090f4151cae6d3938b05a1.png)\n\n### 6. Configure the app\u2019s environment variables\u200b\n\nThe app (Top Web Frameworks) requires two environment variables to facilitate\nthe connection to the database created earlier: `NUXT_TURSO_DB_URL` and `NUXT_TURSO_DB_AUTH_TOKEN` .\n\nExpand the \u201cEnvironment Variables\u201d section on the site settings page.\n\nThese values are required by the[ libSQL TypeScript client ](https://github.com/libsql/libsql-client-ts/)SDK to initialize\nthe client and connect to the Turso database.\n\n#### 6a. Create an environment variable for NUXT_TURSO_DB_URL\u200b\n\n`NUXT_TURSO_DB_URL`\n\nOn the available environment section fields, add `NUXT_TURSO_DB_URL` as a new\nenvironment key.\n\nRun the following CLI command:\n\n`turso db show topwebframeworks --url`\n\nIt outputs the URL for the database. Copy that string into the `NUXT_TURSO_DB_URL` variable, and click the \u201cAdd\u201d button.\n\n#### 6b. Create an environment variable for NUXT_TURSO_DB_AUTH_TOKEN\u200b\n\n`NUXT_TURSO_DB_AUTH_TOKEN`\n\nAdd `NUXT_TURSO_DB_AUTH_TOKEN` as a new environment key.\n\nRun the following CLI command:\n\n`turso db tokens create topwebframeworks -e none`\n\nIt outputs a non-expiring authentication token that allows the libSQL client\nlibrary used by the app to connect to the database. The `-e` flag in the command\nis the short for `--expiration` .\n\nCopy the resulting string into the `NUXT_TURSO_DB_AUTH_TOKEN` variable, and\nclick the \u201cAdd\u201d button.\n\nImage: [ Screenshot of configuring environment variables in Vercel manual deployment settings ](https://docs.turso.tech/assets/images/10-vercel-configuring-environment-variables-manual-setup-384ffa0357267498c5765a01aed37848.png)\n\nImage: [ Screenshot of configuring environment variables in Vercel manual deployment settings ](https://docs.turso.tech/assets/images/10-vercel-configuring-environment-variables-manual-setup-384ffa0357267498c5765a01aed37848.png)\n\n### 7. Deploy the site\u200b\n\nImage: [ Screenshot of deploying a configured Vercel deployment ](https://docs.turso.tech/assets/images/11-vercel-deploying-the-site-manual-setup-51f1c7eaccc89753df5898f4b730c1a1.png)\n\nImage: [ Screenshot of deploying a configured Vercel deployment ](https://docs.turso.tech/assets/images/11-vercel-deploying-the-site-manual-setup-51f1c7eaccc89753df5898f4b730c1a1.png)\n\nAfter the deployment is completed, you\u2019ll be directed to a congratulatory page\nlike the one below.\n\nImage: [ Screenshot of a Vercel manual deployment success page ](https://docs.turso.tech/assets/images/12-vercel-deployment-success-page-2-729eac3238d53595b4612ba484d82a0b.png)\n\nImage: [ Screenshot of a Vercel manual deployment success page ](https://docs.turso.tech/assets/images/12-vercel-deployment-success-page-2-729eac3238d53595b4612ba484d82a0b.png)\n\n### 8. Preview the site after deployment\u200b\n\nClick the site preview screenshot on the previous step to see the deployed site.\n\nImage: [ Screenshot of the deployed app preview ](https://docs.turso.tech/assets/images/04-vercel-deployed-app-preview-0d3fc01309cb0b43df956be318a54715.png)\n\nImage: [ Screenshot of the deployed app preview ](https://docs.turso.tech/assets/images/04-vercel-deployed-app-preview-0d3fc01309cb0b43df956be318a54715.png)\n\n- [ Prerequisites ](https://docs.turso.tech//tutorials/vercel-setup-guide/#prerequisites)\n- [ 1. Set up the Turso database ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1-set-up-the-turso-database)\n    - [ 1a. Create a new database ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1a-create-a-new-database)\n- [ 2. Deploy the app to Vercel ](https://docs.turso.tech//tutorials/vercel-setup-guide/#2-deploy-the-app-to-vercel)\n    - [ 2a. Start a guided installation ](https://docs.turso.tech//tutorials/vercel-setup-guide/#2a-start-a-guided-installation)\n- [ 3. Verify the app works ](https://docs.turso.tech//tutorials/vercel-setup-guide/#3-verify-the-app-works)\n- [ (Alternative) manual deployment ](https://docs.turso.tech//tutorials/vercel-setup-guide/#alternative-manual-deployment)\n    - [ 1. Fork the repo ](https://docs.turso.tech//tutorials/vercel-setup-guide/#1-fork-the-repo)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide": "# Fermyon Spin with Rust setup guide\n\nIn this setup guide, you will deploy a simple route component to Fermyon Spin\nthat queries a[ Turso ](https://turso.tech)database. The deployment is configured with variables\nwhose values are obtained from the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli).\n\n## Prerequisites\u200b\n\n- A[ Fermyon Cloud account ](https://cloud.fermyon.com/login)\n- The Turso CLI installed on your machine ([ installation instructions ](https://docs.turso.tech/reference/turso-cli#installation))\n- Rust toolchain installed[ using rustup ](https://www.rust-lang.org/tools/install)(Homebrew installation will not work)\n- Spin CLI installed\n- Familiarity with Spin is suggested ([ follow the Spin quickstart ](https://developer.fermyon.com/spin/quickstart))\n\n\nCheck that the turso CLI is installed:\n\n`$ turso --version`\n\nCheck that rust is installed using rustup:\n\n```\n$ rustup --version\nrustup 1.26.0 (5af9b9484 2023-04-05)\ninfo: This is the version for the rustup toolchain manager, not the rustc compiler.\ninfo: The currently active `rustc` version is `rustc 1.70.0 (90c541806 2023-05-31)`\n```\n\nYou must have the wasm32-wasi toolchain support installed:\n\n```\n$ rustup target add wasm32-wasi\n$ rustup target list | grep wasm32-wasi\nwasm32-wasi (installed)\n```\n\nCheck that the Spin CLI is installed:\n\n```\n$ spin --version\nspin 1.3.0 (9fb8256 2023-06-12)\n```\n\nMake sure you are already logged in to the CLI using `spin login` .\n\n## 1. Create a Turso database\u200b\n\nRun the following Turso CLI command to create a new database named \"turso-fermyon\":\n\n`$ turso db create turso-fermyon`\n\nThis tutorial does not cover populating or querying tables in the database.\nInstead, you will simply run a query that requires no tables.\n\n## 2. Deploy a new spin app using the Rust template\u200b\n\n### 2a. Create a new app using a template for Rust\u200b\n\nIn a shell, change to a directory where you want to create a project. The Spin\nCLI will create another directory under it.\n\nRun the following Spin CLI command to create a new project using a template:\n\n`$ spin new`\n\n1. Select the \"http-rust\" template.\n2. When prompted, give the new application the name \"turso-fermyon\".\n3. Take all the other defaults by pressing enter at each prompt.\n\n\n```\nPick a template to start your application with: http-rust (HTTP request handler using Rust)\nEnter a name for your new application: turso-fermyon\nDescription:\nHTTP base: /\nHTTP path: /...\n```\n\nSpin creates a new directory with the in the current directory with the same\nname that you gave the application.\n\nOpen `src/lib.rs` in a code editor. This contains minimal code to respond to an\nHTTP request at the route specified in `spin.toml` . It responds with the text\n\"Hello, Fermyon\".\n\n```\n#[http_component]\nfn   handle_turso_fermyon ( req :   Request )   ->   Result < Response >   {\n     println! ( \"{:?}\" ,  req . headers ( ) ) ;\n     Ok ( http :: Response :: builder ( )\n         . status ( 200 )\n         . header ( \"foo\" ,   \"bar\" )\n         . body ( Some ( \"Hello, Fermyon\" . into ( ) ) ) ? )\n}\n```\n\n### 2b. Build the template app\u200b\n\nBuild the template application as-is without any modifications to verify that\nit works.\n\n```\n$  cd  turso-fermyon\n$ spin build\n.. .\nFinished building all Spin components\n```\n\nThe build process creates a file `target/wasm32-wasi/release/turso_fermyon.wasm` . This file is referenced in the\nproject `spin.toml` as the component source to deploy.\n\n### 2c. Run the template app locally\u200b\n\nRun the template app:\n\n`$ spin up`\n\n```\nLogging component stdio to \".spin/logs/\"\nServing http://127.0.0.1:3000\nAvailable Routes:\n  turso-fermyon: http://127.0.0.1:3000 (wildcard)\n```\n\nThe output contains a local URL you can use to invoke the route. Copy the URL\nand use curl to access it:\n\n`$  curl  http://127.0.0.1:3000`\n\n`Hello, Fermyon`\n\nIt outputs the string \"Hello, Fermyon\".\n\nStop the local Spin server with ctrl-C.\n\n### 2c. Deploy the template app to Fermyon Cloud\u200b\n\nDeploy the template app:\n\n`$ spin deploy`\n\n```\nUploading turso-fermyon version 0.1.0+rb01010f5...\nDeploying...\nWaiting for application to become ready...... ready\nAvailable Routes:\n  turso-fermyon: https://turso-fermyon-[RANDOM-CHARS].fermyon.app (wildcard)\n```\n\nThe output contains a remote URL you can use to invoke the route. It has random\ncharacters that are unique to your deployment. Copy the URL and use curl to\naccess it:\n\n`$ curl https://turso-fermyon-[RANDOM-CHARS].fermyon.app`\n\n`Hello, Fermyon`\n\n## 3. Add the libSQL Rust SDK\u200b\n\nNow that you've verified that you can run and deploy the application, the next\nstep is to change the code add the libSQL client SDK for Rust used to query your\nTurso database.\n\nThe[ libsql-client crate ](https://crates.io/crates/libsql-client)requires the feature `spin_backend` at installation,\nand no default features. Run the following command:\n\n```\n$ cargo  add   \\\n    --git https://github.com/libsql/libsql-client-rs  \\\n    --no-default-features -F spin_backend\n```\n\nThis adds the following line to your `Cargo.toml` in the `[dependencies]` table:\n\n`libsql-client   =   {   git   =   \"https://github.com/libsql/libsql-client-rs\" ,   version   =   \"0.31.4\" ,   default-features   =   false ,   features   =   [ \"spin_backend\" ]   }`\n\nnote\n\nYou must install the client using the GitHub URL. The Spin SDK doesn't support\ninstallation of crates from crates.io as you would normally with a Rust program.\n\n### 3a. Add configuration for Turso in spin.toml\u200b\n\nYou can use[ Spin Application Variables and Secrets ](https://developer.fermyon.com/cloud/variables)to configure values in a\nSpin app.\n\nAdd the following lines to `spin.toml`  **above** the `[[component]]` table to define\ntwo variables whose values will be used later in code:\n\n```\n# The [variables] table must occur above the [[component]] table\n[ variables ]\nturso_url   =   {   default   =   \"libsql://your-turso-database.turso.io\"   }\nturso_auth_token   =   {   required   =   true ,   secret   =   true   }\n```\n\nnote\n\nAbove, `turso_auth_token` is defined as a secret variable that will eventually\ncontain a database auth token that you will create later. You should not share\nthis token with anyone you don't trust with full access to your database.\n\nAdd the following lines to `spin.toml`  **below** the `[[component]]` table to add\nthe variables to the component config:\n\n```\n# The [component.config] table must occur below the [[component]] table\n[ component.config ]\nturso_url   =   \"{{ turso_url }}\"\nturso_auth_token   =   \"{{ turso_auth_token }}\"\n```\n\nModify the value for `allowed_http_hosts` within the `[[component]]` table:\n\n```\n# The following line must be modified under the [[component]] table\nallowed_http_hosts   =   [ \"your-turso-database.turso.io\" ]\n```\n\nnote\n\nBy default, Spin does not allow any outgoing network connections. In order to\nquery your Turso database, `allowed_http_hosts` must contain the hostname of\nyour database in order for Spin to[ allow network access ](https://developer.fermyon.com/spin/writing-apps#granting-networking-permissions-to-components)to it.\n\nIn the above configurations, \"your-turso-database.turso.io\" must be replaced by\nyour Turso database hostname.\n\nRun the following Turso CLI command to get the libSQL URL for your database:\n\n`$ turso db show turso-fermyon --url`\n\nCopy the hostname part of the URL and paste it to the two places where you see\n\"your-turso-database.turso.io\" in `spin.toml` (both the `turso_url` variable and `allowed_http_hosts` ).\n\nnote\n\n- The `turso_url` variable must have the full URL of the database, including\n\"libsql://\".\n- The `allowed_http_hosts` array just requires the hostname part of the URL.\n\n\nThe entire spin.toml file will look something like this, with your database\nhostname substituted in the highlighted lines:\n\n```\nspin_manifest_version   =   \"1\"\nauthors   =   [ \"your-name <your-email>\" ]\ndescription   =   \"\"\nname   =   \"turso-fermyon\"\ntrigger   =   {   type   =   \"http\" ,   base   =   \"/\"   }\nversion   =   \"0.1.0\"\n[ variables ]\nturso_url   =   {   default   =   \"libsql://turso-fermyon-[your-github].turso.io\"   }\nturso_auth_token   =   {   required   =   true ,   secret   =   true   }\n[ [ component ] ]\nid   =   \"turso-fermyon\"\nsource   =   \"target/wasm32-wasi/release/turso_fermyon.wasm\"\nallowed_http_hosts   =   [ \"turso-fermyon-[your-github].turso.io\" ]\n[ component.trigger ]\nroute   =   \"/...\"\n[ component.build ]\ncommand   =   \"cargo build --target wasm32-wasi --release\"\nwatch   =   [ \"src/**/*.rs\" ,   \"Cargo.toml\" ]\n[ component.config ]\nturso_url   =   \"{{ turso_url }}\"\nturso_auth_token   =   \"{{ turso_auth_token }}\"\n```\n\n### 3b. Add code to create a client object and query Turso in src/lib.rs\u200b\n\n`src/lib.rs`\n\nOpen `src/lib.rs` , delete all of the template code, and replace it with the following:\n\n```\nuse   anyhow :: Result ;\n// Use the libsql_client module\nuse   libsql_client :: { Config ,   SyncClient } ;\nuse   spin_sdk :: {\n     http :: { Request ,   Response } ,\n    http_component ,  config ,\n} ;\n/// A simple Spin HTTP component.\n#[http_component]\nfn   handle_turso_fermyon ( _req :   Request )   ->   Result < Response >   {\n     // Get component configuration for the Turso database\n     let  turso_url  =   config :: get ( \"turso_url\" ) ? ;\n     let  turso_auth_token  =   config :: get ( \"turso_auth_token\" ) ? ;\n     // Create a SyncClient object for querying Turso\n     let  libsql_config  =   Config :: new ( turso_url . as_str ( ) ) ?\n         . with_auth_token ( turso_auth_token ) ;\n     let  libsql_client  =   SyncClient :: from_config ( libsql_config ) ? ;\n     // Make a query that returns a ResultSet with one row with one column containing a string\n     let  rs  =  libsql_client . execute ( \"select 'Hello, Turso'\" ) ? ;\n     let  message  =  rs . rows [ 0 ] . values [ 0 ] . to_string ( ) ;\n     Ok ( http :: Response :: builder ( )\n         . status ( 200 )\n         . body ( Some ( message . into ( ) ) ) ? )\n}\n```\n\nThe value of the `turso_auth_token` config variable will be specified when running\nand deploying the component.\n\nnote\n\nThis code uses a version of the client `SyncClient` that offers a fully\nsynchronous API. The libSQL Rust SDK also offers a client with an asynchronous\nAPI, but async functions are not yet supported by Spin.\n\nnote\n\nIn order to keep this code sample small, it does no error checking at all. You\nmay want to perform your own error checking wherever you see the `?` operator.\n\n## 4. Run the component locally with spin up\u200b\n\n`spin up`\n\nBefore running, you will need an auth token string for the `turso_auth_token` variable in the configuration and code you added in the prior step. Run the\nfollowing Turso CLI command to get a database auth token:\n\n`$ turso db tokens create turso-fermyon`\n\ncaution\n\nDo not share this token with anyone that you do not trust with full access to\nyour database.\n\nCopy the output and paste it into the following command to export a new shell\nenvironment variable:\n\n`$  export   SPIN_CONFIG_TURSO_AUTH_TOKEN = \"paste-your-token-here\"`\n\nnote\n\nSpin environment variables always start with `SPIN_CONFIG_` , and the remainder\nof the env var name must match the variable defined in `spin.toml` . In this\ncase, the shell environment variable `SPIN_CONFIG_TURSO_AUTH_TOKEN` contains the\nvalue for the `turso_auth_token` secret variable.\n\nBuild and run the component locally using the Spin CLI:\n\n`$ spin build  &&  spin up`\n\nThe Spin CLI outputs the local URL you can use to invoke the component. Copy the\nURL and paste it on the curl command line:\n\n`$  curl  http://127.0.0.1:3000`\n\n`Hello, Turso`\n\nIt outputs the message \"Hello, Turso\" generated by the select SQL statement in\nthe code.\n\nStop the local Spin server with ctrl-C.\n\n## 5. Deploy and run the component on Fermyon Cloud\u200b\n\nDeploy the updated component using the Spin CLI, specifying the value of the `turso_auth_token` value using the shell environment variable defined in the\nprior step:\n\n`$ spin deploy --variable  turso_auth_token = \" $SPIN_CONFIG_TURSO_AUTH_TOKEN \"`\n\nThe CLI outputs the same remote URL that you got previously in step 2. Copy the\nURL and use curl to access it:\n\n`$ curl https://turso-fermyon-[RANDOM-CHARS].fermyon.app`\n\n`Hello, Turso`\n\nCongratulations, you have deployed a Spin application to Fermyon Cloud that\nqueries Turso with the libSQL Rust SDK!\n\n## 6. More resources\u200b\n\nNow that you know how to deploy a Fermyon Spin application using Turso, use the\nfollowing resources to learn more about how Turso and the libSQL Rust SDK work.\n\n- [ Turso documentation ](https://docs.turso.tech)\n- [ Turso CLI reference ](https://docs.turso.tech/reference/turso-cli)\n- [ libSQL Rust SDK reference ](https://docs.turso.tech/reference/client-access/rust-sdk)\n- [ libsql-client crate ](https://crates.io/crates/libsql-client)\n\n\n- [ Prerequisites ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#prerequisites)\n- [ 1. Create a Turso database ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#1-create-a-turso-database)\n- [ 2. Deploy a new spin app using the Rust template ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#2-deploy-a-new-spin-app-using-the-rust-template)\n    - [ 2a. Create a new app using a template for Rust ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#2a-create-a-new-app-using-a-template-for-rust)\n- [ 3. Add the libSQL Rust SDK ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#3-add-the-libsql-rust-sdk)\n    - [ 3a. Add configuration for Turso in spin.toml ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#3a-add-configuration-for-turso-in-spintoml)\n- [ 4. Run the component locally with spin up ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#4-run-the-component-locally-with-spin-up)\n- [ 5. Deploy and run the component on Fermyon Cloud ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#5-deploy-and-run-the-component-on-fermyon-cloud)\n- [ 6. More resources ](https://docs.turso.tech//tutorials/fermyon-spin-rust-setup-guide/#6-more-resources)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab": "# Creating an e-commerce store with Remix, Turso, Drizzle, and Cloudflare Workers\n\nIn this tutorial, we are going to learn how to build an e-commerce store \u201cThe\nMugs Store\u201d using the titled stack and afterwards deploy it to Cloudflare\nworkers. The store builds upon the implementation that is listed on the[ Create a shopping cart using Qwik and Turso ](https://blog.turso.tech/create-a-shopping-cart-using-qwik-and-turso-b51994f6ab73), with the addition of user\nauthentication.\n\nWe are using the stack in question (Cloudflare Workers and Turso) to build The\n\"Mugs Store\" since it makes for a good combination for an e-commerce website\noffering low-latency for all visitors as Cloudflare workers places the compute\non the edge with a globally distributed network, and with Turso\u2019s database\nreplication, we get to place the site\u2019s data where our users are.\n\nThe complete source code to the project we will build in this tutorial can also\nbe[ found on GitHub ](https://github.com/turso-extended/app-the-mug-store)for reference.\n\n[ Remix ](https://github.com/turso-extended/app-the-mug-store)is a full stack web framework that lets you focus on the user interface\nand work back through web standards and deliver a fast, slick, and resilient\nuser experience.\n\n[ Turso ](https://turso.tech)is the distributed database based on[ libSQL ](https://github.com/libsql/libsql#readme), the open-contribution\nfork of SQLite.\n\n[ Drizzle ](https://orm.drizzle.team)is a TypeScript Object-Relational Mapping tool (ORM) with support for\nPostgreSQL, MySQL, and SQLite databases.\n\nThe tutorial has been broken down to the following steps for readability.\n\n## Setting up the project\u200b\n\nIn this step, you'll be walked through creating a new Remix project and setting\nup some essential parts of the e-commerce store user interface (UI).\n\n## Setting up Turso\u200b\n\nIn this step, you'll be guided through creating a Turso database, acquiring the\ndatabase credentials required by the[ libSQL client library ](https://github.com/libsql/libsql-client-ts), and adding them as\nthe Remix app's environment variables.\n\n## Configuring Drizzle\u200b\n\nIn this step, you'll be guided through configuring Drizzle as the Remix app's\nobject-relational mapping (ORM) tool.\n\n## Listing store items\u200b\n\nIn this step, you will be walked through implementing the store's product\nlisting and it's associated components.\n\n## User authentication\u200b\n\nIn this step, we'll see how user authentication can be set up to guard some\nparts of the store that should only be accessible to registered users.\n\n## Adding the shopping cart\u200b\n\nIn this step, we'll go through setting up the store's cart page, a mini cart\ncomponent that's accessible throughout the store, and implementing logic that\nwill help us manage the items within the cart.\n\n## Checking out and placing orders\u200b\n\nIn this step, we will take care of checking out customers that have added items\nto their carts and want to place orders.\n\n## Deploying the app to Cloudflare Workers\u200b\n\nIn the final step we will go through the deployment of the e-commerce store to\nCloudflare Workers.\n\n## More resources\u200b\n\n- [ Remix documentation ](https://remix.run/docs/en/1.18.1)\n- [ Cloudflare Workers documentation ](https://workers.cloudflare.com/)\n- [ Drizzle documentation ](https://orm.drizzle.team/)\n- [ Example apps and more on github.com/turso-extended ](https://github.com/turso-extended)\n\n\n- [ Setting up the project ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#setting-up-the-project)\n- [ Setting up Turso ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#setting-up-turso)\n- [ Configuring Drizzle ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#configuring-drizzle)\n- [ Listing store items ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#listing-store-items)\n- [ User authentication ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#user-authentication)\n- [ Adding the shopping cart ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#adding-the-shopping-cart)\n- [ Checking out and placing orders ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#checking-out-and-placing-orders)\n- [ Deploying the app to Cloudflare Workers ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#deploying-the-app-to-cloudflare-workers)\n- [ More resources ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/#more-resources)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/libsql-urls": "# libSQL database URLs\n\nThroughout this documentation, the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli), and the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access/),\nyou will notice examples of URLs that start with `libsql://` . These URLs are\nrecognized by libSQL and Turso tools with the following meaning.\n\n## Database endpoint identification\u200b\n\nA `libsql` URL identifies a libSQL logical database running[ libSQL server ](https://github.com/libsql/libsql#readme). A\nlogical database URL connects to an[ instance ](https://docs.turso.tech/concepts#instance)of the database (primary or\nreplica) with the lowest latency to the machine making the connection. You can\nget the URL for a logical database using `turso db list` and `turso db show` .\nLogical database URLs have the following format:\n\n`libsql://[DB-NAME]-[ORG-NAME].turso.io`\n\ninfo\n\nTurso depends on the hosting service Fly.io to determine the lowest latency\ninstance for a client connection. Typically, this will be the geographically\nclosest instance to the machine running the client, though that may not always\nbe the case. A client using a logical database URL might connect to different\ninstances over time depending on how Fly.io observes network latency.\n\n## Network protocol\u200b\n\nWhen provided with a libsql URL, libSQL client libraries are free to choose what\nthey consider to be the best (or only) available protocol that works in the\nruntime environment where they are running. libSQL server supports both\nWebSockets and HTTP. Some cloud and edge function providers might not support\nWebSockets, with HTTP being the only working choice.\n\nIt's possible that some SDK features might not be available depending on the\nchosen protocol. You should consult the SDK documentation for details. In the\nfuture, each SDK will expose a way to find out which protocol was chosen by the\nclient object.\n\nIn order to optimize the latency of your application, or use libSQL server\ninstances other than those managed by Turso, you might want to choose a\nprotocol. The protocol is selected using the scheme of the URL. libSQL clients\ngenerally support the following schemes: `http` , `https` , `ws` , `wss` . If you\nwant to specify the use HTTPS, you can replace the `libsql` scheme of the URL\nwith `https` . For example, a logical database URL that specifies `https` has the\nfollowing format:\n\n`https://[DB-NAME]-[ORG-NAME].turso.io`\n\ninfo\n\nTurso databases support only the secure `https` and `wss` schemes. `ws` and `http` are typically only used when developing against a libSQL server instance\nrunning locally that can't be configured with an SSL certificate.\n\nThe underlying data sent using WebSockets or HTTP is expressed as JSON.\nDocumentation for this protocol and the structure of its messages is\nforthcoming.\n\n### Latency optimization\u200b\n\nWebSockets tend to perform better when the client SDK can hold a socket open\nover time to handle multiple queries. However, HTTP tends to perform better for\na single query since it requires fewer round trips between client and server.\nYou should benchmark both options if there is any doubt which is better for your\nuse case.\n\n- [ Database endpoint identification ](https://docs.turso.tech//reference/libsql-urls/#database-endpoint-identification)\n- [ Network protocol ](https://docs.turso.tech//reference/libsql-urls/#network-protocol)\n    - [ Latency optimization ](https://docs.turso.tech//reference/libsql-urls/#latency-optimization)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/local-development": "# Local development\n\nA Turso database[ instance ](https://docs.turso.tech/concepts#instance)runs an open-source server called[ libSQL server ](https://github.com/libsql/libsql#readme).\nThis server:\n\n- Handles incoming client connections over HTTP and websockets\n- Offers a JSON-based wire protocol for clients\n- Connects the client to the embedded[ libSQL ](https://github.com/libsql/libsql)database engine (a fork of\nSQLite) to execute queries\n- Manages the underlying database data in a[ SQLite database\nfile ](https://docs.turso.tech//reference/local-development/#about-sqlite-database-files)\n\n\nTurso adds additional features and configurations on top of libSQL server:\n\n- DNS and secure sockets with SSL\n- Client authentication with database tokens provided by the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)\n- World-wide instance location support\n- Serverless instance scaling\n- Automatic replication between instances\n\n\nFor daily development, you might be satisfied with the core features provided by\nlibSQL server, without the additional features offered by Turso. You might also\nwant to avoid any costs incurred by working with server instances managed by\nTurso. For these cases, you have three supported options for building and\ntesting client code written with the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access):\n\n- [ Read and write local SQLite data files directly ](https://docs.turso.tech//reference/local-development/#use-local-sqlite-database-files)\n- [ Run libSQL server locally using the Turso CLI ](https://docs.turso.tech//reference/local-development/#run-libsql-server-using-the-turso-cli)\n- [ Build and run an instance of libSQL server locally ](https://docs.turso.tech//reference/local-development/#build-and-run-libsql-server-separately)\n\n\n## Use local SQLite database files\u200b\n\nIf you are building for an environment that offers read-write access to a local\nfilesystem, using a SQLite database file is the easiest option. Some development\nenvironments for serverless backends don't offer access to a filesystem, such as\nWrangler for Cloudflare Workers. Be sure to check the product documentation to\nfind out if you have local filesystem access for your environment.\n\nThe libSQL client libraries support the use of local[ SQLite database\nfiles ](https://docs.turso.tech//reference/local-development/#about-sqlite-database-files)to service queries without any intermediate\nservice. To configure a libSQL client to use a local file, you must provide a `file:` URL to the SDK when creating a client instance. This URL replaces the[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)you get from the Turso CLI for the purpose of local development.\n\nFor example, using the[ Python SDK ](https://docs.turso.tech/libsql/client-access/python-sdk):\n\n```\nimport  libsql_client\nclient  =  libsql_client . create_client_sync (\n    url = \"file:///path/to/file\"\n)\n```\n\nAnd using the[ JavaScript SDK ](https://docs.turso.tech/libsql/client-access/javascript-typescript-sdk):\n\n```\nimport   {  createClient  }   from   \"@libsql/client\" ;\nconst  client  =   createClient ( {\n     url :   \"file:///path/to/file\"\n} ) ;\n```\n\ninfo\n\nThe JavaScript SDK only supports file URLs when using the default `@libsql/client` import (not the alternate `web` or `http` imports designed for\nsome serverless backend environments). This works in Node.js-compatible\nenvironments that have access to the local filesystem.\n\nYou can also use relative file paths in the form `file:relative/path/to/file` .\n\nNote that no `authToken` is required when connecting to a file URL. You may\nprovide one, but it will have no effect on the client.\n\n## Run libSQL server using the Turso CLI\u200b\n\nThe Turso CLI can invoke libSQL server on your machine with the following\ncommand:\n\n`$ turso dev`\n\nIt provides a URL that you can use to connect the Turso CLI shell and client\ncode. Learn more about `turso dev` in the[ Turso CLI documentation ](https://docs.turso.tech/reference/turso-cli#use-libsql-server-locally).\n\n## Build and run libSQL server separately\u200b\n\nYou can build and run an instance of libSQL server on your local machine. There\nare multiple ways to do this, and they are covered in the[ documentation to\nbuild and run libSQL server ](https://github.com/libsql/sqld/blob/main/docs/BUILD-RUN.md).\n\n## Using a local libSQL server instead of Turso\u200b\n\nOnce you have a local libSQL server running, you can use an `http` or `ws` URL\nin place of your libsql URL to connect to it. For example, libSQL server runs by\ndefault on port 8080, so the URL for that is `ws://127.0.0.1:8080` . This URL\nreplaces the[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)you get from the Turso CLI for the purpose of local\ndevelopment.\n\nlibSQL server uses a dedicated directory to manage a[ SQLite database\nfile ](https://docs.turso.tech//reference/local-development/#about-sqlite-database-files)along with other metadata. By default, the\nfile lives in the relative path `data.sqld/data` where the server was started.\n\n## About SQLite database files\u200b\n\nSQLite has a documented file format for its database files. It's not necessary\nto understand this format, but you can use any tool that understands these files\nin order to work with them outside of your code. In particular, SQLite provides\na[ command line shell ](https://www.sqlite.org/cli.html)for this purpose. This shell can make it easier for you\nto create and populate a database for your local development without having to\nuse a client SDK.\n\nSQLite does not have very flexible[ support for multiple processes ](https://sqlite.org/faq.html#q5). If you want\nto write to a database file manged by libSQL server or some other running\nprocess, you should first stop that process in order to avoid `SQLITE_BUSY` errors.\n\n- [ Use local SQLite database files ](https://docs.turso.tech//reference/local-development/#use-local-sqlite-database-files)\n- [ Run libSQL server using the Turso CLI ](https://docs.turso.tech//reference/local-development/#run-libsql-server-using-the-turso-cli)\n- [ Build and run libSQL server separately ](https://docs.turso.tech//reference/local-development/#build-and-run-libsql-server-separately)\n- [ Using a local libSQL server instead of Turso ](https://docs.turso.tech//reference/local-development/#using-a-local-libsql-server-instead-of-turso)\n- [ About SQLite database files ](https://docs.turso.tech//reference/local-development/#about-sqlite-database-files)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/extensions": "# SQLite extensions\n\ncaution\n\nSQLite extensions are an experimental feature in Turso. Your observations and\nfeedback are welcome on our Discord.\n\nSQLite extensions add optional features, supported by the SQLite community, that\ncan be used in queries handled by the SQLite query engine. The instances of[ libSQL server ](https://github.com/libsql/libsql#readme)managed by Turso can be configured to enable a select few\nextensions.\n\n## Enabling extensions\u200b\n\nExtensions are enabled using the `--enable-extensions` flag when creating a\ndatabase with the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli). For example:\n\n`$ turso db create my-db --enable-extensions`\n\nExtensions can't be enabled for existing databases.\n\n## List of extensions\u200b\n\nThe following extensions are loaded into libSQL server for databases that have\nextensions enabled.\n\n| Extension | Purpose |\n|---|---|\n| [ SQLean Crypto ](https://github.com/nalgeon/sqlean/blob/main/docs/crypto.md) | Hashing, message digest, encoding, and decoding |\n| [ SQLean Fuzzy ](https://github.com/nalgeon/sqlean/blob/main/docs/fuzzy.md) | Fuzzy string matching and phonetics |\n| [ SQLean Math ](https://github.com/nalgeon/sqlean/blob/main/docs/math.md) | Advanced mathematical calculations |\n| [ SQLean Regexp ](https://github.com/nalgeon/sqlean/blob/main/docs/regexp.md) | Regular expressions |\n| [ SQLean Stats ](https://github.com/nalgeon/sqlean/blob/main/docs/stats.md) | Common statistical functions |\n| [ SQLean Text ](https://github.com/nalgeon/sqlean/blob/main/docs/text.md) | String manipulation (reverse, split) |\n| [ SQLean Unicode ](https://github.com/nalgeon/sqlean/blob/main/docs/unicode.md) | Case-insensitive string comparison for Unicode strings |\n| [ SQLean UUID ](https://github.com/nalgeon/sqlean/blob/main/docs/uuid.md) | Limited support for RFC 4122 compliant UUIDs |\n| [ Vector Similarity Search ](https://github.com/asg017/sqlite-vss) | Vector search capabilities based on[ Faiss ](https://faiss.ai/). |\n\n\nnote\n\nSQLite maintains three official extensions that are enabled by default in Turso:[ JSON ](https://www.sqlite.org/json1.html),[ FTS5 ](https://www.sqlite.org/fts5.html)(full text search), and[ R*Tree ](https://www.sqlite.org/rtree.html)(range queries).\n\n- [ Enabling extensions ](https://docs.turso.tech//reference/extensions/#enabling-extensions)\n- [ List of extensions ](https://docs.turso.tech//reference/extensions/#list-of-extensions)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/data-consistency": "# Data consistency\n\nTurso is built on top of[ libSQL ](https://github.com/libsql/libsql#readme), which is a fork of[ SQLite ](https://sqlite.org). SQLite, as an\nembedded database, offers a strictly serializable consistency model. However,\nlibSQL, as a network-accessible and replicated database provided by[ libSQL\nserver ](https://github.com/libsql/libsql#readme), can not offer such a strong guarantee.\n\n## Connections\u200b\n\nThere are two types of connections involved with libSQL server:\n\n- The HTTP or websocket connection a client makes to a server instance.\n- The underlying[ SQLite database connection ](https://www.sqlite.org/c3ref/open.html)established within the server.\n\n\nFor the purpose of this documentation, a SQLite database connection is referred\nto as a *process* , which issues an ordered sequence of queries with results.\nEach database operation exposed by libSQL server (execute a statement,[ batch ](https://docs.turso.tech/libsql/client-access#batches),\nor[ interactive transaction ](https://docs.turso.tech/libsql/client-access#interactive-transactions)) is executed within a dedicated process, isolated\nfrom all other processes running concurrently.\n\n## Read and write behavior\u200b\n\n### On the primary instance\u200b\n\nAll operations by processes connected to the[ primary ](https://docs.turso.tech/concepts#primary)are linearizable, forming\na ordered sequence of completed operations (a history).\n\n#### All writes are serialized\u200b\n\nAll write operations are fully serialized on the primary. When a transaction\nperforms a write operation, all other write operations must wait for the\ntransaction to complete in order to preserve this serialization.\n\ndanger\n\nTake care when using an[ interactive transaction ](https://docs.turso.tech/libsql/client-access#interactive-transactions)that perform a write\noperation. Since writes are fully serialized on the primary, a long-running or\nabandoned transaction will block all writes from other processes until libSQL\naborts the transaction after a 5 second timeout.\n\n### On the replicas\u200b\n\n#### Writes are forwarded to the primary\u200b\n\nAll writes from a process connected to a[ replica ](https://docs.turso.tech/concepts#replica)are automatically forwarded\nto the primary and applied there. Changes to the primary are eventually pulled\nfrom each replica and made available locally. A process is guaranteed to see all\nwrites that happened on the primary up until (at least) the last write performed\nby the process. There are no hard guarantees on how long it will take for a\nreplica to observe a change from the primary, considering network latency and\navailability, and total load on the primary.\n\n#### Reads are local and not globally ordered\u200b\n\nAll reads by a process come from the locally replicated database. Peer replicas\nare not necessarily all in sync with each other. Reads from different replicas\ncan yield different data until each replica receives the latest changes from the\nprimary. Furthermore, concurrent reads on a replica may observe snapshots of\ndata from different points in time.\n\n### Monotonic reads\u200b\n\nAll database instances offer monotonic reads. A read operation will never appear\nto yield data older than a prior read on the same instance.\n\n## Transactional consistency\u200b\n\nA transaction ([ batch ](https://docs.turso.tech/libsql/client-access#batches)or[ interactive transaction ](https://docs.turso.tech/libsql/client-access#interactive-transactions)) is equivalent to a[ SQLite\ntransaction ](https://www.sqlite.org/lang_transaction.html)and observes its semantics.\n\nDuring a transaction:\n\n- All reads operations are guaranteed snapshot isolation. A transactional read\nwill never yield changes from other processes.\n- All write operations performed by a process are immediately visible to itself\nin a subsequent read operation. The writes are isolated from all other ongoing\ntransactions. As such, libSQL transactions are considered serializable.\n\n\nAll reads operations are guaranteed snapshot isolation. A transactional read\nwill never yield changes from other processes.\n\nAll write operations performed by a process are immediately visible to itself\nin a subsequent read operation. The writes are isolated from all other ongoing\ntransactions. As such, libSQL transactions are considered serializable.\n\n- [ Connections ](https://docs.turso.tech//reference/data-consistency/#connections)\n- [ Read and write behavior ](https://docs.turso.tech//reference/data-consistency/#read-and-write-behavior)\n    - [ On the primary instance ](https://docs.turso.tech//reference/data-consistency/#on-the-primary-instance)\n\n- [ On the replicas ](https://docs.turso.tech//reference/data-consistency/#on-the-replicas)\n\n- [ Monotonic reads ](https://docs.turso.tech//reference/data-consistency/#monotonic-reads)\n- [ Transactional consistency ](https://docs.turso.tech//reference/data-consistency/#transactional-consistency)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/": "# Turso Platform REST API\n\nThe Turso Platform REST API is used to perform actions on data and databases\nmanaged by Turso. The following groups of operations are available:\n\n- [ Authentication ](https://docs.turso.tech/reference/platform-rest-api/auth/)\n- [ Manage organizations ](https://docs.turso.tech/reference/platform-rest-api/organization/)\n- [ Location discovery ](https://docs.turso.tech/reference/platform-rest-api/location/)\n- [ Manage logical databases ](https://docs.turso.tech/reference/platform-rest-api/database/)\n- [ Manage database instances ](https://docs.turso.tech/reference/platform-rest-api/instance/)\n- [ Manage database groups ](https://docs.turso.tech/reference/platform-rest-api/groups/)\n\n\nThe API is served using HTTPS from the host `api.turso.tech` .\n\nnote\n\nThis API is used directly by the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli). However, the API does not operate\nexactly like the interface provided CLI. Each operation includes a reference to\nthe analogous Turso CLI command, noting where there are significant differences\nin behavior.\n\n## Conventions\u200b\n\n### Request and response\u200b\n\nThe API accepts variable inputs from placeholders in the URL path, the query\nstring, and the HTTP body. HTTP request and response bodies are expressed as\nJSON objects unless otherwise specified.\n\nAPI errors yield an HTTP response body containing a JSON object with a string\nproperty named \"error\".\n\n### Universal HTTP response codes\u200b\n\n| Code | Meaning |\n|---|---|\n| 200 | OK - operation completed successfully |\n| 401 | Unauthorized - ensure that the[ auth token ](https://docs.turso.tech//reference/platform-rest-api/#authentication)is present and valid |\n| 402 | Payment required - organization feature is not part of account plan |\n| 409 | Conflict - resource already exists |\n\n\n## About the examples in this documentation\u200b\n\nThe examples use curl and assume the following shell variables were established\nahead of time:\n\n```\nexport   TURSO_BASE_URL = https://api.turso.tech\nexport   TURSO_TOKEN = [ your-auth-token ]\n```\n\nFor `TURSO_TOKEN` , read the section about[ authentication ](https://docs.turso.tech//reference/platform-rest-api/#authentication).\n\n## Authentication\u200b\n\nThe Turso Platform API requires that all requests include an authentication\ntoken that identifies a user account. Operations are performed on behalf of this\nuser using the permissions granted to that user.\n\nThe recommended way to authenticate with the platform API is using[ platform API\ntokens ](https://docs.turso.tech//reference/platform-rest-api/#platform-api-tokens). You can also authenticate with[ user tokens from\nthe Turso CLI ](https://docs.turso.tech//reference/platform-rest-api/#user-authentication-tokens).\n\nnote\n\nThe platform and user tokens mentioned above are different from the database\ntokens used to allow[ client application access ](https://docs.turso.tech/libsql/client-access)to the database for the purpose\nof performing database queries. They are not interchangeable.\n\n### Platform API tokens\u200b\n\nYou can mint a platform API token in two ways:\n\n- [ Using the Authentication API ](https://docs.turso.tech/reference/platform-rest-api/auth)\n- [ Using the Turso CLI ](https://docs.turso.tech/reference/turso-cli#platform-api-auth-tokens)( `turso auth api-tokens mint` )\n\n\n### User authentication tokens\u200b\n\nThe Turso Platform API also recognizes tokens granted to a user when they[ log\nin to the Turso CLI ](https://docs.turso.tech/reference/turso-cli#logging-in-to-the-cli)using `turso auth login` . After logging in, run `turso auth\ntoken` to output the token string. These tokens expire after seven days, so they\nare not suitable for use with non-interactive applications.\n\n### Provide a token to the API\u200b\n\nAll HTTP requests must include the token string in the `Authorization` header.\nThe header takes the following form:\n\n`Authorization: Bearer [token]`\n\n `[token]` is is a placeholder for either a platform or user token.\n\n- [ Conventions ](https://docs.turso.tech//reference/platform-rest-api/#conventions)\n    - [ Request and response ](https://docs.turso.tech//reference/platform-rest-api/#request-and-response)\n\n- [ Universal HTTP response codes ](https://docs.turso.tech//reference/platform-rest-api/#universal-http-response-codes)\n- [ About the examples in this documentation ](https://docs.turso.tech//reference/platform-rest-api/#about-the-examples-in-this-documentation)\n- [ Authentication ](https://docs.turso.tech//reference/platform-rest-api/#authentication)\n    - [ Platform API tokens ](https://docs.turso.tech//reference/platform-rest-api/#platform-api-tokens)\n\n- [ User authentication tokens ](https://docs.turso.tech//reference/platform-rest-api/#user-authentication-tokens)\n\n- [ Provide a token to the API ](https://docs.turso.tech//reference/platform-rest-api/#provide-a-token-to-the-api)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/postgres-integration": "# Integration with Postgres\n\nIf you have an existing Postgres database and want to replicate some portion of\nit to Turso, you can do that using the[ pg_turso ](https://github.com/turso-extended/pg_turso/)Postgres plugin. pg_turso\nallows you to configure specific tables and materialized views for replication.\n\ncaution\n\npg_turso is currently experimental and not yet ready for production use.\n\nTo work with pg_turso, you must:\n\n- Build the plugin from source.\n- Install the plugin using `CREATE EXTENSION`\n- Choose tables and materialized views to replicate\n- Choose a frequency at which updates are pushed to Turso\n- Invoke a provided function to begin scheduling\n\n\nData replicated to Turso must be considered read-only for database clients.\nWrites to Turso replicas are not reflected back into Postgres.\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api": "# Turso Platform REST API\n\nThe Turso Platform REST API is used to perform actions on data and databases\nmanaged by Turso. The following groups of operations are available:\n\n- [ Authentication ](https://docs.turso.tech/reference/platform-rest-api/auth/)\n- [ Manage organizations ](https://docs.turso.tech/reference/platform-rest-api/organization/)\n- [ Location discovery ](https://docs.turso.tech/reference/platform-rest-api/location/)\n- [ Manage logical databases ](https://docs.turso.tech/reference/platform-rest-api/database/)\n- [ Manage database instances ](https://docs.turso.tech/reference/platform-rest-api/instance/)\n- [ Manage database groups ](https://docs.turso.tech/reference/platform-rest-api/groups/)\n\n\nThe API is served using HTTPS from the host `api.turso.tech` .\n\nnote\n\nThis API is used directly by the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli). However, the API does not operate\nexactly like the interface provided CLI. Each operation includes a reference to\nthe analogous Turso CLI command, noting where there are significant differences\nin behavior.\n\n## Conventions\u200b\n\n### Request and response\u200b\n\nThe API accepts variable inputs from placeholders in the URL path, the query\nstring, and the HTTP body. HTTP request and response bodies are expressed as\nJSON objects unless otherwise specified.\n\nAPI errors yield an HTTP response body containing a JSON object with a string\nproperty named \"error\".\n\n### Universal HTTP response codes\u200b\n\n| Code | Meaning |\n|---|---|\n| 200 | OK - operation completed successfully |\n| 401 | Unauthorized - ensure that the[ auth token ](https://docs.turso.tech//reference/platform-rest-api/#authentication)is present and valid |\n| 402 | Payment required - organization feature is not part of account plan |\n| 409 | Conflict - resource already exists |\n\n\n## About the examples in this documentation\u200b\n\nThe examples use curl and assume the following shell variables were established\nahead of time:\n\n```\nexport   TURSO_BASE_URL = https://api.turso.tech\nexport   TURSO_TOKEN = [ your-auth-token ]\n```\n\nFor `TURSO_TOKEN` , read the section about[ authentication ](https://docs.turso.tech//reference/platform-rest-api/#authentication).\n\n## Authentication\u200b\n\nThe Turso Platform API requires that all requests include an authentication\ntoken that identifies a user account. Operations are performed on behalf of this\nuser using the permissions granted to that user.\n\nThe recommended way to authenticate with the platform API is using[ platform API\ntokens ](https://docs.turso.tech//reference/platform-rest-api/#platform-api-tokens). You can also authenticate with[ user tokens from\nthe Turso CLI ](https://docs.turso.tech//reference/platform-rest-api/#user-authentication-tokens).\n\nnote\n\nThe platform and user tokens mentioned above are different from the database\ntokens used to allow[ client application access ](https://docs.turso.tech/libsql/client-access)to the database for the purpose\nof performing database queries. They are not interchangeable.\n\n### Platform API tokens\u200b\n\nYou can mint a platform API token in two ways:\n\n- [ Using the Authentication API ](https://docs.turso.tech/reference/platform-rest-api/auth)\n- [ Using the Turso CLI ](https://docs.turso.tech/reference/turso-cli#platform-api-auth-tokens)( `turso auth api-tokens mint` )\n\n\n### User authentication tokens\u200b\n\nThe Turso Platform API also recognizes tokens granted to a user when they[ log\nin to the Turso CLI ](https://docs.turso.tech/reference/turso-cli#logging-in-to-the-cli)using `turso auth login` . After logging in, run `turso auth\ntoken` to output the token string. These tokens expire after seven days, so they\nare not suitable for use with non-interactive applications.\n\n### Provide a token to the API\u200b\n\nAll HTTP requests must include the token string in the `Authorization` header.\nThe header takes the following form:\n\n`Authorization: Bearer [token]`\n\n `[token]` is is a placeholder for either a platform or user token.\n\n- [ Conventions ](https://docs.turso.tech//reference/platform-rest-api/#conventions)\n    - [ Request and response ](https://docs.turso.tech//reference/platform-rest-api/#request-and-response)\n- [ About the examples in this documentation ](https://docs.turso.tech//reference/platform-rest-api/#about-the-examples-in-this-documentation)\n- [ Authentication ](https://docs.turso.tech//reference/platform-rest-api/#authentication)\n    - [ Platform API tokens ](https://docs.turso.tech//reference/platform-rest-api/#platform-api-tokens)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access/": "# Client SDKs\n\nlibSQL provides client SDKs that work for a variety of use cases:\n\n- [ Local access ](https://docs.turso.tech//libsql/client-access/#local-access)(in-memory, or using the same database file\nformat as SQLite)\n- [ Remote access ](https://docs.turso.tech//libsql/client-access/#remote-access)using a libSQL server instance (including\nTurso)\n- [ Hybrid access ](https://docs.turso.tech//libsql/client-access/#hybrid-access)using an embedded replica of data primarily hosted by libSQL\nserver\n\n\nSDKs are provided for the following languages:\n\n- [ JavaScript & TypeScript ](https://docs.turso.tech/libsql/client-access/javascript-typescript-sdk)\n- [ Rust ](https://docs.turso.tech/libsql/client-access/rust-sdk)\n- [ Python ](https://docs.turso.tech/libsql/client-access/python-sdk)\n- [ Go ](https://docs.turso.tech/libsql/client-access/go-sdk)\n\n\n## Access types\u200b\n\n### Local access\u200b\n\nWhen building an application that uses a local database, the client libraries\ncan act as a replacement for embedded SQLite (using the[ libSQL core library ](https://github.com/libsql/libsql)with native language bindings). The database can be in memory, or persisted to a\nfile using the same database file format as SQLite.\n\nTo use a libSQL client SDK for local database access, you must provide a `file:` URL with the path to the database file to use. The SDK attempts to create the\nfile if it doesn\u2019t exist.\n\n### Remote access\u200b\n\nWhen building an application that uses a remote libSQL server (including Turso),\nyou can use libSQL client libraries that communicate with the server over HTTP\nusing a custom protocol (\u201chrana\u201d). This is appropriate for code deployed to edge\nand serverless frameworks that act as an API gateway or middleware for a client\napplication.\n\nTo use a libSQL client SDK for remote database access, you must provide an `http:` , `https:` , or `libsql:` URL identifying the libSQL server to use.\n\n#### Turso databases\u200b\n\nFor databases hosted by Turso, you must provide a libsql URL and authentication\ntoken.  The URL for a database can be found using the Turso CLI:\n\n`$ turso db show  $DBNAME  --url`\n\nYou can generate a new[ database client authentication token ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)using the\nfollowing command:\n\n`$ turso db tokens create  $DBNAME`\n\n### Hybrid access (embedded replica)\u200b\n\ninfo\n\nHybrid access with embedded replicas is currently only supported for the\nJavaScript runtimes Node.js, Bun, and Deno with write access to a filesystem.\nSupport for hybrid access requires version 0.3.5 or later of the JavaScript SDK.\n\nThe libSQL client SDKs have the ability to maintain an embedded local copy of\nthe data hosted by a remote libSQL server for fast read access without requiring\nnetwork connectivity at the time of the query. Applications can request the\nlatest updates from the remote server by simply calling a method. libSQL then\nfigures out which changes on the remote server must be synchronized to the local\nreplica. When the host application performs a write operation, it\u2019s forwarded to\nthe remote libSQL server for execution, similar to the way that all writes to a\nlibSQL server replica are forwarded to the primary instance.\n\n## Client SDK capabilities\u200b\n\n### Batches\u200b\n\nWith the libSQL client library, a batch is one or more SQL statements executed\nin order in an implicit transaction. The transaction is controlled by the libSQL\nbackend. If all of the statements are successful, the transaction is committed.\nIf any of the statements fail, the entire transaction is rolled back and no\nchanges are made.\n\n### Interactive transactions\u200b\n\nInteractive transactions allow you to execute a series of read and write\nstatements in the context of a[ SQLite transaction ](https://www.sqlite.org/lang_transaction.html). Reads and writes are all\nconsistent within the scope of that transaction, unaffected by other client\nactivity. The transaction API requires you to choose when to commit or roll back\nthe transaction.\n\ndanger\n\nInteractive transactions effectively lock the entire database for writing when a\nwrite is first performed, and until the transaction is committed or rolled back.\nlibSQL aborts transactions after a 5 second timeout. Transactions may negatively\nimpact overall database performance when used on high latency connections or\nwith busy databases.\n\n### Embedded replicas\u200b\n\nIn order to use an embedded replica for hybrid access, the SDK must be\ninitialized with three values:\n\n- The URL of the remote database hosted by libSQL server\n- An authentication token for that database (required only by Turso)\n- The path to the local database file to be kept in sync with the remote\ndatabase. The local database file is fully compatible with SQLite.\n\n\ncaution\n\nYou should allow the libSQL SDK to create the local database files and perform\nwrite operations on them. Writes from other sources are not supported, and the\ndata might be lost upon the next sync with the remote database.\n\nWhen you provide a path to the local database file, two other files appear\nalongside it with the same name as the database file you provide with \"-shm\" and\n\"-wal\" suffixes. These files should be considered part of the local database. If\nyou need to relocate the embedded replica, these files should be moved along\nwith the main database file.\n\n- [ Access types ](https://docs.turso.tech//libsql/client-access/#access-types)\n    - [ Local access ](https://docs.turso.tech//libsql/client-access/#local-access)\n- [ Client SDK capabilities ](https://docs.turso.tech//libsql/client-access/#client-sdk-capabilities)\n    - [ Batches ](https://docs.turso.tech//libsql/client-access/#batches)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk": "# JavaScript & TypeScript SDK\n\nThe JavaScript SDK comes with TypeScript bindings and supports environments\nwhere either language can be used.  Both ESM and CJS modules are provided.\nExample on this page show TypeScript.\n\nThe following runtime environments are known to be compatible:\n\n- Node.js version 12 or later\n- Deno\n- CloudFlare Workers\n- Netlify Edge Functions\n\n\n## Installation\u200b\n\nAdd the `@libsql/client` package to your project using npm or a package manager\nof your choice:\n\n`$  npm   install  @libsql/client`\n\n## Initialization\u200b\n\n### Choose the correct import for your environment\u200b\n\nThere are two ways to import the client code. When running in a Node.js or\ncompatible environment, use the standard import:\n\n`import   {  createClient  }   from   \"@libsql/client\" ;`\n\nOr, when running in a JavaScript environment without Node.js APIs (for example,\nCloudflare Workers or browsers):\n\n`import   {  createClient  }   from   \"@libsql/client/web\" ;`\n\nThe `@libsql/client` import allows for local testing using SQLite database files\nusing the exact same API as libSQL remote databases.  You can switch between\nlocal files and a remote database easily by changing the URL used to initialize\nthe SDK. Use a `file:` URL to direct the SDK to a local SQLite database file.\n\nnote\n\nThe alternate `@libsql/client/web` import does not support local file URLs.\n\n### Create a database client object for local and remote access\u200b\n\nFor local and remote access, call the `createClient` factory function and invoke\nit with your database URL and[ database client authentication token ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)obtained using\nthe Turso CLI:\n\n```\nconst  client  =   createClient ( {\n    url :   \"libsql://your-database.turso.io\" ,\n    authToken :   \"your-auth-token\"\n} ) ;\n```\n\nThe `authToken` property is only required when using a remote database instance\nmanaged by Turso.\n\n### Create a database client object for hybrid access (embedded replica)\u200b\n\ninfo\n\nSupport for hybrid access with embedded replicas requires version 0.3.5 or later\nof the SDK.\n\nFor hybrid access using an embedded replica, call the `createClient` factory\nfunction and invoke it with your database URL,[ database client authentication\ntoken ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)obtained using the Turso CLI, and local database replica file:\n\n```\nconst  client  =   createClient ( {\n    url :   \"file:path/to/db-file\" ,\n    syncUrl :   \"libsql://your-database.turso.io\" ,\n    authToken :   \"your-auth-token\"\n} ) ;\n// Synchronize the embedded replica with the remote database\nawait  client . sync ( ) ;\n```\n\nFor additional information about how embedded replicas work with the SDKs\nprovided for all languages, see the[ common section on embedded replicas ](https://docs.turso.tech/libsql/client-access#embedded-replicas).\n\n### Client capability summary\u200b\n\nWith the returned libSQL Client object you can call:\n\n| Method | Description |\n|---|---|\n|  `execute()`  | [ Execute a single statement ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#execute-a-single-statement) |\n|  `batch()`  | [ Execute a batch of statements ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#execute-a-batch-of-statements) |\n|  `transaction()`  | Start an[ interactive transaction ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#interactive-transactions) |\n|  `sync()`  | Synchronize the embedded replica from the remote database (hybrid access only) |\n\n\n## Example data set\u200b\n\nAll of the examples in this section assume tables and data established by these\nstatements:\n\n```\ncreate   table  example_users  (\n    uid  text   primary   key ,\n    email  text\n) ;\ncreate   table  example_scores  (\n    uid  text ,\n     level   integer ,\n    score  integer ,\n     primary   key   ( uid ,   level )\n) ;\ninsert   into  example_users  values   ( 'uid1' ,   'foo@bar.com' ) ;\ninsert   into  example_users  values   ( 'uid2' ,   'baz@bar.com' ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   1 ,   100 ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   2 ,   95 ) ;\n```\n\n## Execute a single statement\u200b\n\nYou can execute a single statement with the `execute()` method of a Client\nobject. `execute()` returns a promise that becomes resolved with a[ ResultSet ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#resultset)object, or rejected with an error.\n\n### SQL string argument\u200b\n\nPass a single string to `execute()` to invoke a SQL statement in the SQLite\ndialect.\n\n```\ntry   {\n     const  rs  =   await  client . execute ( \"select * from example_users\" ) ;\n     // rs.columns == [ 'uid', 'email' ]\n     // rs.rows[0] == [ 'uid1', 'foo@bar.com' ]\n     // rs.rows[1] == [ 'uid2', 'baz@bar.com' ]\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\n### Positional placeholders\u200b\n\nlibSQL supports positional placeholders using the same syntax as SQLite.  Pass\nan object with `sql` and `args` properties to `execute()` . The `sql` property\nmust be a string containing placeholders, and the `args` property must be an\narray of values to bind to the placeholders.\n\n```\ntry   {\n     const  rs  =   await  client . execute ( {\n        sql :   \"select score from example_scores where uid = ? and level = ?\" ,\n        args :   [   \"uid1\" ,   2   ]\n     } ) ;\n     // rs.columns == [ 'score' ]\n     // rs.rows[0] == [ 95 ]\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\n### Named placeholders\u200b\n\nlibSQL supports named placeholders using the same syntax as SQLite. Pass an\nobject with `sql` and `args` properties to `execute()` . `sql` must be a string\ncontaining placeholders, and `args` must be an object whose properties match the\nnames of the placeholders, and whose values will be bound to the placeholders.\n\n```\ntry   {\n     const  rs  =   await  client . execute ( {\n        sql :   \"insert into example_scores values (:uid, :level, :score)\" ,\n        args :   {  uid :   \"uid2\" ,  level :   1 ,  score :   50   }\n     } ) ;\n     // rs.columns = []\n     // rs.rows = []\n     // rs.rowsAffected == 1\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\nIn the above example, there are placeholders for `uid` , `level` , and `score` using the prefix character `:` . The values of the matching properties of `args` are bound to each placeholder.\n\nlibSQL supports the same named placeholder prefix characters as SQLite: `:` , `@` , and `$` .\n\n## Batches and interactive transactions\u200b\n\nBatches and interactive transactions provide a way to execute multiple\nstatements atomically, internally using a[ SQLite transaction ](https://www.sqlite.org/lang_transaction.html). They both\nrequire a mode to be specified to indicate what sort of operations can be\nexecuted. The mode is specified as a string in the first argument of the call to `batch()` or `transaction()` .\n\n| Mode | SQLite command | Description |\n|---|---|---|\n|  `write`  |  `BEGIN IMMEDIATE`  | The transaction may execute statements that read and write data. Write transactions executed on a replica are forwarded to the primary instance, and can't operate in parallel. |\n|  `read`  |  `BEGIN TRANSACTION READONLY`  | The transaction may only execute statements that read data (select). Read transactions can occur on replicas, and can operate in parallel with other read transactions. |\n|  `deferred`  |  `BEGIN DEFERRED`  | The transaction starts in `read` mode, then changes to `write` as soon as a write statement is executed. *This mode change may fail if there is a write transaction currently executing on the primary.*  |\n\n\nIn general:\n\n- You should prefer to use a `read` batch or transaction when possible in order\nto achieve the best latency with replicas, since they don't require\ninteraction with the primary instance.\n- You should be prepared to handle random failures with `deferred` transactions\nwhen a change in mode is required. The probability of such an error becomes\nmore likely as the write load on the primary instance increases.\n\n\n### Execute a batch of statements\u200b\n\ninfo\n\nBe sure to read the[ common section on batches ](https://docs.turso.tech/libsql/client-access#batches)for libSQL clients to understand\ntheir behavior.\n\nTo execute multiple statements in a transaction, use the `batch()` method on the\nclient object, passing it a transaction mode and array of statements. The array\nmay contain any type of statement that is also accepted by[ execute() ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#execute-a-single-statement). `batch()` returns a promise that\nbecomes fulfilled with an array of[ ResultSet ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#resultset)objects (one for each\nstatement), or an error.\n\nThe following code uses a write batch to insert a row for uid3 in two different\ntables using a transaction that commits them both at the same time.\n\n```\ntry   {\n     const  rss  =   await  client . batch ( [\n         {\n            sql :   \"insert into example_users values (?, ?)\" ,\n            args :   [   \"uid3\" ,   \"uid3@turso.tech\"   ]\n         } ,\n         {\n            sql :   \"insert into example_scores values (?, ?, ?)\" ,\n            args :   [   \"uid3\" ,   1 ,   200   ]\n         }\n     ] ,   \"write\" ) ;\n     // rss[0].columns = []\n     // rss[0].rows = []\n     // rss[0].rowsAffected == 1\n     //\n     // rss[1].columns = []\n     // rss[1].rows = []\n     // rss[1].rowsAffected == 1\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\n### Interactive transactions\u200b\n\ninfo\n\nBe sure to read the[ common section on interactive transactions ](https://docs.turso.tech/libsql/client-access#interactive-transactions)for libSQL\nclients to understand their behavior.\n\nUse the `transaction()` method on the client object to start an interactive\ntransaction, passing it the mode of the transaction. The returned Transaction\nobject provides the following methods:\n\n| Method | Description |\n|---|---|\n|  `execute()`  | Similar to the normal client `execute()` , except within the context of the transaction |\n|  `commit()`  | Commits all the write statements in the transaction |\n|  `rollback()`  | Rolls back the entire transaction |\n|  `close()`  | Immediately stops the transaction - must be called if the transaction was not committed or rolled back in order to free resources |\n\n\nThe following code uses a write transaction to update a user\u2019s level score, but\nonly if it\u2019s greater than the one that currently exists:\n\n```\ntry   {\n     const  uid  =   \"uid1\" ;\n     const  level  =   1 ;\n     const  newScore  =   200 ;\n     const  transaction  =   await  client . transaction ( \"write\" ) ;\n     const  rs  =   await  transaction . execute ( {\n        sql :   \"select score from example_scores where uid = ? and level = ?\" ,\n        args :   [  uid ,  level  ]\n     } ) ;\n     // rs.columns == [ 'score' ]\n     // rs.rows[0]['score'] == 1000\n     const  oldScore  =  rs . rows [ 0 ] [ \"score\" ]   as   number ;\n     if   ( newScore  >  oldScore )   {\n         await  transaction . execute ( {\n            sql :   \"update example_scores set score = ? where uid = ? and level = ?\" ,\n            args :   [  newScore ,  uid ,  level  ]\n         } )\n     }\n     await  transaction . commit ( ) ;\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\n## ResultSet\u200b\n\nDatabase queries always yield a ResultSet object. This object has the following\nproperties:\n\n| Property | Type | Description |\n|---|---|---|\n|  `rows`  |  `Array<Row>`  | An array of Row objects containing the row values, empty for write operations |\n|  `columns`  |  `Array<string>`  | An array of strings with the names of the columns in the order they appear in each Row, empty for write operations |\n|  `rowsAffected`  |  `number`  | The number of rows affected by a write statement, 0 otherwise |\n|  `lastInsertRowid`  |  `bigint  |  undefined`  | The rowid of a newly inserted row, or undefined if there is none for the statement |\n\n\nA Row object contains the values of a row in a ResultSet. It can be indexed by\neither an integer column index or the name of the column. Each element of a Row\ncan have one of the following types, depending on the source of data:\n\n- `null`\n- `string`\n- `number`\n- `ArrayBuffer` (for blobs)\n\n\n```\nconst  rs  =   await  client . execute ( {\n    sql :   \"select level, score from example_scores where uid = ?\" ,\n    args :   [   \"uid1\"   ]\n} ) ;\nfor   ( const  row  of  rs . rows )   {\n     // Can index row by column number\n     const  level1  =  row [ 0 ]   as   number ;\n     const  score1  =  row [ 1 ]   as   number ;\n     // Can also index row by column name\n     const  level2  =  row [ \"level\" ]   as   number ;\n     const  score2  =  row [ \"score\" ]   as   number ;\n}\n```\n\ndanger\n\nWith TypeScript, casting row values without first checking their types might\nresult in errors at runtime. Check the type of any values before casting them\nunless you are absolutely certain of their type.\n\n- [ Installation ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#installation)\n- [ Initialization ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#initialization)\n    - [ Choose the correct import for your environment ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#choose-the-correct-import-for-your-environment)\n\n- [ Create a database client object for local and remote access ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#create-a-database-client-object-for-local-and-remote-access)\n\n- [ Create a database client object for hybrid access (embedded replica) ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#create-a-database-client-object-for-hybrid-access-embedded-replica)\n\n- [ Client capability summary ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#client-capability-summary)\n- [ Example data set ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#example-data-set)\n- [ Execute a single statement ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#execute-a-single-statement)\n    - [ SQL string argument ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#sql-string-argument)\n\n- [ Positional placeholders ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#positional-placeholders)\n\n- [ Named placeholders ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#named-placeholders)\n- [ Batches and interactive transactions ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#batches-and-interactive-transactions)\n    - [ Execute a batch of statements ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#execute-a-batch-of-statements)\n\n- [ Interactive transactions ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#interactive-transactions)\n- [ ResultSet ](https://docs.turso.tech//libsql/client-access/javascript-typescript-sdk/#resultset)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access/rust-sdk": "# Rust SDK\n\n## Installation\u200b\n\nAdd the[ libsql-client crate ](https://crates.io/crates/libsql-client)to your project using `cargo` :\n\n`$ cargo  add  libsql-client`\n\nFor CloudFlare Workers code that compiles to WASM, you must use a special\nconfiguration:\n\n`$ cargo  add  libsql-client --no-default-features -F workers_backend`\n\n## Initialization\u200b\n\nCall the `Client::from_config` function to create a new Client object:\n\n```\nlet  client  =   libsql_client :: Client :: from_config ( libsql_client :: Config   {\n    url :   url :: Url :: parse ( \"libsql://localhost:8080\" ) . unwrap ( ) ,\n    auth_token :   None ,\n} )\n. await\n. unwrap ( ) ;\n```\n\n## Example data set\u200b\n\nAll of the examples in this section assume tables and data established by these\nstatements:\n\n```\ncreate   table  example_users  (\n    uid  text   primary   key ,\n    email  text\n) ;\ncreate   table  example_scores  (\n    uid  text ,\n     level   integer ,\n    score  integer ,\n     primary   key   ( uid ,   level )\n) ;\ninsert   into  example_users  values   ( 'uid1' ,   'foo@bar.com' ) ;\ninsert   into  example_users  values   ( 'uid2' ,   'baz@bar.com' ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   1 ,   100 ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   2 ,   95 ) ;\n```\n\n## Execute a single statement\u200b\n\n### SQL string argument\u200b\n\n```\nlet  rs  =  client . execute ( \"select * from example_users\" ) . await ? ;\n// rs is a ResultSet object containing rows and columns\n```\n\n### Positional placeholders\u200b\n\nCreate a new Statement using `Statement::with_args` and use the `args` macro to\nspecify the values to bind to the placeholders.\n\n```\nuse   libsql_client :: { Statement ,  args } ;\nlet  rs  =  client\n     . execute ( Statement :: with_args (\n         \"select score from example_scores where uid = ? and level = ?\" ,\n         args! ( \"uid1\" ,   2 ) ,\n     ) )\n     . await ? ;\n// rs is a ResultSet object containing rows and columns\n```\n\n## Execute a batch of statements\u200b\n\ninfo\n\nBe sure to read the[ common section on batches ](https://docs.turso.tech/libsql/client-access#batches)for libSQL clients to understand\ntheir behavior.\n\n```\nuse   libsql_client :: { Statement ,  args } ;\nlet  rss  =  client\n     . batch ( [\n         Statement :: with_args (\n             \"insert into example_users values (?, ?)\" ,\n             args! ( \"uid3\" ,   \"uid3@turso.tech\" ) ,\n         ) ,\n         Statement :: with_args (\n             \"insert into example_scores values (?, ?, ?)\" ,\n             args! ( \"uid3\" ,   1 ,   200 ) ,\n         ) ,\n     ] )\n     . await ? ;\n// rss is a Vec<ResultSet> containing results from all the queries\n```\n\n## Interactive transactions\u200b\n\ninfo\n\nBe sure to read the[ common section on interactive transactions ](https://docs.turso.tech/libsql/client-access#interactive-transactions)for libSQL\nclients to understand their behavior.\n\nThe following code uses an interactive transaction to update a user\u2019s level\nscore, but only if it\u2019s greater than the one that currently exists:\n\n```\nuse   libsql_client :: { Statement ,  args } ;\nlet  uid  =   \"uid1\" ;\nlet  level  =   1 ;\nlet  new_score  =   200 ;\nlet  transaction  =  client . transaction ( ) . await ? ;\nlet  rs  =  transaction\n     . execute ( Statement :: with_args (\n         \"select score from example_scores where uid = ? and level = ?\" ,\n         args! ( uid ,  level ) ,\n     ) )\n     . await ? ;\nlet  old_score  =  rs . rows . first ( ) . map ( | row |   & row . values [ 0 ] ) ;\nlet  old_score  =   match  old_score  {\n     Some ( Value :: Integer   {  value :  i  } )   =>   * i ,\n    _  =>   0 ,\n} ;\nif  new_score  >  old_score  {\n    transaction\n         . execute ( Statement :: with_args (\n             \"update example_scores set score = ? where uid = ? and level = ?\" ,\n             args! ( new_score ,  uid ,  level ) ,\n         ) )\n         . await ? ;\n}\ntransaction . commit ( ) . await ? ;\n```\n\n## ResultSet\u200b\n\nA ResultSet struct contains values for the rows and columns returned by a query.\n\n```\npub   struct   ResultSet   {\n     pub  columns :   Vec < String > ,\n     pub  rows :   Vec < Row > ,\n     pub  rows_affected :   u64 ,\n     pub  last_insert_rowid :   Option < i64 > ,\n}\n```\n\nEach row is contained in a Row struct that provides the values of the row\navailable by column index.\n\n```\npub   struct   Row   {\n     pub  values :   Vec < Value > ,\n}\n```\n\nEach Value can be one of the types supported by SQLite:\n\n```\npub   enum   Value   {\n     Null ,\n     Integer   {\n        value :   i64 ,\n     } ,\n     Float   {\n        value :   f64 ,\n     } ,\n     Text   {\n        value :   String ,\n     } ,\n     Blob   {\n        value :   Vec < u8 > ,\n     } ,\n}\n```\n\nYour code will need to make an assumption or a decision about the type of each\nvalue found in a Row.  The following code examines the first Value in the first\nRow of a ResultSet and sets up a match for how to interpret it:\n\n```\nlet  row  =  rs . rows . first ( ) . expect ( \"one row\" ) ;\nlet  value  =   & row . values [ 0 ] ;\nmatch  value  {\n     Value :: Null   =>   todo! ( ) ,\n     Value :: Integer   {  value  }   =>   todo! ( ) ,\n     Value :: Float   {  value  }   =>   todo! ( ) ,\n     Value :: Text   {  value  }   =>   todo! ( ) ,\n     Value :: Blob   {  value  }   =>   todo! ( ) ,\n} ;\n```\n\nIf your code is expecting a Text type (containing a Rust `&String` ), then you\ncould express that assumption like this:\n\n```\nif   let   Value :: Text   {  value  }   =  value  {\n     println! ( \"Text value as &String: {value}\" ) ;\n}   else   {\n     return   Err ( \"Expected a Text value\" . into ( ) ) ;\n}\n```\n\n- [ Installation ](https://docs.turso.tech//libsql/client-access/rust-sdk/#installation)\n- [ Initialization ](https://docs.turso.tech//libsql/client-access/rust-sdk/#initialization)\n- [ Example data set ](https://docs.turso.tech//libsql/client-access/rust-sdk/#example-data-set)\n- [ Execute a single statement ](https://docs.turso.tech//libsql/client-access/rust-sdk/#execute-a-single-statement)\n    - [ SQL string argument ](https://docs.turso.tech//libsql/client-access/rust-sdk/#sql-string-argument)\n\n- [ Positional placeholders ](https://docs.turso.tech//libsql/client-access/rust-sdk/#positional-placeholders)\n- [ Execute a batch of statements ](https://docs.turso.tech//libsql/client-access/rust-sdk/#execute-a-batch-of-statements)\n- [ Interactive transactions ](https://docs.turso.tech//libsql/client-access/rust-sdk/#interactive-transactions)\n- [ ResultSet ](https://docs.turso.tech//libsql/client-access/rust-sdk/#resultset)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access/python-sdk": "# Python SDK\n\nThe Python SDK comes with APIs for both synchronous and asynchronous code.\n\n## Installation\u200b\n\nAdd the[ libsql-client module ](https://github.com/libsql/libsql-client-py/)to your project using `pip` :\n\n`$ pip  install  libsql-client`\n\n## Initialization\u200b\n\nImport the module using `libsql_client` :\n\n`import  libsql_client`\n\nIf you want to use the synchronous API, use the `create_client_sync` function:\n\n```\nclient  =  libsql_client . create_client_sync (\n    url = \"libsql://your-database.turso.io\"\n    auth_token = \"your-auth-token\"\n)\n```\n\nIf you want to use the asynchronous API, use the `create_client` function along\nwith `asyncio` and async/await syntax:\n\n```\nclient  =  libsql_client . create_client (\n    url = \"libsql://your-database.turso.io\"\n    auth_token = \"your-auth-token\"\n)\n```\n\nnote\n\nDo not use `await` with `create_client()` . Only the database operations require\nthat.\n\nThe `auth_token` parameter is only required when using a remote database\ninstance managed by Turso.\n\nIn either case, the returned object exposes an identical API, though they are\nare defined with different classes. The synchronous client is a thin wrapper\naround the asynchronous client.\n\nThe examples on this page use the synchronous API. The equivalent async code can\nbe easily derived from that by applying `async` and `await` .  For example, a\nsynchronous call to the client's `execute()` method takes this form:\n\n```\nwith  client :\n    result_set  =  client . execute ( \"...\" )\n     # Work with query results\n```\n\nWhile an asynchronous call takes this form:\n\n```\nasync   with  client :\n    result_set  =   await  client . execute ( \"...\" )\n     # Work with query results\n```\n\nIn both cases above, the `with` keyword is used to close the client after the\nwork is complete. If you want to work with the client object across functions,\nyou should call `close()` on it after you're done with the client to clean up\nthe resources it uses.\n\n## Example data set\u200b\n\nAll of the examples in this section assume tables and data established by these\nstatements:\n\n```\ncreate   table  example_users  (\n    uid  text   primary   key ,\n    email  text\n) ;\ncreate   table  example_scores  (\n    uid  text ,\n     level   integer ,\n    score  integer ,\n     primary   key   ( uid ,   level )\n) ;\ninsert   into  example_users  values   ( 'uid1' ,   'foo@bar.com' ) ;\ninsert   into  example_users  values   ( 'uid2' ,   'baz@bar.com' ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   1 ,   100 ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   2 ,   95 ) ;\n```\n\n## Execute a single statement\u200b\n\n### SQL string argument\u200b\n\nYou can execute a single statement with the `execute()` method of a Client\nobject. It returns a[ ResultSet ](https://docs.turso.tech//libsql/client-access/python-sdk/#resultset)object containing the results of\nthe query.\n\n```\nrs  =  client . execute ( \"select * from users\" )\n# rs.columns == ('uid', 'email')\n# rs.rows[0] == ('uid1', 'foo@bar.com')\n# rs.rows[1] == ('uid2', 'baz@bar.com')\n```\n\n### Positional placeholders\u200b\n\nlibSQL supports positional placeholders using the same syntax as SQLite. Pass\ntwo parameters, with the first ( `stmt` ) being the SQL string with placeholders,\nand the second ( `args` ) being a list of values to bind to the placeholders.\n\n```\nrs  =  client . execute (\n     \"select score from example_scores where uid = ? and level = ?\" ,\n     [   \"uid1\" ,   2   ]\n)\n# rs.columns == ('score',)\n# rs.rows[0] == (95,)\n```\n\n### Named placeholders\u200b\n\nlibSQL supports named placeholders using the same syntax as SQLite. Pass two\nparameters, with the first ( `stmt` ) must be the SQL string with placeholders,\nand the second ( `args` ) must be a dictionary whose keys match the names of the\nplaceholders, and whose values will be bound to the placeholders.\n\n```\nrs  =  client . execute (\n     \"insert into example_scores values (:uid, :level, :score)\" ,\n     {   \"uid\" :   \"uid2\" ,   \"level\" :   1 ,   \"score\" :   50   }\n)\n# rs.columns == ()\n# rs.rows == []\n# rs.rows_affected == 1\n```\n\nIn the above example, there are placeholders for `uid` , `level` , and `score` using the prefix character `:` . The values of the matching properties of `args` are bound to each placeholder.\n\nlibSQL supports the same named placeholder prefix characters as SQLite: `:` , `@` , and `$` .\n\n## Execute a batch of statements\u200b\n\ninfo\n\nBe sure to read the[ common section on batches ](https://docs.turso.tech/libsql/client-access#batches)for libSQL clients to understand\ntheir behavior.\n\nTo execute multiple statements in a transaction, use the `batch()` method on the\nclient object, passing it an list of statements. The list may contain any type\nof statement that is also accepted by[ execute() ](https://docs.turso.tech//libsql/client-access/python-sdk/#execute-a-single-statement). `batch()` returns a list of[ ResultSet ](https://docs.turso.tech//libsql/client-access/python-sdk/#resultset)objects (one for each statement).\n\nThe following code inserts a row for uid3 in two different tables using a\ntransaction that commits them both at the same time.\n\n```\nrss  =  client . batch ( [\n    libsql_client . Statement (\n         \"insert into example_users values (?, ?)\" ,\n         [   \"uid3\" ,   \"uid3@turso.tech\"   ]\n     ) ,\n    libsql_client . Statement (\n         \"insert into example_scores values (?, ?, ?)\" ,\n         [   \"uid3\" ,   1 ,   200   ]\n     ) ,\n] )\n# rss[0].columns == ()\n# rss[0].rows == []\n# rss[0].rows_affected == 1\n# rss[1].columns == ()\n# rss[1].rows == []\n# rss[1].rows_affected == 1\n```\n\n## Interactive transactions\u200b\n\ninfo\n\nBe sure to read the[ common section on interactive transactions ](https://docs.turso.tech/libsql/client-access#interactive-transactions)for libSQL\nclients to understand their behavior.\n\nUse the `transaction()` method on the client object to create a Transaction\nobject to issue read and write statements to be executed atomically. It provides\nthe following methods:\n\n| Method | Description |\n|---|---|\n|  `execute()`  | Similar to the normal client `execute()` , except within the context of the transaction |\n|  `commit()`  | Commits all the write statements in the transaction |\n|  `rollback()`  | Rolls back the entire transaction |\n|  `close()`  | Immediately stops the transaction; must be called if the transaction was not committed or rolled back in order to free resources. Use `with` on the transaction object to ensure this happens automatically. This is always synchronous even with the async API. |\n\n\nThe following code uses an interactive transaction to update a user\u2019s level\nscore, but only if it\u2019s greater than the one that currently exists:\n\n```\nuid  =   \"uid1\"\nlevel  =   1\nnew_score  =   200\nwith  client . transaction ( )   as  transaction :\n    rs  =  transaction . execute (\n         \"select score from example_scores where uid = ? and level = ?\" ,\n         [  uid ,  level  ]\n     )\n     # rs.columns == ('score',)\n     # rs.rows[0] == (200,)\n    old_score  =  rs . rows [ 0 ] [ \"score\" ]\n     if  new_score  >  old_score :\n        transaction . execute (\n             \"update example_scores set score = ? where uid = ? and level = ?\" ,\n             [  new_score ,  uid ,  level  ]\n         )\n    transaction . commit ( )\n```\n\n## ResultSet\u200b\n\nDatabase queries always yield a ResultSet object. This object has the following\nattribute:\n\n| Attribute | Type | Description |\n|---|---|---|\n|  `rows`  |  `List[Row]`  | A list of Row objects containing the row values, empty for write operations |\n|  `columns`  |  `Tuple[str, ...]`  | An tuple of strings with the names of the columns in the order they appear in each Row, empty for write operations |\n|  `rows_affected`  |  `int`  | The number of rows affected by a write statement, 0 otherwise |\n|  `last_insert_rowid`  |  `Optional[int]`  | The rowid of a newly inserted row, if there was one |\n\n\nA ResultSet can also be used as a Sequence of Row objects. The following are all\nvalid on a ResultSet `rs` :\n\n- `rs[0]` to get the first row\n- `len(rs)` to get the number of rows\n- `for row in rs` to iterate the rows\n\n\nA Row object is a[ Sequence ](https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range)that contains the values of a row in a ResultSet.\nIt can be indexed by either an integer column index or the name of the column.\nEach element of a Row can have one of the following types, depending on the\nsource of data:\n\n- `None` (for SQL NULL)\n- `str`\n- `int`\n- `float`\n- `bytes` (for blobs)\n\n\n```\nrs  =  client . execute (\n     \"select level, score from example_scores where uid = ?\" ,\n     [   \"uid1\"   ]\n)\nfor  row  in  rs . rows :\n     # Can index row by column number\n    level1  =  row [ 0 ]\n    score1  =  row [ 1 ]\n     # Can also index row by column name\n    level2  =  row [ \"level\" ]\n    score2  =  row [ \"score\" ]\n```\n\n- [ Installation ](https://docs.turso.tech//libsql/client-access/python-sdk/#installation)\n- [ Initialization ](https://docs.turso.tech//libsql/client-access/python-sdk/#initialization)\n- [ Example data set ](https://docs.turso.tech//libsql/client-access/python-sdk/#example-data-set)\n- [ Execute a single statement ](https://docs.turso.tech//libsql/client-access/python-sdk/#execute-a-single-statement)\n    - [ SQL string argument ](https://docs.turso.tech//libsql/client-access/python-sdk/#sql-string-argument)\n\n- [ Positional placeholders ](https://docs.turso.tech//libsql/client-access/python-sdk/#positional-placeholders)\n\n- [ Named placeholders ](https://docs.turso.tech//libsql/client-access/python-sdk/#named-placeholders)\n- [ Execute a batch of statements ](https://docs.turso.tech//libsql/client-access/python-sdk/#execute-a-batch-of-statements)\n- [ Interactive transactions ](https://docs.turso.tech//libsql/client-access/python-sdk/#interactive-transactions)\n- [ ResultSet ](https://docs.turso.tech//libsql/client-access/python-sdk/#resultset)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access/go-sdk": "# Go SDK\n\nThe Go SDK is implemented as a driver for the standard Go[ database/sql\npackage ](https://pkg.go.dev/database/sql). You can read more about how to install it and open a connection to\nyour Turso database using the documentation in the[ README on GitHub ](https://github.com/libsql/libsql-client-go/#readme). Note that\nyou must provide a[ client authentication token ](https://docs.turso.tech/reference/turso-cli#authentication-tokens-for-client-access)in the query string of the URL\nyou receive from the Turso CLI.\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/server/setup": "# Setup guide\n\n## Obtain a libSQL server binary\u200b\n\nThis guide assumes that you have a libSQL server binary to work with. Read the[ libSQL server BUILD-RUN doc ](https://github.com/libsql/sqld/blob/main/docs/BUILD-RUN.md)on GitHub to discover your options for building or\ndownloading libSQL server.\n\nThe examples in this guide assume that the libSQL server binary `sqld` is in\nyour shell PATH, but that is not a requirement to use it effectively.\n\n## Required libSQL server configurations\u200b\n\nlibSQL server operates with three required configurations, each with a default:\n\n- Mode (standalone, primary, or replica)Default: standalone\n- Network address for HTTP clients (IP address and port)Default: IP address 127.0.0.1 port 8080\n- Database directory path on a writable filesystemDefault: \"data.sqld\" in the current directory\n\n\nNetwork access for HTTP clients is configured with the command line flag `--http-listen-addr [addr]` , where `addr` is specified using IP address and port\nformatted as `IP:PORT` .\n\nThe database directory path is configured with the command line flag `--db-path [path/to/dir]` .\n\nMode is discussed further in the sections below.\n\n## Running libSQL server\u200b\n\n### Run a libSQL server instance in standalone mode\u200b\n\nRunning the `sqld` executable with no arguments starts libSQL server with the\ndefault configurations. To provide those defaults explicitly on the command\nline:\n\n```\nsqld  \\\n    --http-listen-addr  127.0 .0.1:8080  \\\n    --db-path data.sqld\n```\n\nSee the section[ Querying libSQL server ](https://docs.turso.tech//libsql/server/setup/#querying-libsql-server)below for\noptions to query the running server using the URL for HTTP clients.\n\n### Run multiple libSQL server instances with replication\u200b\n\nnote\n\nThis section shows how to run separate primary and replica server instances on\nthe same local machine. This requires the configuration of different ports and\ndatabase directories for both instances. In a production environment, where each\ninstance would normally be deployed to different machines, this is not\nnecessary.\n\nThe examples in the remainder of this page assume the following shell variables\nhave been established, with configurations for both a primary and replica\ninstance:\n\n```\nexport   SQLD_PRIMARY_HTTP_ADDR = 127.0 .0.1:8080\nexport   SQLD_PRIMARY_GRPC_ADDR = 127.0 .0.1:5000\nexport   SQLD_PRIMARY_DB_PATH = primary.sqld\nexport   SQLD_REPLICA1_HTTP_ADDR = 127.0 .0.1:8081\nexport   SQLD_REPLICA1_DB_PATH = replica1.sqld\n```\n\nnote\n\nOnly the primary instance must listen on a network address (the \u201cGRPC\u201d address), and the replicas must connect to it. This guide refers to these socket connections between primary and replica as \u201cGRPC replication channels\u201d.\n\nTo start the primary instance, use the `--grpc-listen-addr` command line flag to specify the network address  for the replica channel:\n\n```\nsqld  \\\n  --http-listen-addr  $SQLD_PRIMARY_HTTP_ADDR   \\\n  --grpc-listen-addr  $SQLD_PRIMARY_GRPC_ADDR   \\\n  --db-path  $SQLD_PRIMARY_DB_PATH\n```\n\nTo start the replica instance on the same machine, use the `--primary-grpc-url` command line flag to indicate the replication channel to the primary (specified\nusing an HTTP URL):\n\n```\nsqld  \\\n  --http-listen-addr  $SQLD_REPLICA1_HTTP_ADDR   \\\n  --primary-grpc-url http:// $SQLD_PRIMARY_GRPC_ADDR   \\\n  --db-path  $SQLD_REPLICA1_DB_PATH\n```\n\nYou can[ query ](https://docs.turso.tech//libsql/server/setup/#querying-libsql-server)each instance separately using its\nclient URL. Read-only queries are serviced by each instance.  Queries that write\ndata on a replica get forwarded to the primary before getting replicated back to\nall replicas. Assuming fast network speeds, clients on each instance always\nshould see the same tables and data.\n\n### Secure the GRPC replication channel using TLS\u200b\n\nBy default, the replication channels between primary and replica instances are\nnot secure. In an environment where security between instances is required, you\ncan configure the channels to use TLS.\n\nnote\n\nThe examples here use temporary certificates for development purposes only. In a production environment, you should use certificates signed in a way that suits your needs.\n\nYou can create certificates for development using the provided Python script. To\nuse it, run the following shell commands:\n\n```\n$ pip  install  cryptography\n$ python gen_certs.py\n```\n\nThe output of the script indicates the files created for the certificate authority, client, and server in the current directory:\n\n```\nstored cert 'ca' into 'ca_cert.pem'\nstored private key 'ca' into 'ca_key.pem'\nstored cert 'server' into 'server_cert.pem'\nstored private key 'server' into 'server_key.pem'\nstored cert 'client' into 'client_cert.pem'\nstored private key 'client' into 'client_key.pem'\n```\n\nNote the expiration date on the certificates in the output.\n\nWith these files, you can start the primary instance with additional flags to add TLS to the GRPC replication channel:\n\n```\nsqld  \\\n  --http-listen-addr  $SQLD_PRIMARY_HTTP_ADDR   \\\n  --grpc-listen-addr  $SQLD_PRIMARY_GRPC_ADDR   \\\n  --db-path  $SQLD_PRIMARY_DB_PATH   \\\n  --grpc-tls  \\\n  --grpc-ca-cert-file ca_cert.pem  \\\n  --grpc-cert-file server_cert.pem  \\\n  --grpc-key-file server_key.pem\n```\n\nAnd start a replica instance similarly:\n\n```\nsqld  \\\n  --http-listen-addr  $SQLD_REPLICA1_HTTP_ADDR   \\\n  --primary-grpc-url http:// $SQLD_PRIMARY_GRPC_ADDR   \\\n  --db-path  $SQLD_REPLICA1_DB_PATH   \\\n  --primary-grpc-tls  \\\n  --primary-grpc-ca-cert-file ca_cert.pem  \\\n  --primary-grpc-cert-file client_cert.pem  \\\n  --primary-grpc-key-file client_key.pem\n```\n\n### Querying libSQL server\u200b\n\nOnce you have a running instance, you can query it using the following tools:\n\n- [ The Turso CLI ](https://docs.turso.tech/reference/turso-cli)\n- [ The libSQL client SDKs ](https://docs.turso.tech/libsql/client-access)\n\n\nYou can use the Turso CLI to start a shell that queries an instance running\nlocally on the default IP address and port using a URL:\n\n`turso db shell http://127.0.0.1:8080`\n\nYou can use the JavaScript client library to query it from your code by\nproviding it the URL:\n\n```\nconst  client  =   createClient ( {\n    url :   \"http://127.0.0.1:8080\"\n} )\n// Now use client.execute() and other APIs to query libSQL server\n```\n\nThe client libraries for other languages have similar means of providing the\nURL.\n\n- [ Obtain a libSQL server binary ](https://docs.turso.tech//libsql/server/setup/#obtain-a-libsql-server-binary)\n- [ Required libSQL server configurations ](https://docs.turso.tech//libsql/server/setup/#required-libsql-server-configurations)\n- [ Running libSQL server ](https://docs.turso.tech//libsql/server/setup/#running-libsql-server)\n    - [ Run a libSQL server instance in standalone mode ](https://docs.turso.tech//libsql/server/setup/#run-a-libsql-server-instance-in-standalone-mode)\n\n- [ Run multiple libSQL server instances with replication ](https://docs.turso.tech//libsql/server/setup/#run-multiple-libsql-server-instances-with-replication)\n\n- [ Secure the GRPC replication channel using TLS ](https://docs.turso.tech//libsql/server/setup/#secure-the-grpc-replication-channel-using-tls)\n\n- [ Querying libSQL server ](https://docs.turso.tech//libsql/server/setup/#querying-libsql-server)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#manage-placement-groups-and-logical-databases/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#inspect-database-usage": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#inspect-database-usage/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#authentication-tokens-for-client-access/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/step-01-installation": "# Step 1: Installation\n\n## macOS instructions\u200b\n\nTo install the Turso CLI on macOS, we recommend that you use Homebrew:\n\n`brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\nIf you don't use Homebrew, you can use the following command to execute a shell script that installs the CLI:\n\n`curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\n## Linux instructions\u200b\n\nRun the following command to execute a shell script that installs the CLI:\n\n`curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\n## Windows instructions\u200b\n\nInstalling the Turso CLI on Windows requires that you have[ WSL installed ](https://learn.microsoft.com/en-us/windows/wsl/install). You run the scripted install within a WSL shell.\nFor example, run the following command in PowerShell to start a WSL shell:\n\n`wsl`\n\nYou can then use the following command to execute a shell script that installs the CLI:\n\n`curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\n## Verify the installation\u200b\n\ninfo\n\nIf you used the scripted installer, the CLI is installed in a directory called `.turso` in your home directory. The\nshell script will attempt to add that to your shell\u2019s PATH. You will need to\nstart a new shell to see the change, or add it manually to the current shell by\nrunning the `source` command printed by the installer.\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`turso --version`\n\nYou will need Turso CLI version 0.85.0 or later for this tutorial.\n\n- [ macOS instructions ](https://docs.turso.tech//tutorials/get-started-turso-cli/step-01-installation/#macos-instructions)\n- [ Linux instructions ](https://docs.turso.tech//tutorials/get-started-turso-cli/step-01-installation/#linux-instructions)\n- [ Windows instructions ](https://docs.turso.tech//tutorials/get-started-turso-cli/step-01-installation/#windows-instructions)\n- [ Verify the installation ](https://docs.turso.tech//tutorials/get-started-turso-cli/step-01-installation/#verify-the-installation)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/step-02-sign-up": "# Step 2: Sign up for Turso\n\nA GitHub account is required to sign up using the Turso CLI. Start the process\nwith the following command:\n\n`turso auth signup`\n\nThe CLI launches your default browser and asks to log in with GitHub. The first\ntime you log in, you are asked to grant the GitHub Turso app some permissions to\nyour account. Accept this in order to continue. (If desired, you can revoke\nthose permissions later in the GitHub settings for your account.)\n\nAfter the login process completes, the CLI receives a token that identifies you,\nand stores it in a local file.  On macOS, the file is located in `$HOME/Library/Application Support/turso` . On Linux, it\u2019s `$HOME/.config/turso` .\nSome things to note about this token:\n\n- Do not share this token with anyone you don\u2019t trust fully, as they can use it\nto work with Turso on your behalf.\n- The token is passed along with all backend API requests made by the CLI while\nlogged in.\n- You can print it using the command `turso auth token` .\n- It expires after 7 days. After that, you must log in again with `turso auth\nlogin` .\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/step-03-create-database": "# Step 3: Create a logical database\n\nWhen creating a logical database, Turso requires a[ location ](https://docs.turso.tech/concepts#location)for the[ primary ](https://docs.turso.tech/concepts#primary)instance. By default, it will select a default location based on your physical\nlocation as suggested by your IP address.  To see all locations supported by\nTurso, run the following command:\n\n`turso db locations`\n\nYour default location appears highlighted in the list.\n\nTo create a database using the default location with the name `my-db` :\n\n`turso db create my-db`\n\nIt takes a few moments to create the database, then generates output similar to\nthe following (with replacements for the parts that may vary):\n\n```\nCreated group default at [your location] in 9 seconds.\nCreated database my-db at group default in 6 seconds.\nStart an interactive SQL shell with:\n   turso db shell my-db\nTo see information about the database, including a connection URL, run:\n   turso db show my-db\nTo get an authentication token for the database, run:\n   turso db tokens create my-db\n```\n\nnote\n\nYou can override the default location using the `--location` flag.\n\nnote\n\nYou'll see that Turso created both a \"group\" and a \"database\" for you. All\ndatabases exist within a container called a \"placement group\". It's not\nimportant to understand right now, but we'll come back to that later.\n\nAs suggested by the output, you can view information about the database using:\n\n`turso db show my-db`\n\nThe output looks similar to the following:\n\n```\nName:           my-db\nURL:            libsql://my-db-[my-github-name].turso.io\nID:             [UUID]\nGroup:          default\nVersion:        [version]\nLocations:      [location]\nSize:           8.2 kB\nDatabase Instances:\nNAME     TYPE        LOCATION\n[loc]    primary     [loc]\n```\n\nNote the following in the above output:\n\n- [ Database URLs ](https://docs.turso.tech/reference/libsql-urls)use a custom `libsql` scheme, and are composed using a\ncombination of the name of the database and your GitHub ID.\n- The URL is the[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)that you provide to[ libSQL client\nlibraries ](https://docs.turso.tech/libsql/client-access)to query the database. This URL automatically forwards the client\nto the[ instance ](https://docs.turso.tech/concepts#instance)with the lowest latency.\n- The[ primary ](https://docs.turso.tech/concepts#primary)instance has a random name that was assigned by the CLI.\n\n\nTo see a list of all logical databases associated with the account that's\ncurrently logged in:\n\n`turso db list`\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/step-04-make-queries-with-shell": "# Step 4: Make queries with the shell\n\nThe output of `turso db create` in the last step shows a command to run to start\nan interactive shell:\n\n`turso db shell my-db`\n\n```\nConnected to my-db at libsql://my-db-[my-github-name].turso.io\nWelcome to Turso SQL shell!\nType \".quit\" to exit the shell and \".help\" to list all available commands.\n\u2192\n```\n\nSee that the shell is working with a simple \"hello world\" SQL statement:\n\n```\n\u2192  select \"hello world\" as message;\nMESSAGE\nhello world\n```\n\nnote\n\nThe shell requires that SQL commands terminate with a semicolon. If you enter a\nstring that does not, the shell will continue accepting lines of SQL input until\na terminating semicolon is provided.\n\nnote\n\nTurso is backed by libSQL, which is a fork of SQLite, so you must provide SQL\ncommands in the SQLite dialect.\n\nCreate and populate a table, and view its contents by copying the following SQL\nstatements into the shell:\n\n```\n\u2192  create table users (id text, email text);\n\u2192  insert into users values (\"001\", \"test@foo.com\");\n\u2192  select * from users;\nID   EMAIL\n001  test@foo.com\n```\n\nRun `.help` to see a list of shell commands. You can see the commands `.tables` and `.schema` and use them to inspect the structure of the database:\n\n```\n\u2192  .tables\nusers\n\u2192  .schema\nCREATE TABLE users (id text, email text)\n```\n\n `.quit` or CTRL-d ends the shell.\n\n`\u2192  .quit`\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/step-05-replicate-database-another-location": "# Step 5: Replicate the database to another location\n\nnote\n\nIn step 3, you created a database in a[ placement group ](https://docs.turso.tech/concepts#placement-group)named \"default\" with a\nprimary[ location ](https://docs.turso.tech/concepts#location)near you. The placement group defines the set of locations\nwhere the database is replicated. When you create additional databases in this\ngroup it will also exist in the same set of locations, all hosted by the same\nhardware at those locations.\n\n## Replicate a database by adding a location to its placement group\u200b\n\nYou can add and remove replica locations easily with the Turso CLI. Adding a\nlocation to a placement group automatically replicates all of the databases in\nthat group to the new location. Adding replica locations reduces latency for\ndatabase queries that originate in places near those locations. This is why\nTurso is referred to as an \"edge\" database - you can better serve users who are\ngeographically distributed by placing copies of data closer to them.\n\nAdd a new location in Tokyo, Japan (nrt) to your \"default\" group with the\nfollowing command:\n\n`turso group locations  add  default nrt`\n\n## Understand billing for placement groups\u200b\n\nAdding a location to a placement group incurs the cost of one location for the\npurpose of billing. On the free starter plan, you have an allowance of three\nlocations to use for creating multiple placement groups or adding replica\nlocations to a group. Right now, your \"default\" placement group costs two\nlocations: one for the primary location near you, and one for the replica\nlocation in Tokyo.\n\nIf you add a new logical database to this placement group, it will **not** incur\nthe cost of another location for billing. All of the databases in a placement\ngroup are hosted together on the same hardware. On the free starter plan, you have an allowance of 500 logical databases.\n\n## Viewing replica information\u200b\n\nYou can see the list of locations for the \"default\" placement group:\n\n`turso group locations list default`\n\nYou can also see the list of locations for a specific logical database using the `show` command you used earlier:\n\n`turso db show my-db`\n\n```\nName:           my-db\nURL:            libsql://my-db-[my-github-name].turso.io\nID:             [UUID]\nGroup:          default\nVersion:        [version]\nLocations:      [location], nrt\nSize:           8.2 kB\nDatabase Instances:\nNAME     TYPE        LOCATION\n[loc]    primary     [loc]\nnrt      replica     nrt\n```\n\n- [ Replicate a database by adding a location to its placement group ](https://docs.turso.tech//tutorials/get-started-turso-cli/step-05-replicate-database-another-location/#replicate-a-database-by-adding-a-location-to-its-placement-group)\n- [ Understand billing for placement groups ](https://docs.turso.tech//tutorials/get-started-turso-cli/step-05-replicate-database-another-location/#understand-billing-for-placement-groups)\n- [ Viewing replica information ](https://docs.turso.tech//tutorials/get-started-turso-cli/step-05-replicate-database-another-location/#viewing-replica-information)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/step-06-inspect-database-usage": "# Step 6: Inspect database usage\n\nNew Turso accounts, are automatically subscribed to the free Starter plan, which\nhas limits to its monthly usage. Run the following command to see your account's\ncurrent usage among all of its databases as it relates to your plan limits:\n\n`turso plan show`\n\nYou can see per-database usage with the following command:\n\n`turso db inspect my-db`\n\nThe output looks similar to the following:\n\n```\nTotal space used: 40 KiB\nNumber of rows read: 13\nNumber of rows written: 1\n```\n\nAdd the `--verbose` flag to the command to see a detailed breakdown of usage per\ntable, index, and[ location ](https://docs.turso.tech/concepts#location).\n\nnote\n\nInternally, Turso uses the[ SQLite dbstat virtual table ](https://www.sqlite.org/dbstat.html)to calculate usage\namong all user-defined tables and indexes.\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/step-07-destroy-logical-database": "# Step 7: Destroy the logical database\n\nThe CLI can destroy the entire[ logical database ](https://docs.turso.tech/concepts#logical-database), including the[ primary ](https://docs.turso.tech/concepts#primary)and\nall of its[ replicas ](https://docs.turso.tech/concepts#replica)with the following command:\n\n`turso db destroy my-db`\n\nThis is a very dangerous command since it deletes all data in the database and\ncannot be reversed. The CLI will interactively prompt you to ask if it\u2019s OK to\ndo so:\n\n```\nDatabase my-db, and all its data will be destroyed.\nAre you sure you want to do this? [y/n]:\n```\n\nType \u201cy\u201d + return to continue destroying the database.\n\nNotes about destroying logical databases:\n\n- There is no recovery from a destroyed logical database.\n- You can bypass the interactive prompt for use with automated scripts using the `--yes` flag.\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/step-08-log-out": "# Step 8: Log out of the CLI\n\nTo log out, use the following command:\n\n`turso auth  logout`\n\nThis removes the persisted authentication token you received from the last\ninvocation of `turso auth signup` or `turso auth login` . To continue working\nwith any databases you created previously, run `turso auth login` using the same\nGitHub account.\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review": "# Turso CLI in review\n\nCongratulations, you\u2019ve finished the Turso CLI tutorial! You should now be able\nto effectively use most of the functionality provided by the CLI.\n\n## Commands you learned\u200b\n\n### turso auth signup\u200b\n\n`turso auth signup`\n\nThis starts the signup process that allows the CLI to work with Turso databases.\n\n### turso auth login\u200b\n\n`turso auth login`\n\nThis starts the authentication process, similar to `turso auth signup` . Since\nthe authentication token you receive expires after 7 days, you must run this\nperiodically to continue working with your databases.\n\n### turso db locations\u200b\n\n`turso db locations`\n\nThis lists all supported[ locations ](https://docs.turso.tech/concepts#location), highlighting your current default location.\n\n### turso db create\u200b\n\n`turso db create`\n\nThis creates a new[ logical database ](https://docs.turso.tech/concepts#logical-database)in a placement group. A default placement\ngroup is created if one doesn't yet exist.\n\n### turso db show\u200b\n\n`turso db show`\n\nThis shows details for a specific logical database, including its URL and all of\nthe instances in all locations.\n\n### turso db list\u200b\n\n`turso db list`\n\nThis lists all of the logical databases associated with the account that\u2019s\ncurrently logged in.\n\n### turso db shell\u200b\n\n`turso db shell`\n\nThis starts an interactive shell to issue SQL statements against your database.\nBy default it uses the primary, and you can also point it to a replica using its\nURL.\n\n### turso group locations add\u200b\n\n`turso group locations add`\n\nThis adds a new location to a placement group, replicating all of the databases\nin that group to that location.\n\n### turso db inspect\u200b\n\n`turso db inspect`\n\nThis shows current database usage for billing purposes.\n\n### turso db destroy\u200b\n\n`turso db destroy`\n\nThis destroys a specific replica by name, or all replicas in a named location,\nor the entire database.\n\n### turso auth logout\u200b\n\n`turso auth logout`\n\nThis removes the authentication token previously provided by `turso auth login` ,\nrequiring you to log in again to continue working with your databases.\n\n### Built-in help\u200b\n\nThe CLI has help available.  The following command summarizes the top-level\ncommands available:\n\n`turso  help`\n\nFor each specific command, you can add the `--help` flag to get details on all\nthe sub-commands and flags. For example:\n\n```\nturso db --help\nturso db create --help\n```\n\n### Reference documentation\u200b\n\nTo learn about additional the functionality of the CLI, consult its[ reference\ndocumentation ](https://docs.turso.tech/reference/turso-cli).\n\n- [ Commands you learned ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#commands-you-learned)\n    - [ turso auth signup ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-auth-signup)\n\n- [ turso auth login ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-auth-login)\n\n- [ turso db locations ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-db-locations)\n\n- [ turso db create ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-db-create)\n\n- [ turso db show ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-db-show)\n\n- [ turso db list ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-db-list)\n\n- [ turso db shell ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-db-shell)\n\n- [ turso group locations add ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-group-locations-add)\n\n- [ turso db inspect ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-db-inspect)\n\n- [ turso db destroy ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-db-destroy)\n\n- [ turso auth logout ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#turso-auth-logout)\n\n- [ Built-in help ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#built-in-help)\n\n- [ Reference documentation ](https://docs.turso.tech//tutorials/get-started-turso-cli/turso-cli-review/#reference-documentation)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#database-client-authentication-tokens/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#installation": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#installation/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#installation/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#installation/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#installation/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#installation/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#installation/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#installation/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#installation/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#installation/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#installation/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#installation/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#installation/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#installation/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#installation/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#installation/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#installation/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#installation/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#installation/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#installation/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#installation/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#installation/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#installation/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#installation/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#installation/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#installation/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#installation/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#installation/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#installation/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#installation/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#installation/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#installation/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#installation/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#installation/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#installation/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#installation/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#installation/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#installation/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#installation/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#installation/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#installation/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#installation/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#installation/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#installation/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#installation/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#installation/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#installation/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#installation/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#installation/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#installation/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#installation/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/client-access/javascript-typescript-sdk": "# JavaScript & TypeScript SDK\n\nThe JavaScript SDK comes with TypeScript bindings and supports environments\nwhere either language can be used.  Both ESM and CJS modules are provided.\nExample on this page show TypeScript.\n\nThe following runtime environments are known to be compatible:\n\n- Node.js version 12 or later\n- Deno\n- CloudFlare Workers\n- Netlify Edge Functions\n\n\n## Installation\u200b\n\nAdd the `@libsql/client` package to your project using npm or a package manager\nof your choice:\n\n`$  npm   install  @libsql/client`\n\n## Initialization\u200b\n\n### Choose the correct import for your environment\u200b\n\nThere are two ways to import the client code. When running in a Node.js or\ncompatible environment, use the standard import:\n\n`import   {  createClient  }   from   \"@libsql/client\" ;`\n\nOr, when running in a JavaScript environment without Node.js APIs (for example,\nCloudflare Workers or browsers):\n\n`import   {  createClient  }   from   \"@libsql/client/web\" ;`\n\nThe `@libsql/client` import allows for local testing using SQLite database files\nusing the exact same API as libSQL remote databases.  You can switch between\nlocal files and a remote database easily by changing the URL used to initialize\nthe SDK. Use a `file:` URL to direct the SDK to a local SQLite database file.\n\nnote\n\nThe alternate `@libsql/client/web` import does not support local file URLs.\n\n### Create a database client object for local and remote access\u200b\n\nFor local and remote access, call the `createClient` factory function and invoke\nit with your database URL and[ database client authentication token ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)obtained using\nthe Turso CLI:\n\n```\nconst  client  =   createClient ( {\n    url :   \"libsql://your-database.turso.io\" ,\n    authToken :   \"your-auth-token\"\n} ) ;\n```\n\nThe `authToken` property is only required when using a remote database instance\nmanaged by Turso.\n\n### Create a database client object for hybrid access (embedded replica)\u200b\n\ninfo\n\nSupport for hybrid access with embedded replicas requires version 0.3.5 or later\nof the SDK.\n\nFor hybrid access using an embedded replica, call the `createClient` factory\nfunction and invoke it with your database URL,[ database client authentication\ntoken ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)obtained using the Turso CLI, and local database replica file:\n\n```\nconst  client  =   createClient ( {\n    url :   \"file:path/to/db-file\" ,\n    syncUrl :   \"libsql://your-database.turso.io\" ,\n    authToken :   \"your-auth-token\"\n} ) ;\n// Synchronize the embedded replica with the remote database\nawait  client . sync ( ) ;\n```\n\nFor additional information about how embedded replicas work with the SDKs\nprovided for all languages, see the[ common section on embedded replicas ](https://docs.turso.tech/libsql/client-access#embedded-replicas).\n\n### Client capability summary\u200b\n\nWith the returned libSQL Client object you can call:\n\n| Method | Description |\n|---|---|\n|  `execute()`  | [ Execute a single statement ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#execute-a-single-statement) |\n|  `batch()`  | [ Execute a batch of statements ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#execute-a-batch-of-statements) |\n|  `transaction()`  | Start an[ interactive transaction ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#interactive-transactions) |\n|  `sync()`  | Synchronize the embedded replica from the remote database (hybrid access only) |\n\n\n## Example data set\u200b\n\nAll of the examples in this section assume tables and data established by these\nstatements:\n\n```\ncreate   table  example_users  (\n    uid  text   primary   key ,\n    email  text\n) ;\ncreate   table  example_scores  (\n    uid  text ,\n     level   integer ,\n    score  integer ,\n     primary   key   ( uid ,   level )\n) ;\ninsert   into  example_users  values   ( 'uid1' ,   'foo@bar.com' ) ;\ninsert   into  example_users  values   ( 'uid2' ,   'baz@bar.com' ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   1 ,   100 ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   2 ,   95 ) ;\n```\n\n## Execute a single statement\u200b\n\nYou can execute a single statement with the `execute()` method of a Client\nobject. `execute()` returns a promise that becomes resolved with a[ ResultSet ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#resultset)object, or rejected with an error.\n\n### SQL string argument\u200b\n\nPass a single string to `execute()` to invoke a SQL statement in the SQLite\ndialect.\n\n```\ntry   {\n     const  rs  =   await  client . execute ( \"select * from example_users\" ) ;\n     // rs.columns == [ 'uid', 'email' ]\n     // rs.rows[0] == [ 'uid1', 'foo@bar.com' ]\n     // rs.rows[1] == [ 'uid2', 'baz@bar.com' ]\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\n### Positional placeholders\u200b\n\nlibSQL supports positional placeholders using the same syntax as SQLite.  Pass\nan object with `sql` and `args` properties to `execute()` . The `sql` property\nmust be a string containing placeholders, and the `args` property must be an\narray of values to bind to the placeholders.\n\n```\ntry   {\n     const  rs  =   await  client . execute ( {\n        sql :   \"select score from example_scores where uid = ? and level = ?\" ,\n        args :   [   \"uid1\" ,   2   ]\n     } ) ;\n     // rs.columns == [ 'score' ]\n     // rs.rows[0] == [ 95 ]\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\n### Named placeholders\u200b\n\nlibSQL supports named placeholders using the same syntax as SQLite. Pass an\nobject with `sql` and `args` properties to `execute()` . `sql` must be a string\ncontaining placeholders, and `args` must be an object whose properties match the\nnames of the placeholders, and whose values will be bound to the placeholders.\n\n```\ntry   {\n     const  rs  =   await  client . execute ( {\n        sql :   \"insert into example_scores values (:uid, :level, :score)\" ,\n        args :   {  uid :   \"uid2\" ,  level :   1 ,  score :   50   }\n     } ) ;\n     // rs.columns = []\n     // rs.rows = []\n     // rs.rowsAffected == 1\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\nIn the above example, there are placeholders for `uid` , `level` , and `score` using the prefix character `:` . The values of the matching properties of `args` are bound to each placeholder.\n\nlibSQL supports the same named placeholder prefix characters as SQLite: `:` , `@` , and `$` .\n\n## Batches and interactive transactions\u200b\n\nBatches and interactive transactions provide a way to execute multiple\nstatements atomically, internally using a[ SQLite transaction ](https://www.sqlite.org/lang_transaction.html). They both\nrequire a mode to be specified to indicate what sort of operations can be\nexecuted. The mode is specified as a string in the first argument of the call to `batch()` or `transaction()` .\n\n| Mode | SQLite command | Description |\n|---|---|---|\n|  `write`  |  `BEGIN IMMEDIATE`  | The transaction may execute statements that read and write data. Write transactions executed on a replica are forwarded to the primary instance, and can't operate in parallel. |\n|  `read`  |  `BEGIN TRANSACTION READONLY`  | The transaction may only execute statements that read data (select). Read transactions can occur on replicas, and can operate in parallel with other read transactions. |\n|  `deferred`  |  `BEGIN DEFERRED`  | The transaction starts in `read` mode, then changes to `write` as soon as a write statement is executed. *This mode change may fail if there is a write transaction currently executing on the primary.*  |\n\n\nIn general:\n\n- You should prefer to use a `read` batch or transaction when possible in order\nto achieve the best latency with replicas, since they don't require\ninteraction with the primary instance.\n- You should be prepared to handle random failures with `deferred` transactions\nwhen a change in mode is required. The probability of such an error becomes\nmore likely as the write load on the primary instance increases.\n\n\n### Execute a batch of statements\u200b\n\ninfo\n\nBe sure to read the[ common section on batches ](https://docs.turso.tech/libsql/client-access#batches)for libSQL clients to understand\ntheir behavior.\n\nTo execute multiple statements in a transaction, use the `batch()` method on the\nclient object, passing it a transaction mode and array of statements. The array\nmay contain any type of statement that is also accepted by[ execute() ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#execute-a-single-statement). `batch()` returns a promise that\nbecomes fulfilled with an array of[ ResultSet ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#resultset)objects (one for each\nstatement), or an error.\n\nThe following code uses a write batch to insert a row for uid3 in two different\ntables using a transaction that commits them both at the same time.\n\n```\ntry   {\n     const  rss  =   await  client . batch ( [\n         {\n            sql :   \"insert into example_users values (?, ?)\" ,\n            args :   [   \"uid3\" ,   \"uid3@turso.tech\"   ]\n         } ,\n         {\n            sql :   \"insert into example_scores values (?, ?, ?)\" ,\n            args :   [   \"uid3\" ,   1 ,   200   ]\n         }\n     ] ,   \"write\" ) ;\n     // rss[0].columns = []\n     // rss[0].rows = []\n     // rss[0].rowsAffected == 1\n     //\n     // rss[1].columns = []\n     // rss[1].rows = []\n     // rss[1].rowsAffected == 1\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\n### Interactive transactions\u200b\n\ninfo\n\nBe sure to read the[ common section on interactive transactions ](https://docs.turso.tech/libsql/client-access#interactive-transactions)for libSQL\nclients to understand their behavior.\n\nUse the `transaction()` method on the client object to start an interactive\ntransaction, passing it the mode of the transaction. The returned Transaction\nobject provides the following methods:\n\n| Method | Description |\n|---|---|\n|  `execute()`  | Similar to the normal client `execute()` , except within the context of the transaction |\n|  `commit()`  | Commits all the write statements in the transaction |\n|  `rollback()`  | Rolls back the entire transaction |\n|  `close()`  | Immediately stops the transaction - must be called if the transaction was not committed or rolled back in order to free resources |\n\n\nThe following code uses a write transaction to update a user\u2019s level score, but\nonly if it\u2019s greater than the one that currently exists:\n\n```\ntry   {\n     const  uid  =   \"uid1\" ;\n     const  level  =   1 ;\n     const  newScore  =   200 ;\n     const  transaction  =   await  client . transaction ( \"write\" ) ;\n     const  rs  =   await  transaction . execute ( {\n        sql :   \"select score from example_scores where uid = ? and level = ?\" ,\n        args :   [  uid ,  level  ]\n     } ) ;\n     // rs.columns == [ 'score' ]\n     // rs.rows[0]['score'] == 1000\n     const  oldScore  =  rs . rows [ 0 ] [ \"score\" ]   as   number ;\n     if   ( newScore  >  oldScore )   {\n         await  transaction . execute ( {\n            sql :   \"update example_scores set score = ? where uid = ? and level = ?\" ,\n            args :   [  newScore ,  uid ,  level  ]\n         } )\n     }\n     await  transaction . commit ( ) ;\n}   catch   ( e )   {\n     console . error ( e ) ;\n}\n```\n\n## ResultSet\u200b\n\nDatabase queries always yield a ResultSet object. This object has the following\nproperties:\n\n| Property | Type | Description |\n|---|---|---|\n|  `rows`  |  `Array<Row>`  | An array of Row objects containing the row values, empty for write operations |\n|  `columns`  |  `Array<string>`  | An array of strings with the names of the columns in the order they appear in each Row, empty for write operations |\n|  `rowsAffected`  |  `number`  | The number of rows affected by a write statement, 0 otherwise |\n|  `lastInsertRowid`  |  `bigint  |  undefined`  | The rowid of a newly inserted row, or undefined if there is none for the statement |\n\n\nA Row object contains the values of a row in a ResultSet. It can be indexed by\neither an integer column index or the name of the column. Each element of a Row\ncan have one of the following types, depending on the source of data:\n\n- `null`\n- `string`\n- `number`\n- `ArrayBuffer` (for blobs)\n\n\n```\nconst  rs  =   await  client . execute ( {\n    sql :   \"select level, score from example_scores where uid = ?\" ,\n    args :   [   \"uid1\"   ]\n} ) ;\nfor   ( const  row  of  rs . rows )   {\n     // Can index row by column number\n     const  level1  =  row [ 0 ]   as   number ;\n     const  score1  =  row [ 1 ]   as   number ;\n     // Can also index row by column name\n     const  level2  =  row [ \"level\" ]   as   number ;\n     const  score2  =  row [ \"score\" ]   as   number ;\n}\n```\n\ndanger\n\nWith TypeScript, casting row values without first checking their types might\nresult in errors at runtime. Check the type of any values before casting them\nunless you are absolutely certain of their type.\n\n- [ Installation ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#installation)\n- [ Initialization ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#initialization)\n    - [ Choose the correct import for your environment ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#choose-the-correct-import-for-your-environment)\n\n- [ Create a database client object for local and remote access ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#create-a-database-client-object-for-local-and-remote-access)\n\n- [ Create a database client object for hybrid access (embedded replica) ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#create-a-database-client-object-for-hybrid-access-embedded-replica)\n\n- [ Client capability summary ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#client-capability-summary)\n- [ Example data set ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#example-data-set)\n- [ Execute a single statement ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#execute-a-single-statement)\n    - [ SQL string argument ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#sql-string-argument)\n\n- [ Positional placeholders ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#positional-placeholders)\n\n- [ Named placeholders ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#named-placeholders)\n- [ Batches and interactive transactions ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#batches-and-interactive-transactions)\n    - [ Execute a batch of statements ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#execute-a-batch-of-statements)\n\n- [ Interactive transactions ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#interactive-transactions)\n- [ ResultSet ](https://docs.turso.tech//reference/client-access/javascript-typescript-sdk/#resultset)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech/reference/turso-cli#installation": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech/reference/turso-cli#installation/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech/reference/turso-cli#installation/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech/reference/turso-cli#installation/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech/reference/turso-cli#installation/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech/reference/turso-cli#installation/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech/reference/turso-cli#installation/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech/reference/turso-cli#installation/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech/reference/turso-cli#installation/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech/reference/turso-cli#installation/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech/reference/turso-cli#installation/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech/reference/turso-cli#installation/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech/reference/turso-cli#installation/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech/reference/turso-cli#installation/#conventions)\n- [ Installation ](https://docs.turso.tech/reference/turso-cli#installation/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech/reference/turso-cli#installation/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech/reference/turso-cli#installation/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech/reference/turso-cli#installation/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech/reference/turso-cli#installation/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech/reference/turso-cli#installation/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech/reference/turso-cli#installation/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech/reference/turso-cli#installation/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech/reference/turso-cli#installation/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech/reference/turso-cli#installation/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech/reference/turso-cli#installation/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech/reference/turso-cli#installation/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech/reference/turso-cli#installation/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech/reference/turso-cli#installation/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech/reference/turso-cli#installation/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech/reference/turso-cli#installation/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech/reference/turso-cli#installation/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech/reference/turso-cli#installation/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech/reference/turso-cli#installation/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech/reference/turso-cli#installation/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech/reference/turso-cli#installation/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech/reference/turso-cli#installation/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech/reference/turso-cli#installation/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech/reference/turso-cli#installation/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech/reference/turso-cli#installation/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech/reference/turso-cli#installation/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech/reference/turso-cli#installation/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech/reference/turso-cli#installation/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech/reference/turso-cli#installation/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech/reference/turso-cli#installation/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech/reference/turso-cli#installation/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech/reference/turso-cli#installation/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech/reference/turso-cli#installation/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech/reference/turso-cli#installation/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech/reference/turso-cli#installation/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech/reference/turso-cli#installation/#get-help)\n- [ Local storage ](https://docs.turso.tech/reference/turso-cli#installation/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech/reference/turso-cli": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech/reference/turso-cli/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech/reference/turso-cli/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech/reference/turso-cli/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech/reference/turso-cli/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech/reference/turso-cli/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech/reference/turso-cli/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech/reference/turso-cli/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech/reference/turso-cli/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech/reference/turso-cli/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech/reference/turso-cli/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech/reference/turso-cli/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech/reference/turso-cli/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech/reference/turso-cli/#conventions)\n- [ Installation ](https://docs.turso.tech/reference/turso-cli/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech/reference/turso-cli/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech/reference/turso-cli/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech/reference/turso-cli/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech/reference/turso-cli/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech/reference/turso-cli/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech/reference/turso-cli/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech/reference/turso-cli/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech/reference/turso-cli/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech/reference/turso-cli/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech/reference/turso-cli/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech/reference/turso-cli/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech/reference/turso-cli/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech/reference/turso-cli/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech/reference/turso-cli/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech/reference/turso-cli/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech/reference/turso-cli/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech/reference/turso-cli/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech/reference/turso-cli/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech/reference/turso-cli/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech/reference/turso-cli/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech/reference/turso-cli/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech/reference/turso-cli/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech/reference/turso-cli/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech/reference/turso-cli/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech/reference/turso-cli/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech/reference/turso-cli/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech/reference/turso-cli/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech/reference/turso-cli/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech/reference/turso-cli/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech/reference/turso-cli/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech/reference/turso-cli/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech/reference/turso-cli/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech/reference/turso-cli/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech/reference/turso-cli/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech/reference/turso-cli/#get-help)\n- [ Local storage ](https://docs.turso.tech/reference/turso-cli/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech/reference/client-access/rust-sdk": "# Rust SDK\n\n## Installation\u200b\n\nAdd the[ libsql-client crate ](https://crates.io/crates/libsql-client)to your project using `cargo` :\n\n`$ cargo  add  libsql-client`\n\nFor CloudFlare Workers code that compiles to WASM, you must use a special\nconfiguration:\n\n`$ cargo  add  libsql-client --no-default-features -F workers_backend`\n\n## Initialization\u200b\n\nCall the `Client::from_config` function to create a new Client object:\n\n```\nlet  client  =   libsql_client :: Client :: from_config ( libsql_client :: Config   {\n    url :   url :: Url :: parse ( \"libsql://localhost:8080\" ) . unwrap ( ) ,\n    auth_token :   None ,\n} )\n. await\n. unwrap ( ) ;\n```\n\n## Example data set\u200b\n\nAll of the examples in this section assume tables and data established by these\nstatements:\n\n```\ncreate   table  example_users  (\n    uid  text   primary   key ,\n    email  text\n) ;\ncreate   table  example_scores  (\n    uid  text ,\n     level   integer ,\n    score  integer ,\n     primary   key   ( uid ,   level )\n) ;\ninsert   into  example_users  values   ( 'uid1' ,   'foo@bar.com' ) ;\ninsert   into  example_users  values   ( 'uid2' ,   'baz@bar.com' ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   1 ,   100 ) ;\ninsert   into  example_scores  values   ( 'uid1' ,   2 ,   95 ) ;\n```\n\n## Execute a single statement\u200b\n\n### SQL string argument\u200b\n\n```\nlet  rs  =  client . execute ( \"select * from example_users\" ) . await ? ;\n// rs is a ResultSet object containing rows and columns\n```\n\n### Positional placeholders\u200b\n\nCreate a new Statement using `Statement::with_args` and use the `args` macro to\nspecify the values to bind to the placeholders.\n\n```\nuse   libsql_client :: { Statement ,  args } ;\nlet  rs  =  client\n     . execute ( Statement :: with_args (\n         \"select score from example_scores where uid = ? and level = ?\" ,\n         args! ( \"uid1\" ,   2 ) ,\n     ) )\n     . await ? ;\n// rs is a ResultSet object containing rows and columns\n```\n\n## Execute a batch of statements\u200b\n\ninfo\n\nBe sure to read the[ common section on batches ](https://docs.turso.tech/libsql/client-access#batches)for libSQL clients to understand\ntheir behavior.\n\n```\nuse   libsql_client :: { Statement ,  args } ;\nlet  rss  =  client\n     . batch ( [\n         Statement :: with_args (\n             \"insert into example_users values (?, ?)\" ,\n             args! ( \"uid3\" ,   \"uid3@turso.tech\" ) ,\n         ) ,\n         Statement :: with_args (\n             \"insert into example_scores values (?, ?, ?)\" ,\n             args! ( \"uid3\" ,   1 ,   200 ) ,\n         ) ,\n     ] )\n     . await ? ;\n// rss is a Vec<ResultSet> containing results from all the queries\n```\n\n## Interactive transactions\u200b\n\ninfo\n\nBe sure to read the[ common section on interactive transactions ](https://docs.turso.tech/libsql/client-access#interactive-transactions)for libSQL\nclients to understand their behavior.\n\nThe following code uses an interactive transaction to update a user\u2019s level\nscore, but only if it\u2019s greater than the one that currently exists:\n\n```\nuse   libsql_client :: { Statement ,  args } ;\nlet  uid  =   \"uid1\" ;\nlet  level  =   1 ;\nlet  new_score  =   200 ;\nlet  transaction  =  client . transaction ( ) . await ? ;\nlet  rs  =  transaction\n     . execute ( Statement :: with_args (\n         \"select score from example_scores where uid = ? and level = ?\" ,\n         args! ( uid ,  level ) ,\n     ) )\n     . await ? ;\nlet  old_score  =  rs . rows . first ( ) . map ( | row |   & row . values [ 0 ] ) ;\nlet  old_score  =   match  old_score  {\n     Some ( Value :: Integer   {  value :  i  } )   =>   * i ,\n    _  =>   0 ,\n} ;\nif  new_score  >  old_score  {\n    transaction\n         . execute ( Statement :: with_args (\n             \"update example_scores set score = ? where uid = ? and level = ?\" ,\n             args! ( new_score ,  uid ,  level ) ,\n         ) )\n         . await ? ;\n}\ntransaction . commit ( ) . await ? ;\n```\n\n## ResultSet\u200b\n\nA ResultSet struct contains values for the rows and columns returned by a query.\n\n```\npub   struct   ResultSet   {\n     pub  columns :   Vec < String > ,\n     pub  rows :   Vec < Row > ,\n     pub  rows_affected :   u64 ,\n     pub  last_insert_rowid :   Option < i64 > ,\n}\n```\n\nEach row is contained in a Row struct that provides the values of the row\navailable by column index.\n\n```\npub   struct   Row   {\n     pub  values :   Vec < Value > ,\n}\n```\n\nEach Value can be one of the types supported by SQLite:\n\n```\npub   enum   Value   {\n     Null ,\n     Integer   {\n        value :   i64 ,\n     } ,\n     Float   {\n        value :   f64 ,\n     } ,\n     Text   {\n        value :   String ,\n     } ,\n     Blob   {\n        value :   Vec < u8 > ,\n     } ,\n}\n```\n\nYour code will need to make an assumption or a decision about the type of each\nvalue found in a Row.  The following code examines the first Value in the first\nRow of a ResultSet and sets up a match for how to interpret it:\n\n```\nlet  row  =  rs . rows . first ( ) . expect ( \"one row\" ) ;\nlet  value  =   & row . values [ 0 ] ;\nmatch  value  {\n     Value :: Null   =>   todo! ( ) ,\n     Value :: Integer   {  value  }   =>   todo! ( ) ,\n     Value :: Float   {  value  }   =>   todo! ( ) ,\n     Value :: Text   {  value  }   =>   todo! ( ) ,\n     Value :: Blob   {  value  }   =>   todo! ( ) ,\n} ;\n```\n\nIf your code is expecting a Text type (containing a Rust `&String` ), then you\ncould express that assumption like this:\n\n```\nif   let   Value :: Text   {  value  }   =  value  {\n     println! ( \"Text value as &String: {value}\" ) ;\n}   else   {\n     return   Err ( \"Expected a Text value\" . into ( ) ) ;\n}\n```\n\n- [ Installation ](https://docs.turso.tech/reference/client-access/rust-sdk/#installation)\n- [ Initialization ](https://docs.turso.tech/reference/client-access/rust-sdk/#initialization)\n- [ Example data set ](https://docs.turso.tech/reference/client-access/rust-sdk/#example-data-set)\n- [ Execute a single statement ](https://docs.turso.tech/reference/client-access/rust-sdk/#execute-a-single-statement)\n    - [ SQL string argument ](https://docs.turso.tech/reference/client-access/rust-sdk/#sql-string-argument)\n\n- [ Positional placeholders ](https://docs.turso.tech/reference/client-access/rust-sdk/#positional-placeholders)\n- [ Execute a batch of statements ](https://docs.turso.tech/reference/client-access/rust-sdk/#execute-a-batch-of-statements)\n- [ Interactive transactions ](https://docs.turso.tech/reference/client-access/rust-sdk/#interactive-transactions)\n- [ ResultSet ](https://docs.turso.tech/reference/client-access/rust-sdk/#resultset)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-01-setting-up-the-project": "# Step 1: Setting up the project\n\nBefore getting started, make sure that you satify the following pre-requisites:\n\n- You need the latest[ LTS version of Node.js ](https://nodejs.org/en/download)to work with node packages.\n- The[ Turso CLI installed ](https://docs.turso.tech/reference/turso-cli#installation)in your system to create databases.\n- [ A Cloudflare account ](https://dash.cloudflare.com/sign-up)and wrangler installed to deploy the website.\n\n\nHere\u2019s what the e-commerce store we are building will look like when completed.\n\nImage: [ The final look of the store ](https://docs.turso.tech/assets/images/01-final-look-46c97908a48636b330e5d3129216bd73.gif)\n\nImage: [ The final look of the store ](https://docs.turso.tech/assets/images/01-final-look-46c97908a48636b330e5d3129216bd73.gif)\n\n## Creating a Remix app\u200b\n\nCreate a new Remix app by running the following command on your terminal.\n\n`npx create-remix@latest the-mug-store`\n\nWhen prompted for the \"type of app\" you want to create, choose \"Just the\nbasics\", choose \"Cloudflare workers\" as where you want to deploy the app, and\n\"TypeScript\" as the language to use while creating the app.\n\nOn completion, the above command should create a new Remix app with the\nfollowing directory tree.\n\n```\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 entry.client.tsx\n\u2502   \u251c\u2500\u2500 entry.server.tsx\n\u2502   \u251c\u2500\u2500 root.tsx\n\u2502   \u2514\u2500\u2500 routes\n\u2502       \u2514\u2500\u2500 _index.tsx\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251c\u2500\u2500 remix.config.js\n\u251c\u2500\u2500 remix.env.d.ts\n\u251c\u2500\u2500 server.ts\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 wrangler.toml\n```\n\nHere is a gist of some of the above files and what they do:\n\n- `entry.client.tsx` : This is the browser\u2019s entry point which is also\nresponsible for hydrating the markup generated by the server.\n- `entry.server.tsx` : This is where Remix handles the generation of the HTTP\nresponses for the app.\n- `remix.config.js` : This file contains some build and development configuration\noptions. It does not run on the server.\n- `root.tsx` : This file is the principal layout file of the Remix app.\n- `wrangler.toml` : This is the Cloudflare wrangler project configuration file.\n\n\n `cd` into the project and run `npm install` to install the project\u2019s\ndependencies. Next, run `npm run dev` to deploy and preview the Remix app\nlocally. You should see the following. (If any missing dependency errors are\nthrown at you, just install them and run `npm run dev` once more)\n\nImage: [ Remix app initial preview ](https://docs.turso.tech/assets/images/02-initial-preview-917527f81bc7af86090eedefce6f796e.png)\n\nImage: [ Remix app initial preview ](https://docs.turso.tech/assets/images/02-initial-preview-917527f81bc7af86090eedefce6f796e.png)\n\nSince we are going to use TailwindCSS to style the website, follow[ the steps\nprovided here ](https://remix.run/docs/en/1.18.1/guides/styling#tailwind-css)to set that up. Use this[ Tailwind configuration file ](https://github.com/turso-extended/app-the-mug-store/blob/master/tailwind.config.ts)and run\nthe following command to install some Tailwind dependencies.\n\n`npm i -D @tailwindcss/forms @tailwindcss/typography`\n\nRestart the dev server to proceed.\n\n## Setting up the UI\u200b\n\nAdd the site\u2019s navigation header and footer by creating two components `Footer.tsx` and `Header.tsx` under a `app/components` directory. Add the\nfollowing code to these two components.\n\n```\nexport   const   Footer   =   ( )   =>   {\n   return   (\n     < footer   className = \" flex justify-center py-12 \" >\n       < span >\n        Built with \u2661 in { \" \" }\n         < a\n           href = \" https://remix.run/ \"\n           target = \" _blank \"\n           className = \" \"\n           rel = \" noreferrer \"\n         >\n          Remix\n         </ a > { \" \" }\n        & { \" \" }\n         < a\n           href = \" https://turso.tech/ \"\n           target = \" _blank \"\n           className = \" text-secondary-500 \"\n           rel = \" noreferrer \"\n         >\n          Turso\n         </ a >\n         { \". Hosted on \" }\n         < a\n           href = \" https://developers.cloudflare.com/workers/ \"\n           target = \" _blank \"\n           className = \" text-orange-500 \"\n           rel = \" noreferrer \"\n         >\n          Cloudflare Workers\n         </ a >\n       </ span >\n     </ footer >\n   ) ;\n} ;\n```\n\n```\nexport   const   Header   =   ( )   =>   {\n   return   (\n     < header   className = \" header flex justify-between px-4 py-2 bg-primary \" >\n       < ul   className = \" flex justify-start \" >\n         < li >\n           < a\n             href = \" /mugs \"\n             className = \" text-white font-thin hover:text-secondary-300 \"\n           >\n             { \" \" }\n            All Mugs { \" \" }\n           </ a >\n         </ li >\n       </ ul >\n       < div   className = { ` logo ` } >\n         < a\n           href = \" / \"\n           title = \" Turix Store \"\n           className = \" font-semibold text-center text-white no-decoration \"\n         >\n           < span   className = \" text-secondary-300 font-semibold text-center text-xl \" >\n            The M\ud83c\udf75g Store\n           </ span >\n         </ a >\n       </ div >\n       < ul   className = \" space-x-1 \" >\n         < li > CART_ICON </ li >\n         < li >\n           < a   href = \" /account/dashboard \"   title = \" account \" >\n             < AccountIcon   color = \" #4ff8d2 \"   />\n           </ a >\n         </ li >\n       </ ul >\n     </ header >\n   ) ;\n} ;\n```\n\nNext, update the app\u2019s layout `app/root.tsx` , adding these two components to it\nby replacing the `<Outlet/>` component with the following markup.\n\n```\n< div   className = \" page \" >\n   < main   className = \" flex flex-col flex-grow min-h-[90vh] \" >\n     < Header   />\n     < Outlet   />\n   </ main >\n   < div   className = \" section dark \" >\n     < div   className = \" container \" >\n       < Footer   />\n     </ div >\n   </ div >\n</ div >\n```\n\nDo not forget to import the components at the top of the file.\n\n```\nimport   {   Header   }   from   \"./components/Header\" ;\nimport   {   Footer   }   from   \"./components/Footer\" ;\n```\n\n *Note: Since the header component /app/components/Header.tsx imports a\n<Cart /> component, one we have yet to set up, use the text CART_ICON in its\nplace for now.* \n\n`/app/components/Header.tsx`\n\n`<Cart />`\n\n`CART_ICON`\n\nAdd the following custom styles to the `app/tailwind.css` file.\n\n```\n@layer  base   {\n   .header   .logo  a   {\n     display :  inline-block ;\n   }\n   .header  li a   {\n     @apply  text-white px-4 flex space-x-1 justify-center items-center ;\n   }\n   @media   ( min-width :   450 px )   {\n     .header  li   {\n       display :  inline-block ;\n     }\n   }\n   @media   ( min-width :   768 px )   {\n     .header   {\n       padding :   20 px   70 px ;\n     }\n   }\n}\n```\n\nCreate an `Icon.tsx` component that will be used to house all the icons that we\u2019ll\nuse within the app.\n\nAdd the following code to the component.\n\n```\ninterface   CartIconProps   {\n  color :   string   |   undefined ;\n}\nexport   const   CartIcon   =   ( props :   CartIconProps )   =>   (\n   < svg\n     xmlns = \" http://www.w3.org/2000/svg \"\n     viewBox = \" 0 0 24 24 \"\n     width = \" 24 \"\n     height = \" 24 \"\n   >\n     < path\n       d = \" M20.0049 22H4.00488C3.4526 22 3.00488 21.5523 3.00488 21V3C3.00488 2.44772 3.4526 2 4.00488 2H20.0049C20.5572 2 21.0049 2.44772 21.0049 3V21C21.0049 21.5523 20.5572 22 20.0049 22ZM9.00488 6H7.00488V8C7.00488 10.7614 9.24346 13 12.0049 13C14.7663 13 17.0049 10.7614 17.0049 8V6H15.0049V8C15.0049 9.65685 13.6617 11 12.0049 11C10.348 11 9.00488 9.65685 9.00488 8V6Z \"\n       fill = { props . color }\n     > </ path >\n   </ svg >\n) ;\nexport   const   AccountIcon   =   ( props :   CartIconProps )   =>   (\n   < svg\n     xmlns = \" http://www.w3.org/2000/svg \"\n     viewBox = \" 0 0 24 24 \"\n     width = \" 24 \"\n     height = \" 24 \"\n   >\n     < path\n       d = \" M4 22C4 17.5817 7.58172 14 12 14C16.4183 14 20 17.5817 20 22H4ZM12 13C8.685 13 6 10.315 6 7C6 3.685 8.685 1 12 1C15.315 1 18 3.685 18 7C18 10.315 15.315 13 12 13Z \"\n       fill = { props . color }\n     > </ path >\n   </ svg >\n) ;\nexport   const   LoadingIcon   =   ( )   =>   (\n   < svg\n     xmlns = \" http://www.w3.org/2000/svg \"\n     viewBox = \" 0 0 24 24 \"\n     className = \" animate-spin text-white w-4 h-4 fill-white \"\n   >\n     < path   d = \" M5.46257 4.43262C7.21556 2.91688 9.5007 2 12 2C17.5228 2 22 6.47715 22 12C22 14.1361 21.3302 16.1158 20.1892 17.7406L17 12H20C20 7.58172 16.4183 4 12 4C9.84982 4 7.89777 4.84827 6.46023 6.22842L5.46257 4.43262ZM18.5374 19.5674C16.7844 21.0831 14.4993 22 12 22C6.47715 22 2 17.5228 2 12C2 9.86386 2.66979 7.88416 3.8108 6.25944L7 12H4C4 16.4183 7.58172 20 12 20C14.1502 20 16.1022 19.1517 17.5398 17.7716L18.5374 19.5674Z \" > </ path >\n   </ svg >\n) ;\nexport   const   DeleteIcon   =   ( )   =>   (\n   < svg\n     className = \" h-4 w-4 fill-white \"\n     xmlns = \" http://www.w3.org/2000/svg \"\n     viewBox = \" 0 0 24 24 \"\n   >\n     < path   d = \" M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z \" > </ path >\n   </ svg >\n) ;\n```\n\nBy now, this should be the app\u2019s preview.\n\nImage: [ Remix app preview with navigation header and footer ](https://docs.turso.tech/assets/images/03-modified-app-preview-08a6159af07f32217a764fcdbbf9a73e.png)\n\nImage: [ Remix app preview with navigation header and footer ](https://docs.turso.tech/assets/images/03-modified-app-preview-08a6159af07f32217a764fcdbbf9a73e.png)\n\nTrying to access the \"All mugs\" page on the navigation bar would take us to a\n404 page since we have yet to set that page up. Before working on our pages,\nlet\u2019s set up the app\u2019s database.\n\n- [ Creating a Remix app ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-01-setting-up-the-project/#creating-a-remix-app)\n- [ Setting up the UI ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-01-setting-up-the-project/#setting-up-the-ui)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-02-setting-up-turso": "# Step 2: Setting up Turso\n\nProceeding to setting up a database for the app, run the following command to\ncreate a new Turso database.\n\n`turso db create the-mug-store`\n\nNext, get and set up the database credentials so that the data within Turso can\nbe consumed by our app.\n\nFor the database url run the following command.\n\n`turso db show the-mug-store --url`\n\nInside the Cloudflare wrangler configuration file `wrangler.toml` add a new `[vars]` section and list the database url as follows.\n\n```\n[ vars ]\nTURSO_DB_URL   =   \"YOUR-DATABASE-URL\"\n```\n\nIn this section of the Cloudflare workers configuration file, we list the\nenvironment variables that we don\u2019t consider as sensitive within our app.\n\nFor the database auth token, run the following command.\n\n`turso db tokens create the-mug-store`\n\nSince the auth token is a sensitive environment variable \u201csecret\u201d we store it by\nusing the wrangler CLI, or directly on the project\u2019s dashboard on Cloudflare.\nBut, to do so we first need to grant the wrangler app permissions to use our\nCloudflare account, we do that by running the `wrangler login` command.\n\nThe following tab will be opened on our browser after running the last command.\n\nImage: [ Wrangler access request ](https://docs.turso.tech/assets/images/04-wrangler-access-5daeae3bc9a59dbf20c801512f54a57b.png)\n\nImage: [ Wrangler access request ](https://docs.turso.tech/assets/images/04-wrangler-access-5daeae3bc9a59dbf20c801512f54a57b.png)\n\nClick on \u201cAllow\u201d on the resulting permissions page to proceed.\n\nThen, on the terminal run `wrangler secret put TURSO_DB_AUTH_TOKEN` , and paste\nthe database auth token we obtained above when prompted.\n\nFor local development, create a `.dev.vars` file at the project\u2019s root directory\nand add the `TURSO_DB_AUTH_TOKEN` key assigning it the obtained token.\n\n`TURSO_DB_AUTH_TOKEN = \"YOUR-DATABASE-TOKEN\"`\n\nNext up, we'll be setting up Drizzle for simplified database queries within the\napp.\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-03-configuring-drizzle": "# Step 3: Configuring Drizzle\n\nAs prescribed earlier we are going to use Drizzle to handle our database schema\nand build queries in our app. Run the following commands to install its\ndependencies in the Remix project.\n\n```\nnpm install drizzle-orm @libsql/client\nnpm install -D drizzle-kit dotenv tsx\n```\n\n *Note: The dotenv npm package added above is going to help us use\nenvironment variables stored within the .env file within our Drizzle code.\nWe\u2019ll use the tsx package to execute TypeScript files mainly within\npackage.json scripts.* \n\n`dotenv`\n\n`.env`\n\n`tsx`\n\n`package.json`\n\nThen, create a `/drizzle` directory at the project\u2019s root.\n\nWe are going to place our app\u2019s database schema and store Drizzle migrations\ninside this directory.\n\nCreate a `.env` file at the project\u2019s root and add the database credentials\nobtained in the previous section.\n\n```\nTURSO_DB_URL=<OBTAINED-TURSO-DB-URL>\nTURSO_DB_AUTH_TOKEN=<OBTAINED-TURSO-DB-TOKEN>\n```\n\n *Note: Do not stage .env files to your version control systems.* \n\n`.env`\n\nOur e-commerce database is going to have the following tables.\n\n- categories - Stores the products\u2019 categories\n- products - Stores the website\u2019s products\n- users - Stores customer information\n- passwords - Stores customer passwords\n- cart_items - Stores items added to cart by customers\n- orders - Stores the order information created by customers\n- order_items - Stores the products belonging to orders\n\n\nCreate a `schema.ts` file under `/drizzle` and add the following code as the\ndatabase schema.\n\n```\nimport   {  relations ,  sql  }   from   \"drizzle-orm\" ;\nimport   {\n  index ,\n  integer ,\n  real ,\n  sqliteTable ,\n  text ,\n  uniqueIndex ,\n}   from   \"drizzle-orm/sqlite-core\" ;\nexport   const  categories  =   sqliteTable (\n   \"categories\" ,\n   {\n    id :   text ( \"id\" ) . primaryKey ( ) ,\n    name :   text ( \"name\" ) ,\n    image :   text ( \"image\" ) ,\n   } ,\n   ( categories )   =>   ( {\n    nameIdx :   index ( \"name_idx\" ) . on ( categories . name ) ,\n   } )\n) ;\nexport   const  categoriesRelations  =   relations ( categories ,   ( {  many  } )   =>   ( {\n  products :   many ( products ) ,\n} ) ) ;\nexport   const  products  =   sqliteTable (\n   \"products\" ,\n   {\n    id :   text ( \"id\" ) . primaryKey ( ) ,\n    name :   text ( \"name\" ) . notNull ( ) ,\n    description :   text ( \"description\" ) . notNull ( ) ,\n    price :   real ( \"price\" ) . notNull ( ) ,\n    categoryId :   integer ( \"category_id\" )\n       . notNull ( )\n       . references ( ( )   =>  categories . id ) ,\n    image :   text ( \"image\" ) ,\n    createdAt :   integer ( \"created_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n    updatedAt :   integer ( \"updated_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n   } ,\n   ( products )   =>   ( {\n    idIdx :   uniqueIndex ( \"id_idx\" ) . on ( products . id ) ,\n    priceIdx :   index ( \"price_idx\" ) . on ( products . price ) ,\n    categoryIdIdx :   index ( \"category_id_idx\" ) . on ( products . categoryId ) ,\n   } )\n) ;\nexport   const  productsRelations  =   relations ( products ,   ( {  one  } )   =>   ( {\n  user :   one ( categories ,   {\n    fields :   [ products . categoryId ] ,\n    references :   [ categories . id ] ,\n   } ) ,\n} ) ) ;\nexport   const  users  =   sqliteTable (\n   \"users\" ,\n   {\n    id :   text ( \"id\" ) . primaryKey ( ) ,\n    firstName :   text ( \"firstName\" ) . notNull ( ) ,\n    lastName :   text ( \"lastName\" ) . notNull ( ) ,\n    email :   text ( \"email\" ) . notNull ( ) ,\n    address :   text ( \"address\" ) ,\n    phone :   text ( \"phone\" ) ,\n    avatar :   text ( \"avatar\" ) ,\n    createdAt :   integer ( \"created_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n    updatedAt :   integer ( \"updated_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n   } ,\n   ( users )   =>   ( {\n    emailIdx :   uniqueIndex ( \"email_idx\" ) . on ( users . email ) ,\n    firstNameLastNameAddressIdx :   index ( \"first_name_last_name_address_idx\" ) . on (\n      users . firstName ,\n      users . lastName ,\n      users . address\n     ) ,\n   } )\n) ;\nexport   const  usersRelations  =   relations ( users ,   ( {  one ,  many  } )   =>   ( {\n  password :   one ( passwords ,   {\n    fields :   [ users . id ] ,\n    references :   [ passwords . userId ] ,\n   } ) ,\n  cartItems :   many ( cartItems ) ,\n  orders :   many ( orders ) ,\n} ) ) ;\nexport   const  passwords  =   sqliteTable ( \"passwords\" ,   {\n  hash :   text ( \"hash\" ) . notNull ( ) ,\n  userId :   text ( \"user_id\" )\n     . notNull ( )\n     . references ( ( )   =>  users . id ) ,\n} ) ;\nexport   const  passwordsRelations  =   relations ( passwords ,   ( {  one  } )   =>   ( {\n  user :   one ( users ,   {\n    fields :   [ passwords . userId ] ,\n    references :   [ users . id ] ,\n   } ) ,\n} ) ) ;\nexport   const  cartItems  =   sqliteTable (\n   \"cart_items\" ,\n   {\n    id :   text ( \"id\" ) . primaryKey ( ) ,\n    count :   integer ( \"count\" ) . notNull ( ) . default ( 1 ) ,\n    userId :   text ( \"user_id\" )\n       . notNull ( )\n       . references ( ( )   =>  users . id ) ,\n    productId :   text ( \"product_id\" )\n       . notNull ( )\n       . references ( ( )   =>  products . id ) ,\n    createdAt :   integer ( \"created_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n    updatedAt :   integer ( \"updated_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n   } ,\n   ( cartItems )   =>   ( {\n    userIdProductIdx :   uniqueIndex ( \"cart_items_user_id_product_id_idx\" ) . on (\n      cartItems . id\n     ) ,\n    productIdx :   index ( \"cart_items_product_id_idx\" ) . on ( cartItems . productId ) ,\n   } )\n) ;\nexport   const  cartItemsRelations  =   relations ( cartItems ,   ( {  one  } )   =>   ( {\n  user :   one ( users ,   {\n    fields :   [ cartItems . userId ] ,\n    references :   [ users . id ] ,\n   } ) ,\n  product :   one ( products ,   {\n    fields :   [ cartItems . productId ] ,\n    references :   [ products . id ] ,\n   } ) ,\n} ) ) ;\nexport   const  orders  =   sqliteTable ( \"orders\" ,   {\n  id :   text ( \"id\" ) . primaryKey ( ) ,\n  customerName :   text ( \"customer_name\" ) . notNull ( ) ,\n  amount :   real ( \"amount\" ) . notNull ( ) ,\n  shippingFees :   real ( \"shipping_fees\" ) . notNull ( ) ,\n  discountAmt :   integer ( \"discount_amt\" ) . notNull ( ) . default ( 0 ) ,\n  finalAmount :   integer ( \"final_amount\" ) . notNull ( ) ,\n  shippingAddress :   text ( \"shipping_address\" ) . notNull ( ) ,\n  paid :   integer ( \"paid\" ) . notNull ( ) . default ( 0 ) ,\n  userId :   text ( \"user_id\" ) . notNull ( ) ,\n  createdAt :   integer ( \"created_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n  updatedAt :   integer ( \"updated_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n} ) ;\nexport   const  ordersRelations  =   relations ( orders ,   ( {  one ,  many  } )   =>   ( {\n  user :   one ( users ,   {\n    fields :   [ orders . userId ] ,\n    references :   [ users . id ] ,\n   } ) ,\n  items :   many ( orderItems ) ,\n} ) ) ;\nexport   const  orderItems  =   sqliteTable (\n   \"order_items\" ,\n   {\n    id :   text ( \"id\" ) . primaryKey ( ) ,\n    count :   integer ( \"count\" ) . notNull ( ) . default ( 1 ) ,\n    orderId :   text ( \"order_id\" )\n       . notNull ( )\n       . references ( ( )   =>  orders . id ) ,\n    productId :   text ( \"product_id\" )\n       . notNull ( )\n       . references ( ( )   =>  products . id ) ,\n    createdAt :   integer ( \"created_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n    updatedAt :   integer ( \"updated_at\" ) . default ( sql ` ( cast  ( unixepoch  ( )   as   int ) ) ` ) ,\n   } ,\n   ( orderItems )   =>   ( {\n    orderIdProductIdIdx :   uniqueIndex ( \"order_items_order_id_product_id_idx\" ) . on (\n      orderItems . orderId ,\n      orderItems . productId\n     ) ,\n    productIdx :   index ( \"order_items_product_id_idx\" ) . on ( orderItems . productId ) ,\n   } )\n) ;\nexport   const  orderItemsRelations  =   relations ( orderItems ,   ( {  one  } )   =>   ( {\n  order :   one ( orders ,   {\n    fields :   [ orderItems . orderId ] ,\n    references :   [ orders . id ] ,\n   } ) ,\n  product :   one ( products ,   {\n    fields :   [ orderItems . productId ] ,\n    references :   [ products . id ] ,\n   } ) ,\n} ) ) ;\n```\n\nThe above code shows the Drizzle database schema for our app including the\nindexes and relations for some of the tables\n\nAdd the following SQL generation script inside `package.json` .\n\n`\"generate\" :   \"drizzle-kit generate:sqlite --out ./drizzle/migrations --breakpoints --schema=./drizzle/schema.ts\"`\n\nThen, create the database migration file by running `npm run generate` .\n\nYou should then see the migration files generated inside a newly created `drizzle/migrations` directory which was passed as the `--out` path on the above\nscript\n\nTo migrate the schema to Turso, first create a `migrate.ts` file under `/drizzle` , then add the following code in it.\n\n```\nimport   \"dotenv/config\" ;\nimport   {  migrate  }   from   \"drizzle-orm/libsql/migrator\" ;\nimport   {  drizzle  }   from   \"drizzle-orm/libsql\" ;\nimport   {  createClient  }   from   \"@libsql/client\" ;\nexport   const  client  =   createClient ( {\n  url :  process . env . TURSO_DB_URL   as   string ,\n  authToken :  process . env . TURSO_DB_AUTH_TOKEN   as   string ,\n} ) ;\nexport   const  db  =   drizzle ( client ) ;\nasync   function   main ( )   {\n   try   {\n     await   migrate ( db ,   {\n      migrationsFolder :   \"drizzle/migrations\" ,\n     } ) ;\n     console . log ( \"Tables migrated!\" ) ;\n    process . exit ( 0 ) ;\n   }   catch   ( error )   {\n     console . error ( \"Error performing migration: \" ,  error ) ;\n    process . exit ( 1 ) ;\n   }\n}\nmain ( ) ;\n```\n\nCreate the following `package.json` script to streamline the schema migration\ntask.\n\n`\"migrate\" :   \"tsx drizzle/migrate\" ,`\n\nThen, Run the migration task `npm run migrate` .\n\nIf everything went well, you should see the following log output.\n\n```\n> @ migrate /the-mug-store\n> tsx drizzle/migrate\nTables migrated!\n```\n\nFinally, create a `client.ts` file under a new `app/lib` directory and add the\nfollowing code.\n\n```\nimport   {  drizzle  }   from   \"drizzle-orm/libsql\" ;\nimport   {  createClient  }   from   \"@libsql/client/http\" ;\nimport   *   as  schema  from   \"../../drizzle/schema\" ;\nimport   type   {  AppLoadContext  }   from   \"@remix-run/cloudflare\" ;\ninterface   Env   {\n   TURSO_DB_AUTH_TOKEN ? :   string ;\n   TURSO_DB_URL ? :   string ;\n}\nexport   function   buildDbClient ( context :  AppLoadContext )   {\n   const  url  =   ( context . env  as   unknown   as  Env ) . TURSO_DB_URL ?. trim ( ) ;\n   if   ( url  ===   undefined )   {\n     throw   new   Error ( \"TURSO_DB_URL is not defined\" ) ;\n   }\n   const  authToken  =   ( context . env  as   unknown   as  Env ) . TURSO_DB_AUTH_TOKEN ?. trim ( ) ;\n   if   ( authToken  ===   undefined )   {\n     throw   new   Error ( \"TURSO_DB_AUTH_TOKEN is not defined\" ) ;\n   }\n   return   drizzle ( createClient ( {  url ,  authToken  } ) ,   {  schema  } ) ;\n}\n```\n\n `buildDbClient()` is the Drizzle instance initialization function for our app.\nWe are passing the worker\u2019s context `serverContext` as an argument so as to get\nthe environment variables from Cloudflare workers.\n\n## Previewing the Turso database using Drizzle\u200b\n\nTo preview the Turso database visually, add the Drizzle configuration file at\nthe project\u2019s root drizzle.config.ts and inside it add the following\nconfiguration.\n\n```\nimport   type   {  Config  }   from   \"drizzle-kit\" ;\nimport   *   as  dotenv  from   \"dotenv\" ;\ndotenv . config ( ) ;\nexport   default   {\n  schema :   \"./drizzle/schema.ts\" ,\n  out :   \"./drizzle/migrations\" ,\n  driver :   \"turso\" ,\n  dbCredentials :   {\n    url :  process . env . TURSO_DB_URL   as   string ,\n    authToken :  process . env . TURSO_DB_AUTH_TOKEN   as   string ,\n   } ,\n}  satisfies Config ;\n```\n\nAdd a new \"studio\" script inside package.json.\n\n`\"studio\" :   \"drizzle-kit studio --port 3333\"`\n\nThen, run `npm run studio` and open[ localhost:3333 ](http://localhost:3333)to preview the database.\nYou should then see the following preview.\n\nImage: [ Turso database preview inside Drizzle studio ](https://docs.turso.tech/assets/images/05-drizzle-studio-turso-db-preview-ba53556b80e7eb13bf47976d9879d4c2.png)\n\nImage: [ Turso database preview inside Drizzle studio ](https://docs.turso.tech/assets/images/05-drizzle-studio-turso-db-preview-ba53556b80e7eb13bf47976d9879d4c2.png)\n\n## Seeding data into the database\u200b\n\nInside the final project repository there is database demo data seeding code as\ncan be[ viewed here ](https://github.com/turso-extended/app-the-mug-store/blob/master/drizzle/seed.ts). To use it, make sure to first install the[ uuid ](https://www.npmjs.com/package/uuid)and[ lorem-ipsum ](https://www.npmjs.com/package/lorem-ipsum)npm packages.\n\nCreate another `package.json` script to streamline the database seeding task.\n\n`\"db:seed\" :   \"tsx drizzle/seed\"`\n\nAfterwards, run `npm run db:seed` to seed some data into the database.\n\nSince we now know our database schema, let\u2019s finalize this section by\ndocumenting our app\u2019s data types. Under `app/lib` add a `types.ts` file with the\nfollowing code.\n\n```\nexport   interface   Product   {\n  id :   string ;\n  name :   string ;\n  description :   string ;\n  price :   number ;\n  categoryId :   string ;\n  image :   string ;\n  createdAt :   string ;\n}\nexport   interface   Category   {\n  id :   string ;\n  name :   string ;\n}\nexport   interface   User   {\n  id :   string ;\n  firstName :   string ;\n  lastName :   string ;\n  email :   string ;\n  address :   string ;\n  avatar :   string ;\n  createdAt :   number ;\n}\nexport   interface   CartItem   {\n  id :   string ;\n  user :  User ;\n  product :  Product ;\n  count :   number ;\n}\nexport   interface   Cart   {\n  user :  User ;\n  items :  CartItem [ ] ;\n  show :   boolean ;\n}\nexport   interface   Order   {\n  id :   number ;\n  amount :   number ;\n  shippingFees :   number ;\n  discount :   number ;\n  finalAmount :   number ;\n  paid :   boolean ;\n  user :  User ;\n  shippingAddress :   string ;\n  createdAt :   number ;\n}\n```\n\nIn the next step we are going to see how the store items can be listed within\nour app.\n\n- [ Previewing the Turso database using Drizzle ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-03-configuring-drizzle/#previewing-the-turso-database-using-drizzle)\n- [ Seeding data into the database ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-03-configuring-drizzle/#seeding-data-into-the-database)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-04-listing-products": "# Step 4: Listing store items\n\nThe Mug Store app has two product listing pages, the home page `/` that lists\nfeatured products and categories, and the mugs page `/mugs` that list all mugs\nwithin pages.\n\n## The home page\u200b\n\nFor the website\u2019s home page we have featured products and categories sections\nthat in a real-world scenario we\u2019d like to show products based on certain\nmetrics. For a simple demonstration we\u2019ll just fetch items from the products and\ncategories table respectively.\n\nHere\u2019s the home page\u2019s[ loader ](https://remix.run/docs/en/1.18.1/route/loader)function.\n\n```\nexport   const  loader :   LoaderFunction   =   async   ( {  context  } :   LoaderArgs )   =>   {\n   const  db  =   buildDbClient ( context ) ;\n   const  featuredProducts  =   await  db . query . products . findMany ( {\n    columns :   {\n      description :   false ,\n      categoryId :   false ,\n     } ,\n   } ) ;\n   const  featuredCategories  =   await  db . query . categories . findMany ( ) ;\n   return   {\n    featuredProducts :  featuredProducts  as   unknown   as   Product [ ] ,\n    featuredCategories :  featuredCategories  as   unknown   as   Category [ ] ,\n   } ;\n} ;\n```\n\nWe are going to present products using independent cards, hence, add a `Product.tsx` component under `app/components` with the following code.\n\n```\nimport   {  resizeImage  }   from   \"~/lib/utils\" ;\nimport   type   {   Product   }   from   \"~/lib/types\" ;\nexport   interface   ProductCardProps   {\n  product :   Product ;\n}\nexport   const   ProductCard   =   ( props :   ProductCardProps )   =>   {\n   return   (\n     < div   className = \" group relative block overflow-hidden \" >\n       < a\n         href = { ` /mug/ ${ props . product . id } ` }\n         className = \" group relative block overflow-hidden \"\n       >\n         < img\n           src = { resizeImage ( props . product . image ,   400 ,   320 ) }\n           alt = \" \"\n           className = \" h-64 w-full object-cover transition duration-500 group-hover:scale-105 sm:h-72 \"\n         />\n       </ a >\n       < div   className = \" relative border border-gray-100 bg-white py-2 \" >\n         < a\n           href = { ` /mug/ ${ props . product . id } ` }\n           className = \" group relative block overflow-hidden \"\n         >\n           < h3   className = \" mt-4 text-lg text-gray-900 \" > { props . product . name } </ h3 >\n         </ a >\n         < p   className = \" mt-1.5 text-sm text-gray-700 \" > $ { props . product . price } </ p >\n       </ div >\n     </ div >\n   ) ;\n} ;\n```\n\nHere is the code to the `resizeImage()` function imported into the product card\ncomponent.\n\n```\nexport   function   resizeImage ( url :   string ,  height :   number ,  width :   number )   {\n   return  url . replace ( / \\/v[0-9]+ / ,   ` /c_lfill,g_center,h_ ${ height } ,w_ ${ width } ` ) ;\n}\n```\n\nThis utility function placed inside the `app/lib/utils.ts` file simply modifies\nthe dimensions of the image to be displayed\n\nWe can then use the product card to list products throughout the website.\n\nHaving added a loader to our home page, we can then consume the data from it\ninside the page component by adding the following line of code before the page\u2019s\nmarkup.\n\n```\nexport   default   function   Index ( )   {\n   const   {  featuredCategories ,  featuredProducts  }   =\n     useLoaderData < typeof  loader > ( ) ;\n   return   ( ) ;   // markup\n}\n```\n\nFinally, update the page\u2019s markup laying out the product and categories\nsections.\n\n```\n< div   className = \" flex flex-col space-x-4 space-y-4 px-4 \" >\n   < h3   className = \" font-semibold \" > Featured Products </ h3 >\n   { featuredProducts . length   ?   (\n     < ul   className = \" mt-4 grid gap-5 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 \" >\n       { featuredProducts . map ( ( product :   Product )   =>   (\n         < ProductCard   { ... {  product  } }   key = { product . id }   />\n       ) ) }\n     </ ul >\n   )   :   (\n     < div   className = \" p-4 flex justify-center \" >\n      There are no available products, please check back later!\n     </ div >\n   ) }\n</ div >\n```\n\nIn the above markup, we are only showing the markup responsible for listing the\nfeatured products.[ Open the file on GitHub ](https://github.com/turso-extended/app-the-mug-store/blob/master/app/routes/_index.tsx)to see all of the code.\n\nBy the end of these changes, the home page should look like this.\n\nImage: [ Home page with a featured products section ](https://docs.turso.tech/assets/images/06-home-page-preview-b7c12020168a0dbe70aabaa9fcbf201e.png)\n\nImage: [ Home page with a featured products section ](https://docs.turso.tech/assets/images/06-home-page-preview-b7c12020168a0dbe70aabaa9fcbf201e.png)\n\n## The product listing page\u200b\n\nInside the mugs page `/mugs` we will be listing all of the products within the\napp\u2019s database, breaking down pages using a fixed item count, in this case 20\nitems per page. Add the following environment variable inside `wrangler.toml` to\nset this up.\n\n`ITEMS_PER_PAGE = 20`\n\nFor the page\u2019s pagination, create the dedicated component for that feature by\nadding a `Pagination.tsx` file under `app/components` , add the code found within\nthis file into it.\n\nCreate the mugs page by adding a `mugs.($pageNum).tsx` file under `/app/routes` .\n\nWithin the mugs page loader function, we are first getting the count of all\nitems that exist within our database, then use that number to determine the\ntotal number of pages that our data can be grouped into, finally, we return the\nitems that are expected to be shown within the requested page by checking the\npage number `pageNum` param passed in the url.\n\n```\nexport   const  loader :   LoaderFunction   =   async   ( {\n  params ,\n  context ,\n} :   LoaderArgs )   =>   {\n   const  db  =   buildDbClient ( context ) ;\n   const   {  pageNum  }   =  params ;\n   const  allProducts  =   await  db . query . products . findMany ( {\n    columns :   {\n      name :   true ,\n     } ,\n   } ) ;\n   const  itemsCount  =  allProducts . length ;\n   const  itemsPerPage  =  context . env ?. ITEMS_PER_PAGE   ||   20 ;\n   const  totalPages  =   Math . ceil ( ( itemsCount  as   number )   /  itemsPerPage ) ;\n   let  currentPage  =   1 ,\n    offset  =   0 ;\n   if   ( pageNum  !==   undefined )   {\n    currentPage  =   parseInt ( pageNum ) ;\n    offset  =  currentPage  ===   1   ?   0   :   ( currentPage  -   1 )   *  itemsPerPage ;\n   }\n   const  products  =   await  db . query . products . findMany ( {\n    offset :  offset ,\n    limit :  itemsPerPage ,\n   } ) ;\n   return   {\n    products :  products  as   unknown   as   Product [ ] ,\n    pageInfo :   {\n      currentPage ,\n      totalPages ,\n     } ,\n   } ;\n} ;\n```\n\nFinally, get the products and pagination data from the loader and list the\nproducts within the page\u2019s UI with the pagination component at the bottom.\n\n```\nexport   default   function   Mugs ( )   {\n   const   {  products ,  pageInfo  }   =   useLoaderData < typeof  loader > ( ) ;\n   return   (\n     < >\n       { ! products . length   ?   (\n         < div   className = \" p-8 flex justify-center \" >\n          There are no available products, please check back later!\n         </ div >\n       )   :   (\n         < section >\n           < div   className = \" mx-auto max-w-screen-xl px-4 py-8 sm:px-6 sm:py-12 lg:px-8 \" >\n            <!-- other elements -->\n             < ul   className = \" mt-4 grid gap-5 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 \" >\n               { products  &&  products . length   ?   (\n                products . map ( ( product :   Product )   =>   (\n                   < ProductCard   { ... {  product  } }   key = { product . id }   />\n                 ) )\n               )   :   (\n                 < div   className = \" p-8 \" > No items </ div >\n               ) }\n             </ ul >\n             < Pagination   { ... pageInfo }   />\n           </ div >\n         </ section >\n       ) }\n     </ >\n   ) ;\n}\n```\n\nHere is a presentation of the mugs page with `ITEMS_PER_PAGE` set to 4.\n\nImage: [ Mugs page preview with four items per page ](https://docs.turso.tech/assets/images/07-mugs-page-preview-621a81d4c1a28d0ed7496c786521a309.png)\n\nImage: [ Mugs page preview with four items per page ](https://docs.turso.tech/assets/images/07-mugs-page-preview-621a81d4c1a28d0ed7496c786521a309.png)\n\nNext, well look into authenticating users so that they can use\nthe store's guarded features.\n\n- [ The home page ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-04-listing-products/#the-home-page)\n- [ The product listing page ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-04-listing-products/#the-product-listing-page)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-05-user-authentication": "# Step 5: User authentication\n\nAll user related features such as the cart and addition of items into it,\nplacing orders, and checking-out to be added into our Mugs Store app will be\nguarded behind an authentication wall. Let\u2019s implement user authentication\nwithin the app before proceeding to working on these features.\n\nWe are going to use cookie-based sessions for user authentication within the app\nand luckily Remix provides us the `createCookieSessionStorage` helper just for\nthis.\n\nCreate a `session.ts` file inside `/app` and add the following code into it.\n\n```\nimport   {\n  AppLoadContext ,\n  createCookieSessionStorage ,\n}   from   \"@remix-run/cloudflare\" ;\ntype   SessionData   =   {\n  userId :   string ;\n} ;\ntype   SessionFlashData   =   {\n  error :   string ;\n} ;\nexport   function   cookieSessionCreation ( context :  AppLoadContext )   {\n   const   {  getSession ,  commitSession ,  destroySession  }   =\n     createCookieSessionStorage < SessionData ,  SessionFlashData > ( {\n       // a Cookie from `createCookie` or the CookieOptions to create one\n      cookie :   {\n        name :   \"__session\" ,\n        httpOnly :   true ,\n        maxAge :   7   *   60   *   60 ,\n        path :   \"/\" ,\n        sameSite :   \"lax\" ,\n        secrets :   [ context . env ?. SESSION_SECRET ] ,\n        secure :   true ,\n       } ,\n     } ) ;\n   return   {  getSession ,  commitSession ,  destroySession  } ;\n}\n```\n\nThe `createCookieSessionStorage` function provides us with utility functions that\nenable us to manage cookie sessions within our Remix app. For the `SESSION_SECRET` we are using a randomly generated string which we then store as a secret\nenvironment variable just as we did with the database auth token previously.\n\nThe next step would be the addition of the registration and login pages. Start\nby creating two files `account.login.tsx` and `account.register.tsx` inside the `app/routes` directory.\n\nWe are going to hash user passwords before storing them to our database using\nbcrypt, hence, install the `bcrypt` npm package to our app by running the\nfollowing command.\n\n`npm install bcryptjs`\n\n## User registration\u200b\n\nWithin the[ user registration page ](https://github.com/turso-extended/app-the-mug-store/blob/master/app/routes/account.register.tsx) `/account.login.tsx` we\u2019ll simply be submitting\nuser information to a page action that takes care of form data validation,\nstorage of the data to the database, and redirection of the user to the login\npage when correct information is provided, otherwise it will give us an error\nmessage.\n\nCreate a dedicated utility file that will handle the session logic for the user\nauthentication flow within our app. Name the file `session.server.ts` and place it\nunder `app/lib` .\n\nWithin this file, we\u2019ll add the user registration function[ register() ](https://github.com/turso-extended/app-the-mug-store/blob/master/app/lib/session.server.ts#L50-L117)that\nvalidates the user data being submitted to the database via the registration\npage action and creates new records or returns coherent error messages back to\nthe registration page.\n\nThen, import and use the `register()` function[ within the page action ](https://github.com/turso-extended/app-the-mug-store/blob/master/app/routes/account.register.tsx#L12).\n\nYou can view all of the user registration page code[ on GitHub ](https://github.com/turso-extended/app-the-mug-store/blob/master/app/routes/account.register.tsx).\n\n## Authenticating users\u200b\n\nTo authenticate users, add a `login()` function inside the `app/lib/session.server.ts` file which will handle the assessment of the user\u2019s\nauth credentials submitted through the login page form and the initialization of\nan authenticated session.\n\nHere\u2019s the code for the `login()` function.\n\n```\nexport   interface   LoginCredentials   {\n  email :   string ;\n  password :   string ;\n}\nexport   async   function   login (\n   {  email ,  password  } :  LoginCredentials ,\n  serverContext :  AppLoadContext\n)   {\n   const  db  =   buildDbClient ( serverContext ) ;\n   const  user  =   await  db . query . users . findFirst ( {\n     where :   ( users ,   {  eq  } )   =>   eq ( users . email ,  email ) ,\n     with :   {\n      password :   true ,\n     } ,\n   } ) ;\n   if   ( user  !==   undefined )   {\n     const  isValidPassword  =  bcrypt . compareSync (\n      password ,\n      user . password . hash\n     ) ;\n     return   ! isValidPassword  ?   null   :  user ;\n   }\n   return   null ;\n}\n```\n\nNext, create another utility function that will handle the creation of a\nsuccessfully authenticated user\u2019s session leveraging the `cookieSessionCreation()` helper we created earlier. Add the following function\ninside the `app/lib/session.server.ts` file.\n\n```\nexport   async   function   createUserSession (\n  userId :   string ,\n  redirectUrl :   string ,\n  serverContext :  AppLoadContext\n)   {\n   const   {  getSession ,  commitSession  }   =   cookieSessionCreation ( serverContext ) ;\n   const  session  =   await   getSession ( ) ;\n  session . set ( \"userId\" ,  userId ) ;\n   return   redirect ( redirectUrl ,   {\n    headers :   {\n       \"Set-Cookie\" :   await   commitSession ( session ) ,\n     } ,\n   } ) ;\n}\n```\n\nWe can then import and use these two functions within[ the login page\u2019s action ](https://github.com/turso-extended/app-the-mug-store/blob/master/app/routes/account.login.tsx#L13)as follows to fully implement user authentication.\n\n```\nconst  user  =   await   login ( values  as   unknown   as  LoginCredentials ,  context ) ;\nif   ( ! user )\n   return   json (\n     {  ok :   false ,  message :   \"Wrong credentials!\"   } ,\n     {  status :   400 ,  statusText :   \"Wrong credentials!\"   }\n   ) ;\nreturn   createUserSession ( user . id ,   \"/account/dashboard\" ,  context ) ;\n```\n\nThen, inside the page component we can initiate a new[ Fetcher ](https://remix.run/docs/en/1.18.1/hooks/use-fetcher)and create a\nlogin form as follows.\n\n```\nconst  loginFetcher  =   useFetcher ( ) ;\nreturn   (\n   < loginFetcher.Form   method = \" post \" >\n     < div >\n       < input   name = \" email \"   type = \" email \"   required   />\n     </ div >\n     < div >\n       < input   name = \" password \"   type = \" password \"   required   />\n     </ div >\n     < div >\n       < button   type = \" submit \" >  Sign in  </ button >\n     </ div >\n     < div   className = \" py-2 \" >\n       < a   href = \" /account/register \"   className = \" font-thin \" >\n        Create an account\n       </ a >\n     </ div >\n   </ loginFetcher.Form >\n) ;\n```\n\nYou can view the complete login page code on GitHub.\n\n## Adding authentication page guards\u200b\n\nSince the pages we are going to add next need authenticated user access, we\u2019ll\nneed to redirect any unauthenticated access attempts to the log-in page. Create\na `requireUseId()` function inside `lib/session.server.ts` that will check to\nsee if an authenticated session exists, if not it will redirect the user to the\nlog-in page.\n\n```\nexport   async   function   requireUserId (\n   {\n    request ,\n    redirectTo  =   new   URL ( request . url ) . pathname ,\n   } :   {\n    request :  Request ;\n    redirectTo ? :   string ;\n   } ,\n  serverContext :  AppLoadContext\n)   {\n   const   {  getSession  }   =   cookieSessionCreation ( serverContext ) ;\n   const  session  =   await   getSession ( request . headers . get ( \"Cookie\" ) ) ;\n   const  userId  =  session . get ( \"userId\" ) ;\n   if   ( ! userId )   {\n     const  searchParams  =   new   URLSearchParams ( [ [ \"redirectTo\" ,  redirectTo ] ] ) ;\n     redirect ( ` /account/login? ${ searchParams } ` ) ;\n   }\n   return  userId ;\n}\n```\n\nWe can then import and call this function at the top of the loader functions of\nall the pages we want to guard against unauthorized access.\n\n```\nimport   {  requireUserId  }   from   \"~/lib/session.server\" ;\nexport   async   function   loader ( {  request ,  context  } :   LoaderArgs ) :   Promise < any >   {\n   const  db  =   buildDbClient ( context ) ;\n   const  userId  =   await   requireUserId (\n     {  request ,  redirectTo :   \"/account/login\"   } ,\n    context\n   ) ;\n   if   ( userId  ===   undefined )   {\n     return   redirect ( \"/account/login\" ) ;\n   }   else   {\n     // The rest of the page's loader logic\n   }\n}\n```\n\n## The user dashboard and logging out\u200b\n\nWe are going to add a user dashboard where at the very minimum the user's order\nhistory will be listed.\n\nAlso, we need to be able to log the authenticated users out of our app, and we\nare going to implement this feature right in the dashboard page.\n\nSince we\u2019ve set up Drizzle schema relations, getting the orders based on a user\nis a very easy task, all we need to do is perform a[ findFirst ](https://orm.drizzle.team/docs/rqb#find-first)query on the\nusers table listing the users orders in the returned data.\n\nCreate an `accounts.dashboard.tsx` page inside `app/routes` and within the\npage\u2019s loader, query and return the user\u2019s details as follows.\n\n```\nconst  user  =   await  db . query . users . findFirst ( {\n   where :   ( users ,   {  eq  } )   =>   eq ( users . id ,  userId ) ,\n   with :   {\n    orders :   true ,\n   } ,\n} ) ;\nreturn   {  user  } ;\n```\n\nWe can then get this data in the dashboard page component and list the user\u2019s\norders as follows.\n\n```\nconst   {  user  }   =   useLoaderData < typeof  loader > ( ) ;\nreturn   (\n     < table >\n       < thead >\n       < th > Date </ th >  th>Total Cost </ th >   < th > Shipping to </ th >\n       </ thead >\n       < tbody >\n         { user . orders . map ( ( order :   Order )   =>   (\n           < tr   key = { order . id } >\n             < td >\n               { formatDate ( order . orders . createdAt ) }\n             </ td >\n             < td >\n               { order . orders . finalAmount } $\n             </ td >\n             < td >\n               { order . orders . shippingAddress }\n             </ td >\n           </ tr >\n         ) ) }\n       </ tbody >\n     </ table >\n)\n```\n\nThe `formatDate()` function called in the above code is simply a date formatting\nutility function exported from the `app/lib/utils.ts` .\n\n```\nexport   function   formatDate ( date :   number )   {\n   const  day  =   new   Date ( date  *   1000 ) ;\n   const  formattedDate  =  Intl . DateTimeFormat ( \"en-US\" ,   {\n    day :   \"numeric\" ,\n    month :   \"short\" ,\n    year :   \"numeric\" ,\n   } ) . format ( day ) ;\n   return  formattedDate ;\n}\n```\n\nTo log users out, add the following page action to `account.dashboard.tsx` file.\n\n```\nexport   const  action :   ActionFunction   =   async   ( {\n  request ,\n  context ,\n} :   ActionArgs )   =>   {\n   const  userId  =   await   requireUserId (\n     {  request ,  redirectTo :   \"/account/login\"   } ,\n    context\n   ) ;\n   if   ( userId  !==   undefined )   {\n     return   destroyUserSession ( userId ,   \"/account/login\" ,  context ) ;\n   }\n} ;\n```\n\nWithin this loader function, we are simply destroying the previously created\nuser authenticated session.\n\nAdd a fetcher form to trigger this action inside the page.\n\n```\nconst  logOutFetcher  =   useFetcher ( ) ;\nreturn   (\n   < ! --  other markup  -- >\n     < logOutFetcher . Form method = \"post\" >\n       < button type = \"submit\"  className = \"p-3\" > Log Out < / button >\n     < / logOutFetcher . Form >\n   < ! --  other markup  -- >\n)\n```\n\nCreate some users to test this part of the website and verify if everything\nworks.\n\nHere is what the user dashboard should look like when opened after a user is\nauthenticated.\n\nImage: [ Preview of the user dashboard ](https://docs.turso.tech/assets/images/08-user-dashboard-preview-9a981aacccb88b921e0d7e5178e885bc.png)\n\nImage: [ Preview of the user dashboard ](https://docs.turso.tech/assets/images/08-user-dashboard-preview-9a981aacccb88b921e0d7e5178e885bc.png)\n\nAfter having set up user authentication we can then proceed to adding the pages\nand features that are dependent on it.\n\n- [ User registration ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-05-user-authentication/#user-registration)\n- [ Authenticating users ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-05-user-authentication/#authenticating-users)\n- [ Adding authentication page guards ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-05-user-authentication/#adding-authentication-page-guards)\n- [ The user dashboard and logging out ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-05-user-authentication/#the-user-dashboard-and-logging-out)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-06-shopping-cart": "# Step 6: Adding the shopping cart\n\nLet\u2019s implement the cart for the Mug Store app so that users can hold items that\nthey would like to finally purchase.\n\nAll the items that a user adds to the cart are stored in the `cartItems` table\ninside our Turso database, this is a good practice since the user can resume\ntheir shopping session even when they hop onto another device.\n\nStart off by creating a cart page `cart._index.tsx` file inside the routes\ndirectory.\n\nThe Drizzle query that we\u2019ll need to run on the loader function of this page is\nas follows.\n\n```\nconst  cartItems  =   await  db . query . cartItems . findMany ( {\n   where :   ( cartItems ,   {  eq  } )   =>   eq ( cartItems . userId ,  userId ) ,\n  columns :   {\n    count :   true ,\n    id :   true ,\n   } ,\n   with :   {\n    product :   true ,\n   } ,\n} ) ;\n```\n\nThen on the page component, get the loader data and list the cart items.\n\n```\n< div   className = \" flex flex-col space-y-4 \" >\n   { cartData . cartItems . length   ?   (\n    cartData . cartItems ?. map ( ( item :   CartItem )   =>   (\n       < CartPageItem   key = { item . id }   { ... item }   />\n     ) )\n   )   :   (\n     < div   className = \" flex w-full items-center p-4 gap-4 \" >\n      Your cart is empty, continue shopping!\n     </ div >\n   ) }\n</ div >\n```\n\nHere is the `<CartPageItem>` component we are using to list items within the\ncart.\n\n```\nimport   {  useFetcher  }   from   \"@remix-run/react\" ;\nimport   type   {   CartItem   }   from   \"~/lib/types\" ;\nexport   const   CartPageItem   =   ( props :   CartItem )   =>   {\n   const  itemFetcher  =   useFetcher ( ) ;\n   return   (\n     < div   className = \" flex w-full p-4 gap-4 \" >\n       < div >\n         < img\n           src = { props . product . image   ||   \"Default image url\" }\n           alt = \" \"\n           className = \" h-64 w-64 rounded object-cover \"\n         />\n       </ div >\n       < div   className = \" flex-1 flex flex-col justify-start \" >\n         < h3   className = \" text-gray-900 \" >\n           < a   href = { ` /product/ ${ props . product . id } ` } > { props . product . name } </ a >\n           < strong > x( { props . count } ) </ strong >\n         </ h3 >\n         < div   className = \" px-2 py-4 font-semibold \" >\n          $ { ( props . product . price   *  props . count ) . toFixed ( 2 ) }\n         </ div >\n         < p   className = \" mt-0.5 space-y-px text-gray-600 \" >\n           { props . product . description }\n         </ p >\n       </ div >\n       < div >\n         < itemFetcher.Form   method = \" post \"   action = \" /manage-cart \" >\n           < input   type = \" hidden \"   name = \" product_id \"   value = { props . product . id }   />\n           < button\n             className = \" p-1 rounded bg-red-600 text-white \"\n             name = \" _action \"\n             value = \" deleteCartItem \"\n           >\n             { ( itemFetcher . state   ===   \"submitting\"   ||\n              itemFetcher . state   ===   \"loading\" )   &&\n            itemFetcher . formData ?. get ( \"product_id\" )   ===  props . product . id   ?   (\n               < span   className = \" flex justify-center \" >\n                 < svg\n                   xmlns = \" http://www.w3.org/2000/svg \"\n                   viewBox = \" 0 0 24 24 \"\n                   className = \" animate-spin text-white w-4 h-4 fill-white \"\n                 >\n                   < path   d = \" M5.46257 4.43262C7.21556 2.91688 9.5007 2 12 2C17.5228 2 22 6.47715 22 12C22 14.1361 21.3302 16.1158 20.1892 17.7406L17 12H20C20 7.58172 16.4183 4 12 4C9.84982 4 7.89777 4.84827 6.46023 6.22842L5.46257 4.43262ZM18.5374 19.5674C16.7844 21.0831 14.4993 22 12 22C6.47715 22 2 17.5228 2 12C2 9.86386 2.66979 7.88416 3.8108 6.25944L7 12H4C4 16.4183 7.58172 20 12 20C14.1502 20 16.1022 19.1517 17.5398 17.7716L18.5374 19.5674Z \" > </ path >\n                 </ svg >\n               </ span >\n             )   :   (\n               < svg\n                 className = \" h-4 w-4 fill-white \"\n                 xmlns = \" http://www.w3.org/2000/svg \"\n                 viewBox = \" 0 0 24 24 \"\n               >\n                 < path   d = \" M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z \" > </ path >\n               </ svg >\n             ) }\n           </ button >\n         </ itemFetcher.Form >\n       </ div >\n     </ div >\n   ) ;\n} ;\n```\n\n## The mini-cart\u200b\n\nIt is also a good practice to make the cart accessible from all points within an\ne-commerce website, we will do so by adding a mini-cart that can be accessed\nfrom the navigation bar.\n\nIn the first section of this tutorial we added a placeholder for the space that\nthe cart component was going to reside, we are going to make use of this space.\nAdd a new `Cart.tsx` component inside `app/components` and paste the following\ncode into it.\n\n```\nimport   {  useEffect ,  useState  }   from   \"react\" ;\nimport   {  useFetcher  }   from   \"@remix-run/react\" ;\nimport   type   {   CartItem   }   from   \"~/lib/types\" ;\nimport   {   CartIcon   }   from   \"./Icon\" ;\nimport   {   CartListItem   }   from   \"./CartListItem\" ;\nexport   const   Cart   =   ( )   =>   {\n   const  cartItemsFetcher  =   useFetcher ( ) ;\n   const   [ showCart ,  setShowCart ]   =   useState ( false ) ;\n   const   toggleCart   =   ( )   =>   {\n     setShowCart ( ( s )   =>   ! s ) ;\n   } ;\n   useEffect ( ( )   =>   {\n    cartItemsFetcher . submit (\n       { } ,\n       {\n        action :   \"/manage-cart\" ,\n        method :   \"get\" ,\n       }\n     ) ;\n   } ,   [ ] ) ;\n   return   (\n     < div   className = \" relative z-40 \" >\n       < button   className = \" flex space-x-1 items-center \"   onClick = { toggleCart } >\n         < CartIcon   color = \" #4ff8d2 \"   />\n         < span   className = \" bg-secondary-400 text-black rounded-full p-1 h-5 w-5 flex items-center justify-center font-semibold \" >\n           { cartItemsFetcher . data   &&  cartItemsFetcher . data . cartItems\n             ?  cartItemsFetcher . data . cartItems . length\n             :   0 }\n         </ span >\n       </ button >\n       { showCart  &&   (\n         < div   className = \" fixed top-14 right-2 z-10 max-h[90vh] \" >\n           < div\n             className = \" relative w-screen max-w-sm border border-gray-600 bg-gray-100 px-4 py-8 sm:px-6 lg:px-8 drop-shadow-md \"\n             aria-modal = \" true \"\n             role = \" dialog \"\n             tabIndex = { - 1 }\n           >\n             < button\n               className = \" absolute end-4 top-4 text-gray-600 transition hover:scale-110 \"\n               onClick = { toggleCart }\n             >\n               < span   className = \" sr-only \" > Close cart </ span >\n               < svg\n                 xmlns = \" http://www.w3.org/2000/svg \"\n                 fill = \" none \"\n                 viewBox = \" 0 0 24 24 \"\n                 strokeWidth = \" 1.5 \"\n                 stroke = \" currentColor \"\n                 className = \" h-5 w-5 \"\n               >\n                 < path\n                   strokeLinecap = \" round \"\n                   strokeLinejoin = \" round \"\n                   d = \" M6 18L18 6M6 6l12 12 \"\n                 />\n               </ svg >\n             </ button >\n             < div   className = \" mt-4 space-y-6 \" >\n               < div   className = \" flex flex-col space-y-4 \" >\n                 { cartItemsFetcher . data   &&\n                cartItemsFetcher . data . cartItems   &&\n                cartItemsFetcher . data . cartItems . length   ?   (\n                  cartItemsFetcher . data . cartItems . map ( ( item :   CartItem )   =>   (\n                     < div   key = { item . id }   className = \" max-h-[80vh] overflow-y-auto \" >\n                       < CartListItem   { ... item }   />\n                     </ div >\n                   ) )\n                 )   :   (\n                   < div   className = \" flex w-full items-center p-4 gap-4 \" >\n                    Your cart is empty, continue shopping!\n                   </ div >\n                 ) }\n               </ div >\n               < div   className = \" space-y-4 text-center \" >\n                 < a\n                   href = \" /cart \"\n                   className = \" block rounded border border-gray-600 px-5 py-3 transition hover:ring-1 hover:ring-gray-400 \"\n                 >\n                   < span   className = \" text-sm text-tertiary-800 font-semibold \" >\n                    View my cart (\n                     { cartItemsFetcher . data   &&  cartItemsFetcher . data . cartItems\n                       ?  cartItemsFetcher . data . cartItems . length\n                       :   0 }\n                    )\n                   </ span >\n                 </ a >\n                 < a\n                   href = \" /checkout \"\n                   className = \" block rounded bg-gray-700 px-5 py-3 text-sm text-gray-100 transition hover:bg-gray-600 \"\n                 >\n                  Checkout\n                 </ a >\n                 < a   href = \" / \"   className = \" inline-block text-sm \" >\n                   < span   className = \" text-gray-500 underline underline-offset-4 transition hover:text-gray-600 \" >\n                    Continue shopping\n                   </ span >\n                 </ a >\n               </ div >\n             </ div >\n           </ div >\n         </ div >\n       ) }\n     </ div >\n   ) ;\n} ;\n```\n\nWe can now replace the placeholder text \"CART_ICON\" we used previously within\nthe `<Header />` component with the `<Cart />` component.\n\nInside the cart component we use state to toggle the mini-cart component into\nand out of view. The rest of the component\u2019s logic will be covered in the\nsection that follows.\n\nObserving the cart component\u2019s code, you should see that we are using another\ncomponent `<CartListItem />` . Add this component to the project by creating a\nCartListItem.tsx file inside the components directory, and paste the following\ncode into it.\n\n```\nimport   {  useFetcher  }   from   \"@remix-run/react\" ;\nimport   type   {   CartItem   }   from   \"~/lib/types\" ;\nimport   {   DeleteIcon ,   LoadingIcon   }   from   \"./Icon\" ;\nimport   {  resizeImage  }   from   \"~/lib/utils\" ;\nexport   const   CartListItem   =   ( props :   CartItem )   =>   {\n   const  itemFetcher  =   useFetcher ( ) ;\n   return   (\n     < div   className = \" flex w-full items-center p-4 gap-4 \" >\n       < img\n         src = { resizeImage ( props . product . image ,   50 ,   50 ) }\n         alt = \" \"\n         className = \" h-16 w-16 rounded object-cover \"\n       />\n       < div   className = \"  flex-1 \" >\n         < h3   className = \" text-sm text-gray-900 \" >\n           { props . product . name }   < strong > x( { props . count } ) </ strong >\n         </ h3 >\n       </ div >\n       < div >\n         < itemFetcher.Form   method = \" post \"   action = \" /manage-cart \" >\n           < input   type = \" hidden \"   name = \" product_id \"   value = { props . product . id }   />\n           < button\n             className = \" p-1 rounded bg-red-600 text-white \"\n             name = \" _action \"\n             value = \" deleteCartItem \"\n           >\n             { ( itemFetcher . state   ===   \"submitting\"   ||\n              itemFetcher . state   ===   \"loading\" )   &&\n            itemFetcher . formData ?. get ( \"product_id\" )   ===  props . product . id   ?   (\n               < span   className = \" flex justify-center \" >\n                 < LoadingIcon   />\n               </ span >\n             )   :   (\n               < DeleteIcon   />\n             ) }\n           </ button >\n         </ itemFetcher.Form >\n       </ div >\n     </ div >\n   ) ;\n} ;\n```\n\nWe\u2019ll also talk more about this component in the next section.\n\n## Managing cart items\u200b\n\nSince cart management can be done from different points within the app (the cart\npage, mini-cart component, checkout page), let\u2019s create a[ Remix resource route ](https://remix.run/docs/en/1.18.1/guides/api-routes#resource-routes)that will handle some CRUD requests to our database concerning cart items.\n\nAdd a Remix resource route file `manage-cart.ts` under `app/routes` and inside it\npaste the following code.\n\n```\nimport   {  v4  as  uuidv4  }   from   \"uuid\" ;\nimport   {\n   type   ActionArgs ,\n   type   LoaderArgs ,\n  json ,\n  redirect ,\n}   from   \"@remix-run/cloudflare\" ;\nimport   {  and ,  eq  }   from   \"drizzle-orm\" ;\nimport   {  cartItems  }   from   \"drizzle/schema\" ;\nimport   {  requireUserId  }   from   \"~/lib/session.server\" ;\nimport   {  buildDbClient  }   from   \"~/lib/client\" ;\nexport   async   function   loader ( {  request ,  context  } :  LoaderArgs )   {\n   const  db  =   buildDbClient ( context ) ;\n   const  userId  =   await   requireUserId (\n     {  request ,  redirectTo :   \"/account/login\"   } ,\n    context\n   ) ;\n   if   ( ! userId )   {\n     return   {\n      cartItems :   [ ] ,\n     } ;\n   }\n   const  cartItems  =   await  db . query . cartItems . findMany ( {\n     where :   ( cartItems ,   {  eq  } )   =>   eq ( cartItems . userId ,  userId ) ,\n    columns :   {\n      count :   true ,\n      id :   true ,\n     } ,\n     with :   {\n      product :   true ,\n     } ,\n   } ) ;\n   return   {\n    cartItems ,\n   } ;\n}\nexport   async   function   action ( {  request ,  context  } :  ActionArgs ) :   Promise < Promise < TypedResponse < never >   |  TypedResponse  |   null >   {\n   const  formData  =   await  request . formData ( ) ;\n   const   {  _action ,   ... values  }   =  Object . fromEntries ( formData ) ;\n   const  userId  =   await   requireUserId (\n     {  request ,  redirectTo :   \"/account/login\"   } ,\n    context\n   ) ;\n   if   ( userId  ===   undefined )   {\n     const  searchParams  =   new   URLSearchParams ( [\n       [ \"error\" ,   \"Log in to add items to cart\" ] ,\n     ] ) ;\n     return   redirect ( ` /account/login? ${ searchParams } ` ) ;\n   }\n   const  productId  =  values . product_id  as   string ;\n   const  quantity  =  values . quantity ;\n   const  db  =   buildDbClient ( context ) ;\n   if   ( _action  ===   \"addToCart\" )   {\n     const  cartItem  =   await  db . query . cartItems . findFirst ( {\n       where :   ( cartItems ,   {  eq ,  and  } )   =>\n         and ( eq ( cartItems . productId ,  productId ) ,   eq ( cartItems . userId ,  userId ) ) ,\n     } ) ;\n     if   ( cartItem )   {\n       const  append  =   await  db\n         . update ( cartItems )\n         . set ( {  count :  cartItem . count  +   1   } )\n         . where (\n           and ( eq ( cartItems . productId ,  productId ) ,   eq ( cartItems . userId ,  userId ) )\n         )\n         . returning ( )\n         . get ( ) ;\n       return   json ( append ) ;\n     }   else   {\n       const  id  =   uuidv4 ( ) ;\n       const  cartInsertionResponse  =   await  db\n         . insert ( cartItems )\n         . values ( {\n          id ,\n          productId ,\n          userId ,\n          count :   ( quantity  ||   1 )   as   number ,\n         } )\n         . returning ( )\n         . get ( ) ;\n       return   json ( cartInsertionResponse ) ;\n     }\n   }\n   if   ( _action  ===   \"deleteCartItem\" )   {\n     const  deleted  =   await  db\n       . delete ( cartItems )\n       . where ( eq ( cartItems . productId ,  productId ) )\n       . returning ( )\n       . get ( ) ;\n     return   json ( deleted ) ;\n   }\n   return   null ;\n}\n```\n\nIn the `manage-cart.ts` resource route, you\u2019ll find a loader function that\nqueries our Turso database and returns the cart items belonging to the\nauthenticated user.\n\nIn the mini-cart component, you can see a `cartItemsFetcher` which is updated\nwhenever changes are detected in our app by leveraging the `useEffect` hook. It\nconsumes the data from the loader within the `manage-cart.ts` resource route and\nupdates the listed cart items.\n\nFor cart items management, the action function set within the resource route\nhandles such requests. This action handles cart item data addition,\nmodification, and deletion.\n\nAfter having added this resource route, we can proceed to creating the\ncomponents that expose its functionalities to the user.\n\n### Adding items to the cart\u200b\n\nLet's implement the feature that adds items to the cart inside the product\ndetails page. Create the product details it by adding a `mug.$id.tsx` file under\nthe routes directory. In this page, we first check whether a product id `$id` has been passed as a route parameter within the page's URL, we then check if a\nproduct with that id exists inside the database, if not we throw a 404 error,\nelse we pass the product's date to the page component.\n\nHere is the code to the loader function within the product details page.\n\n```\nexport   const  loader :   LoaderFunction   =   async   ( {\n  params ,\n  context ,\n} :   LoaderArgs )   =>   {\n   const  db  =   buildDbClient ( context ) ;\n   const   {  id  }   =  params ;\n   if   ( ! id )   {\n     throw   new   Response ( \"Not Found\" ,   {\n      status :   404 ,\n      statusText :   \"Product id not found!\" ,\n     } ) ;\n   }\n   const  product  =   await  db\n     . select ( )\n     . from ( products )\n     . where ( eq ( products . id ,  id ) )\n     . get ( ) ;\n   if   ( ! product )   {\n     throw   new   Response ( \"Not Found\" ,   {\n      status :   404 ,\n      statusText :   \"Product not found!\" ,\n     } ) ;\n   }\n   return   {\n    product :  product  as   unknown   as   Product ,\n   } ;\n} ;\n```\n\nHere is the page's component code with the markup of the form that's responsible\nfor triggering the action that add's an item to the cart.\n\n```\nexport   default   function   ( )   {\n   const  pageData  =   useLoaderData < typeof  loader > ( ) ;\n   const  triggerAction  =   useFetcher ( ) ;\n   return   (\n     < >\n    <!-- Other markup -->\n       < triggerAction.Form\n         method = \" post \"\n         action = \" /manage-cart \"\n         className = \" pt-8 \"\n       >\n         < input\n           type = \" hidden \"\n           name = \" product_id \"\n           value = { pageData . product . id }\n         />\n         < button\n           className = {\n             ( triggerAction . state   ===   \"submitting\"   ||\n              triggerAction . state   ===   \"loading\" )   &&\n              triggerAction . formData ?. get ( \"product_id\" )   ===\n              pageData . product . id   &&\n              triggerAction . formData ?. get ( \"_action\" )   ===   \"addToCart\"\n               ?   ` block w-full rounded bg-yellow-600 p-4 text-sm font-medium hover:bg-yellow-700 `\n               :   ` block w-full rounded bg-yellow-400 p-4 text-sm font-medium hover:bg-yellow-500 `\n           }\n           name = \" _action \"\n           value = \" addToCart \"\n         >\n          Add to Cart { \" \" }\n           { ( triggerAction . state   ===   \"submitting\"   ||\n            triggerAction . state   ===   \"loading\" )   &&\n            triggerAction . formData ?. get ( \"product_id\" )   ===\n            pageData . product . id   &&\n            triggerAction . formData ?. get ( \"_action\" )   ===   \"addToCart\"   &&\n             \"...\" }\n         </ button >\n       </ triggerAction.Form >\n    <!-- Other markup -->\n     </ >\n   )\n}\n```\n\nAs we have it in the `manage-cart` resource route, the cart item being submitted\nis either updated when it\u2019s detected as a duplicate or added as a new item if it\ndoes not exist in the user\u2019s cart.\n\nFor the full component markup, you can[ view it over here ](https://github.com/turso-extended/app-the-mug-store/blob/master/app/routes/mug.%24id.tsx#L55).\n\nBy the end of this step, here's a demonstration of what we expect the cart\nwithin our website to function.\n\nImage: [ Demonstration of the cart within the website ](https://docs.turso.tech/assets/images/09-cart-preview-a64932fe89daca02c422f99d7d74bf03.gif)\n\nImage: [ Demonstration of the cart within the website ](https://docs.turso.tech/assets/images/09-cart-preview-a64932fe89daca02c422f99d7d74bf03.gif)\n\nNext, let's manage customer checking out and order placement.\n\n- [ The mini-cart ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-06-shopping-cart/#the-mini-cart)\n- [ Managing cart items ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-06-shopping-cart/#managing-cart-items)\n    - [ Adding items to the cart ](https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-06-shopping-cart/#adding-items-to-the-cart)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-07-checking-out": "# Step 7: Checking out and placing orders\n\nAfter users have selected items they want to buy and placed them in the cart, we\nthen expect them to check out. To facilitate this inside the app, let\u2019s create\nthe checkout page by adding a `checkout._index.tsx` file under `app/routes` .\n\nFor the loader, we are trying to get the same data as we did in the cart page,\nonly that here we need the user information too. The user data is used to\npre-fill some fields on the checkout form.\n\n```\ncartItems  =   await  db . query . cartItems . findMany ( {\n   where :   ( cartItems ,   {  eq  } )   =>   eq ( cartItems . userId ,  userId ) ,\n  columns :   {  count :   true ,  id :   true   } ,\n   with :   {  product :   true ,  user :   true   } ,\n} ) ;\nreturn   {\n  cartItems ,\n  userData :  cartItems [ 0 ] . user ,\n} ;\n```\n\nWe then get the loader data and lay out the cart items and checkout information\non the page component.[ Here is the page markup for the checkout page\ncomponent ](https://github.com/turso-extended/app-the-mug-store/blob/master/app/routes/checkout._index.tsx#L171-L497).\n\nAfter having registered a user and added some items to the cart, this is what\nyou should see when you visit the checkout page.\n\nImage: [ Checkout page preview ](https://docs.turso.tech/assets/images/10-checkout-page-preview-00ffe7036937b661cd180e8b2e24e56e.png)\n\nImage: [ Checkout page preview ](https://docs.turso.tech/assets/images/10-checkout-page-preview-00ffe7036937b661cd180e8b2e24e56e.png)\n\nAfter having provided the required payment, contact, and billing information,\nthe user will submit the checkout form by clicking the \u201cPay Now\u201d button.\n\nClinking the \"Pay Now\" button prompts the submission of the checkout form data\nto the checkout page's action that validates submitted data, handles the\ncreation of new orders, and returns the correct message depending on the action\nbeing successful or not.\n\nHere is the page action that handles order placement.\n\n```\nexport   const  action  =   async   ( {\n  request ,\n  context ,\n} :   ActionArgs ) :   Promise <\n   {  status :   string ;  message :   string ;  data :   any   }   |   Response\n>   =>   {\n   const  userId  =   await   requireUserId (\n     {  request ,  redirectTo :   \"/account/login\"   } ,\n    context\n   ) ;\n   if   ( userId  ===   undefined )   {\n     return   redirect ( \"/account/login\" ) ;\n   }   else   {\n     const  formData  =   await  request . formData ( ) ;\n     const  values  =   Object . fromEntries ( formData ) ;\n     // Validate submitted data\n     const  db  =   buildDbClient ( context ) ;\n     try   {\n       const  cartItemsData  =   await  db . query . cartItems . findMany ( {\n         where :   ( cartItems ,   {  eq  } )   =>   eq ( cartItems . userId ,  userId ) ,\n        columns :   {\n          count :   true ,\n          id :   true ,\n         } ,\n         with :   {\n          product :   true ,\n          user :   true ,\n         } ,\n       } ) ;\n       if   ( ! cartItemsData . length )   {\n         return   {\n          status :   \"error\" ,\n          message :   \"Add something to your cart first\" ,\n          data :   null ,\n         } ;\n       }\n       const  amount  =  cartItemsData . reduce (\n         (\n          accumulator :   number ,\n          currentVal :   {  count :   number ;  product :   {  price :   number   }   }\n         )   =>  accumulator  +  currentVal . count   *  currentVal . product . price ,\n         0\n       ) ;\n       const  calculatedShippingFees  =   0 ;\n       const  discountAmount  =   0 ;\n       const  finalAmount  =  amount  +  calculatedShippingFees  -  discountAmount ;\n       const  newOrder  =   await  db\n         . insert ( orders )\n         . values ( {\n          id :   uuidv4 ( ) ,\n          userId ,\n          customerName :   ` ${ values . firstName }   ${ values . lastName } ` ,\n          amount ,\n          shippingFees :  calculatedShippingFees ,\n          discountAmt :  discountAmount ,\n          finalAmount ,\n          shippingAddress :   ` ${ values . zipCode }   ${ values . country } ` ,\n         } )\n         . returning ( )\n         . get ( ) ;\n       for   ( const  item  of  cartItemsData )   {\n         const  orderItemData  =   {\n          id :   uuidv4 ( ) ,\n          orderId :  newOrder . id ,\n          productId :  item . product . id ,\n          count :  item . count ,\n         } ;\n         await  db . insert ( orderItems ) . values ( orderItemData ) . run ( ) ;\n         await  db . delete ( cartItems ) . where ( eq ( cartItems . id ,  item . id ) ) . run ( ) ;\n       }\n       return   {\n        status :   \"success\" ,\n        message :   \"Order placed!\" ,\n        data :   true ,\n       } ;\n     }   catch   ( error )   {\n       // TODO: Catch error and notify user\n       return   {\n        status :   \"failure\" ,\n        message :   \"Could not create an order!\" ,\n        data :   null ,\n       } ;\n     }\n   }\n} ;\n```\n\n *Note: There is no payment integration in this tutoria that would be\nimplemented here. You can plug in one on your own.* \n\nAfter having added all of the essential features to our e-commerce store, next,\nwe'll be deploying the site to Cloudflare workers.\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//tutorials/e-commerce-store-codelab/step-08-deploying-to-cloudflare": "# Step 8: Deploying the app to Cloudflare Workers\n\nAfter having built our Mug Store app, we can then proceed to the next step which\nis making it accessible to users.\n\nOur app already has the necessary Cloudflare Worker configuration for deployment\nset. This was done automatically while the Remix project was being scaffolded.\nWe can make modifications to things such as the app name by making changes\ninside the `wrangler.toml` file. Here is the[ guiding documentation ](https://developers.cloudflare.com/workers/wrangler/configuration/)to\nunderstand the configurations that can be set inside this file.\n\nAfter everything is set up, run the following command to deploy the Mug Store\ne-commerce store to Cloudflare Workers.\n\n`npm run deploy`\n\nWhen the command runs successfully, you should see a log output close to the\nfollowing.\n\n```\nUploading 19 new assets...\nUploaded 100% [19 out of 19]\n\u2197\ufe0f  Done syncing assets\nYour worker has access to the following bindings:\n- Vars:\n  - TURSO_DB_URL: \"...\"\n  - ITEMS_PER_PAGE: 20\nTotal Upload: 2545.15 KiB / gzip: 618.44 KiB\nUploaded the-mug-store (25.54 sec)\nPublished the-mug-store (1.79 sec)\n  <https://the-mug-store.infra-43f.workers.dev>\nCurrent Deployment ID: 4341d6a9-008e-4113-bc4c-653fc24a3456\n```\n\nYou can then visit the published url shown in the log above to see a live demo\nof the e-commerce store.\n\nFor more information on the stack choice used in this tutorial you can visit the\nfollowing links:\n\n- [ Remix ](https://remix.run/docs/en/1.18.1)\n- [ Turso ](https://turso.tech/)\n- [ Cloudflare Workers ](https://workers.cloudflare.com/)\n- [ Drizzle ](https://orm.drizzle.team/)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//concepts#placement-group": "# Concepts\n\nIn order to better understand how Turso works, please read through the following\nconcepts that are used throughout this documentation.\n\n## Location\u200b\n\nTurso databases are deployed using Fly.io, which allows Turso to host database\ninstances in[ many locations around the world ](https://fly.io/docs/reference/regions/), each identified with a three\nletter code. When creating a logical database in a placement group with replica\nlocations, you should consider which locations best support the code running any\nqueries. In general, the physical distance between the code and the database\ndetermines the latency, so it's recommended to benchmark your location options\nfor better performance.\n\nBy default, when the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)needs a primary location for a new placement\ngroup, it will automatically choose a location based on the physical location of\nthe machine where you run the CLI. The default can be overridden on the command\nline.\n\n## Placement group\u200b\n\nTurso requires that all logical databases belong to a \"placement group\". These\ngroups define how the databases in the group are deployed and replicated\ntogether in the same set of locations while also sharing the same managed\nhardware. In the Turso CLI, a placement group is abbreviated as \"[ group ](https://docs.turso.tech/reference/turso-cli#manage-placement-groups-and-logical-databases)\". You\nmight also hear this feature referred to as \"multitenancy\", where the tenants\nare databases you create that must share the same replication behavior and\nmanaged servers.\n\nPlacement groups are configured with a single primary location and zero or more\nreplica locations. Each logical database that you create within the placement\ngroup uses the same primary and replica locations - they are all \"placed\"\ntogether, each using the same replication behavior on the same hardware.\nHowever, each logical database within a placement group remains fully\nindependent and isolated in every other way.\n\nOnce a primary location is assigned to a placement group, it can't be moved to\nanother location. However, replica locations can be added and removed as needed.\n\n## Logical database\u200b\n\nA logical database is a collection of libSQL databases, each with a schema and\ndata that exists in one primary location and zero or more replica locations for\nthe placement group in which it was created. The schema and data are\nautomatically replicated from the primary to all replicas in the group.\n\nA logical database has a unique[ libSQL URL ](https://docs.turso.tech/reference/libsql-urls)that, when queried using the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access), routes the client to the database instance at the location\nwith the lowest latency, therefore minimizing the total round trip time for read\noperations.\n\n## Instance\u200b\n\nA database instance is one component of a logical database in specific location.\nAn instance is serviced by a managed installation of[ libSQL server ](https://github.com/libsql/libsql#readme)running on\na single machine. Database instances of multiple logical databases in the same\nplacement group are handled by the same libSQL server process in the same\nhardware.\n\nThere are two types of instances:[ primary ](https://docs.turso.tech//concepts#placement-group/#primary)and[ replica ](https://docs.turso.tech//concepts#placement-group/#replica).\n\n### Primary\u200b\n\nThe primary instance of a logical database is the main source of data for the\ndatabase. All changes to the logical database are handled by the primary, and\nthose changes are synchronized to all replica instances.\n\n### Replica\u200b\n\nA replica instance of a logical database contains a copy of all data from the\nprimary, and is kept in sync with it as changes are made over time. Client\napplications can connect directly to a replica for read and write operations,\nbut any writes are automatically forwarded to the primary. As such, read\noperations have minimized latency, but write operations must make another hop to\nthe primary. Changes on the primary are then pushed to all replicas. The\nreplicas provide snapshot isolation for read transactions.\n\n- [ Location ](https://docs.turso.tech//concepts#placement-group/#location)\n- [ Placement group ](https://docs.turso.tech//concepts#placement-group/#placement-group)\n- [ Logical database ](https://docs.turso.tech//concepts#placement-group/#logical-database)\n- [ Instance ](https://docs.turso.tech//concepts#placement-group/#instance)\n    - [ Primary ](https://docs.turso.tech//concepts#placement-group/#primary)\n\n- [ Replica ](https://docs.turso.tech//concepts#placement-group/#replica)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//concepts#logical-database": "# Concepts\n\nIn order to better understand how Turso works, please read through the following\nconcepts that are used throughout this documentation.\n\n## Location\u200b\n\nTurso databases are deployed using Fly.io, which allows Turso to host database\ninstances in[ many locations around the world ](https://fly.io/docs/reference/regions/), each identified with a three\nletter code. When creating a logical database in a placement group with replica\nlocations, you should consider which locations best support the code running any\nqueries. In general, the physical distance between the code and the database\ndetermines the latency, so it's recommended to benchmark your location options\nfor better performance.\n\nBy default, when the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)needs a primary location for a new placement\ngroup, it will automatically choose a location based on the physical location of\nthe machine where you run the CLI. The default can be overridden on the command\nline.\n\n## Placement group\u200b\n\nTurso requires that all logical databases belong to a \"placement group\". These\ngroups define how the databases in the group are deployed and replicated\ntogether in the same set of locations while also sharing the same managed\nhardware. In the Turso CLI, a placement group is abbreviated as \"[ group ](https://docs.turso.tech/reference/turso-cli#manage-placement-groups-and-logical-databases)\". You\nmight also hear this feature referred to as \"multitenancy\", where the tenants\nare databases you create that must share the same replication behavior and\nmanaged servers.\n\nPlacement groups are configured with a single primary location and zero or more\nreplica locations. Each logical database that you create within the placement\ngroup uses the same primary and replica locations - they are all \"placed\"\ntogether, each using the same replication behavior on the same hardware.\nHowever, each logical database within a placement group remains fully\nindependent and isolated in every other way.\n\nOnce a primary location is assigned to a placement group, it can't be moved to\nanother location. However, replica locations can be added and removed as needed.\n\n## Logical database\u200b\n\nA logical database is a collection of libSQL databases, each with a schema and\ndata that exists in one primary location and zero or more replica locations for\nthe placement group in which it was created. The schema and data are\nautomatically replicated from the primary to all replicas in the group.\n\nA logical database has a unique[ libSQL URL ](https://docs.turso.tech/reference/libsql-urls)that, when queried using the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access), routes the client to the database instance at the location\nwith the lowest latency, therefore minimizing the total round trip time for read\noperations.\n\n## Instance\u200b\n\nA database instance is one component of a logical database in specific location.\nAn instance is serviced by a managed installation of[ libSQL server ](https://github.com/libsql/libsql#readme)running on\na single machine. Database instances of multiple logical databases in the same\nplacement group are handled by the same libSQL server process in the same\nhardware.\n\nThere are two types of instances:[ primary ](https://docs.turso.tech//concepts#logical-database/#primary)and[ replica ](https://docs.turso.tech//concepts#logical-database/#replica).\n\n### Primary\u200b\n\nThe primary instance of a logical database is the main source of data for the\ndatabase. All changes to the logical database are handled by the primary, and\nthose changes are synchronized to all replica instances.\n\n### Replica\u200b\n\nA replica instance of a logical database contains a copy of all data from the\nprimary, and is kept in sync with it as changes are made over time. Client\napplications can connect directly to a replica for read and write operations,\nbut any writes are automatically forwarded to the primary. As such, read\noperations have minimized latency, but write operations must make another hop to\nthe primary. Changes on the primary are then pushed to all replicas. The\nreplicas provide snapshot isolation for read transactions.\n\n- [ Location ](https://docs.turso.tech//concepts#logical-database/#location)\n- [ Placement group ](https://docs.turso.tech//concepts#logical-database/#placement-group)\n- [ Logical database ](https://docs.turso.tech//concepts#logical-database/#logical-database)\n- [ Instance ](https://docs.turso.tech//concepts#logical-database/#instance)\n    - [ Primary ](https://docs.turso.tech//concepts#logical-database/#primary)\n\n- [ Replica ](https://docs.turso.tech//concepts#logical-database/#replica)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/libsql-urls#logical-database-url": "# libSQL database URLs\n\nThroughout this documentation, the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli), and the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access/),\nyou will notice examples of URLs that start with `libsql://` . These URLs are\nrecognized by libSQL and Turso tools with the following meaning.\n\n## Database endpoint identification\u200b\n\nA `libsql` URL identifies a libSQL logical database running[ libSQL server ](https://github.com/libsql/libsql#readme). A\nlogical database URL connects to an[ instance ](https://docs.turso.tech/concepts#instance)of the database (primary or\nreplica) with the lowest latency to the machine making the connection. You can\nget the URL for a logical database using `turso db list` and `turso db show` .\nLogical database URLs have the following format:\n\n`libsql://[DB-NAME]-[ORG-NAME].turso.io`\n\ninfo\n\nTurso depends on the hosting service Fly.io to determine the lowest latency\ninstance for a client connection. Typically, this will be the geographically\nclosest instance to the machine running the client, though that may not always\nbe the case. A client using a logical database URL might connect to different\ninstances over time depending on how Fly.io observes network latency.\n\n## Network protocol\u200b\n\nWhen provided with a libsql URL, libSQL client libraries are free to choose what\nthey consider to be the best (or only) available protocol that works in the\nruntime environment where they are running. libSQL server supports both\nWebSockets and HTTP. Some cloud and edge function providers might not support\nWebSockets, with HTTP being the only working choice.\n\nIt's possible that some SDK features might not be available depending on the\nchosen protocol. You should consult the SDK documentation for details. In the\nfuture, each SDK will expose a way to find out which protocol was chosen by the\nclient object.\n\nIn order to optimize the latency of your application, or use libSQL server\ninstances other than those managed by Turso, you might want to choose a\nprotocol. The protocol is selected using the scheme of the URL. libSQL clients\ngenerally support the following schemes: `http` , `https` , `ws` , `wss` . If you\nwant to specify the use HTTPS, you can replace the `libsql` scheme of the URL\nwith `https` . For example, a logical database URL that specifies `https` has the\nfollowing format:\n\n`https://[DB-NAME]-[ORG-NAME].turso.io`\n\ninfo\n\nTurso databases support only the secure `https` and `wss` schemes. `ws` and `http` are typically only used when developing against a libSQL server instance\nrunning locally that can't be configured with an SSL certificate.\n\nThe underlying data sent using WebSockets or HTTP is expressed as JSON.\nDocumentation for this protocol and the structure of its messages is\nforthcoming.\n\n### Latency optimization\u200b\n\nWebSockets tend to perform better when the client SDK can hold a socket open\nover time to handle multiple queries. However, HTTP tends to perform better for\na single query since it requires fewer round trips between client and server.\nYou should benchmark both options if there is any doubt which is better for your\nuse case.\n\n- [ Database endpoint identification ](https://docs.turso.tech//reference/libsql-urls#logical-database-url/#database-endpoint-identification)\n- [ Network protocol ](https://docs.turso.tech//reference/libsql-urls#logical-database-url/#network-protocol)\n    - [ Latency optimization ](https://docs.turso.tech//reference/libsql-urls#logical-database-url/#latency-optimization)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//concepts#instance": "# Concepts\n\nIn order to better understand how Turso works, please read through the following\nconcepts that are used throughout this documentation.\n\n## Location\u200b\n\nTurso databases are deployed using Fly.io, which allows Turso to host database\ninstances in[ many locations around the world ](https://fly.io/docs/reference/regions/), each identified with a three\nletter code. When creating a logical database in a placement group with replica\nlocations, you should consider which locations best support the code running any\nqueries. In general, the physical distance between the code and the database\ndetermines the latency, so it's recommended to benchmark your location options\nfor better performance.\n\nBy default, when the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)needs a primary location for a new placement\ngroup, it will automatically choose a location based on the physical location of\nthe machine where you run the CLI. The default can be overridden on the command\nline.\n\n## Placement group\u200b\n\nTurso requires that all logical databases belong to a \"placement group\". These\ngroups define how the databases in the group are deployed and replicated\ntogether in the same set of locations while also sharing the same managed\nhardware. In the Turso CLI, a placement group is abbreviated as \"[ group ](https://docs.turso.tech/reference/turso-cli#manage-placement-groups-and-logical-databases)\". You\nmight also hear this feature referred to as \"multitenancy\", where the tenants\nare databases you create that must share the same replication behavior and\nmanaged servers.\n\nPlacement groups are configured with a single primary location and zero or more\nreplica locations. Each logical database that you create within the placement\ngroup uses the same primary and replica locations - they are all \"placed\"\ntogether, each using the same replication behavior on the same hardware.\nHowever, each logical database within a placement group remains fully\nindependent and isolated in every other way.\n\nOnce a primary location is assigned to a placement group, it can't be moved to\nanother location. However, replica locations can be added and removed as needed.\n\n## Logical database\u200b\n\nA logical database is a collection of libSQL databases, each with a schema and\ndata that exists in one primary location and zero or more replica locations for\nthe placement group in which it was created. The schema and data are\nautomatically replicated from the primary to all replicas in the group.\n\nA logical database has a unique[ libSQL URL ](https://docs.turso.tech/reference/libsql-urls)that, when queried using the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access), routes the client to the database instance at the location\nwith the lowest latency, therefore minimizing the total round trip time for read\noperations.\n\n## Instance\u200b\n\nA database instance is one component of a logical database in specific location.\nAn instance is serviced by a managed installation of[ libSQL server ](https://github.com/libsql/libsql#readme)running on\na single machine. Database instances of multiple logical databases in the same\nplacement group are handled by the same libSQL server process in the same\nhardware.\n\nThere are two types of instances:[ primary ](https://docs.turso.tech//concepts#instance/#primary)and[ replica ](https://docs.turso.tech//concepts#instance/#replica).\n\n### Primary\u200b\n\nThe primary instance of a logical database is the main source of data for the\ndatabase. All changes to the logical database are handled by the primary, and\nthose changes are synchronized to all replica instances.\n\n### Replica\u200b\n\nA replica instance of a logical database contains a copy of all data from the\nprimary, and is kept in sync with it as changes are made over time. Client\napplications can connect directly to a replica for read and write operations,\nbut any writes are automatically forwarded to the primary. As such, read\noperations have minimized latency, but write operations must make another hop to\nthe primary. Changes on the primary are then pushed to all replicas. The\nreplicas provide snapshot isolation for read transactions.\n\n- [ Location ](https://docs.turso.tech//concepts#instance/#location)\n- [ Placement group ](https://docs.turso.tech//concepts#instance/#placement-group)\n- [ Logical database ](https://docs.turso.tech//concepts#instance/#logical-database)\n- [ Instance ](https://docs.turso.tech//concepts#instance/#instance)\n    - [ Primary ](https://docs.turso.tech//concepts#instance/#primary)\n\n- [ Replica ](https://docs.turso.tech//concepts#instance/#replica)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#use-libsql-server-locally/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access#batches": "# Client SDKs\n\nlibSQL provides client SDKs that work for a variety of use cases:\n\n- [ Local access ](https://docs.turso.tech//libsql/client-access#batches/#local-access)(in-memory, or using the same database file\nformat as SQLite)\n- [ Remote access ](https://docs.turso.tech//libsql/client-access#batches/#remote-access)using a libSQL server instance (including\nTurso)\n- [ Hybrid access ](https://docs.turso.tech//libsql/client-access#batches/#hybrid-access)using an embedded replica of data primarily hosted by libSQL\nserver\n\n\nSDKs are provided for the following languages:\n\n- [ JavaScript & TypeScript ](https://docs.turso.tech/libsql/client-access/javascript-typescript-sdk)\n- [ Rust ](https://docs.turso.tech/libsql/client-access/rust-sdk)\n- [ Python ](https://docs.turso.tech/libsql/client-access/python-sdk)\n- [ Go ](https://docs.turso.tech/libsql/client-access/go-sdk)\n\n\n## Access types\u200b\n\n### Local access\u200b\n\nWhen building an application that uses a local database, the client libraries\ncan act as a replacement for embedded SQLite (using the[ libSQL core library ](https://github.com/libsql/libsql)with native language bindings). The database can be in memory, or persisted to a\nfile using the same database file format as SQLite.\n\nTo use a libSQL client SDK for local database access, you must provide a `file:` URL with the path to the database file to use. The SDK attempts to create the\nfile if it doesn\u2019t exist.\n\n### Remote access\u200b\n\nWhen building an application that uses a remote libSQL server (including Turso),\nyou can use libSQL client libraries that communicate with the server over HTTP\nusing a custom protocol (\u201chrana\u201d). This is appropriate for code deployed to edge\nand serverless frameworks that act as an API gateway or middleware for a client\napplication.\n\nTo use a libSQL client SDK for remote database access, you must provide an `http:` , `https:` , or `libsql:` URL identifying the libSQL server to use.\n\n#### Turso databases\u200b\n\nFor databases hosted by Turso, you must provide a libsql URL and authentication\ntoken.  The URL for a database can be found using the Turso CLI:\n\n`$ turso db show  $DBNAME  --url`\n\nYou can generate a new[ database client authentication token ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)using the\nfollowing command:\n\n`$ turso db tokens create  $DBNAME`\n\n### Hybrid access (embedded replica)\u200b\n\ninfo\n\nHybrid access with embedded replicas is currently only supported for the\nJavaScript runtimes Node.js, Bun, and Deno with write access to a filesystem.\nSupport for hybrid access requires version 0.3.5 or later of the JavaScript SDK.\n\nThe libSQL client SDKs have the ability to maintain an embedded local copy of\nthe data hosted by a remote libSQL server for fast read access without requiring\nnetwork connectivity at the time of the query. Applications can request the\nlatest updates from the remote server by simply calling a method. libSQL then\nfigures out which changes on the remote server must be synchronized to the local\nreplica. When the host application performs a write operation, it\u2019s forwarded to\nthe remote libSQL server for execution, similar to the way that all writes to a\nlibSQL server replica are forwarded to the primary instance.\n\n## Client SDK capabilities\u200b\n\n### Batches\u200b\n\nWith the libSQL client library, a batch is one or more SQL statements executed\nin order in an implicit transaction. The transaction is controlled by the libSQL\nbackend. If all of the statements are successful, the transaction is committed.\nIf any of the statements fail, the entire transaction is rolled back and no\nchanges are made.\n\n### Interactive transactions\u200b\n\nInteractive transactions allow you to execute a series of read and write\nstatements in the context of a[ SQLite transaction ](https://www.sqlite.org/lang_transaction.html). Reads and writes are all\nconsistent within the scope of that transaction, unaffected by other client\nactivity. The transaction API requires you to choose when to commit or roll back\nthe transaction.\n\ndanger\n\nInteractive transactions effectively lock the entire database for writing when a\nwrite is first performed, and until the transaction is committed or rolled back.\nlibSQL aborts transactions after a 5 second timeout. Transactions may negatively\nimpact overall database performance when used on high latency connections or\nwith busy databases.\n\n### Embedded replicas\u200b\n\nIn order to use an embedded replica for hybrid access, the SDK must be\ninitialized with three values:\n\n- The URL of the remote database hosted by libSQL server\n- An authentication token for that database (required only by Turso)\n- The path to the local database file to be kept in sync with the remote\ndatabase. The local database file is fully compatible with SQLite.\n\n\ncaution\n\nYou should allow the libSQL SDK to create the local database files and perform\nwrite operations on them. Writes from other sources are not supported, and the\ndata might be lost upon the next sync with the remote database.\n\nWhen you provide a path to the local database file, two other files appear\nalongside it with the same name as the database file you provide with \"-shm\" and\n\"-wal\" suffixes. These files should be considered part of the local database. If\nyou need to relocate the embedded replica, these files should be moved along\nwith the main database file.\n\n- [ Access types ](https://docs.turso.tech//libsql/client-access#batches/#access-types)\n    - [ Local access ](https://docs.turso.tech//libsql/client-access#batches/#local-access)\n\n- [ Remote access ](https://docs.turso.tech//libsql/client-access#batches/#remote-access)\n\n- [ Hybrid access (embedded replica) ](https://docs.turso.tech//libsql/client-access#batches/#hybrid-access)\n- [ Client SDK capabilities ](https://docs.turso.tech//libsql/client-access#batches/#client-sdk-capabilities)\n    - [ Batches ](https://docs.turso.tech//libsql/client-access#batches/#batches)\n\n- [ Interactive transactions ](https://docs.turso.tech//libsql/client-access#batches/#interactive-transactions)\n\n- [ Embedded replicas ](https://docs.turso.tech//libsql/client-access#batches/#embedded-replicas)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access#interactive-transactions": "# Client SDKs\n\nlibSQL provides client SDKs that work for a variety of use cases:\n\n- [ Local access ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#local-access)(in-memory, or using the same database file\nformat as SQLite)\n- [ Remote access ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#remote-access)using a libSQL server instance (including\nTurso)\n- [ Hybrid access ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#hybrid-access)using an embedded replica of data primarily hosted by libSQL\nserver\n\n\nSDKs are provided for the following languages:\n\n- [ JavaScript & TypeScript ](https://docs.turso.tech/libsql/client-access/javascript-typescript-sdk)\n- [ Rust ](https://docs.turso.tech/libsql/client-access/rust-sdk)\n- [ Python ](https://docs.turso.tech/libsql/client-access/python-sdk)\n- [ Go ](https://docs.turso.tech/libsql/client-access/go-sdk)\n\n\n## Access types\u200b\n\n### Local access\u200b\n\nWhen building an application that uses a local database, the client libraries\ncan act as a replacement for embedded SQLite (using the[ libSQL core library ](https://github.com/libsql/libsql)with native language bindings). The database can be in memory, or persisted to a\nfile using the same database file format as SQLite.\n\nTo use a libSQL client SDK for local database access, you must provide a `file:` URL with the path to the database file to use. The SDK attempts to create the\nfile if it doesn\u2019t exist.\n\n### Remote access\u200b\n\nWhen building an application that uses a remote libSQL server (including Turso),\nyou can use libSQL client libraries that communicate with the server over HTTP\nusing a custom protocol (\u201chrana\u201d). This is appropriate for code deployed to edge\nand serverless frameworks that act as an API gateway or middleware for a client\napplication.\n\nTo use a libSQL client SDK for remote database access, you must provide an `http:` , `https:` , or `libsql:` URL identifying the libSQL server to use.\n\n#### Turso databases\u200b\n\nFor databases hosted by Turso, you must provide a libsql URL and authentication\ntoken.  The URL for a database can be found using the Turso CLI:\n\n`$ turso db show  $DBNAME  --url`\n\nYou can generate a new[ database client authentication token ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)using the\nfollowing command:\n\n`$ turso db tokens create  $DBNAME`\n\n### Hybrid access (embedded replica)\u200b\n\ninfo\n\nHybrid access with embedded replicas is currently only supported for the\nJavaScript runtimes Node.js, Bun, and Deno with write access to a filesystem.\nSupport for hybrid access requires version 0.3.5 or later of the JavaScript SDK.\n\nThe libSQL client SDKs have the ability to maintain an embedded local copy of\nthe data hosted by a remote libSQL server for fast read access without requiring\nnetwork connectivity at the time of the query. Applications can request the\nlatest updates from the remote server by simply calling a method. libSQL then\nfigures out which changes on the remote server must be synchronized to the local\nreplica. When the host application performs a write operation, it\u2019s forwarded to\nthe remote libSQL server for execution, similar to the way that all writes to a\nlibSQL server replica are forwarded to the primary instance.\n\n## Client SDK capabilities\u200b\n\n### Batches\u200b\n\nWith the libSQL client library, a batch is one or more SQL statements executed\nin order in an implicit transaction. The transaction is controlled by the libSQL\nbackend. If all of the statements are successful, the transaction is committed.\nIf any of the statements fail, the entire transaction is rolled back and no\nchanges are made.\n\n### Interactive transactions\u200b\n\nInteractive transactions allow you to execute a series of read and write\nstatements in the context of a[ SQLite transaction ](https://www.sqlite.org/lang_transaction.html). Reads and writes are all\nconsistent within the scope of that transaction, unaffected by other client\nactivity. The transaction API requires you to choose when to commit or roll back\nthe transaction.\n\ndanger\n\nInteractive transactions effectively lock the entire database for writing when a\nwrite is first performed, and until the transaction is committed or rolled back.\nlibSQL aborts transactions after a 5 second timeout. Transactions may negatively\nimpact overall database performance when used on high latency connections or\nwith busy databases.\n\n### Embedded replicas\u200b\n\nIn order to use an embedded replica for hybrid access, the SDK must be\ninitialized with three values:\n\n- The URL of the remote database hosted by libSQL server\n- An authentication token for that database (required only by Turso)\n- The path to the local database file to be kept in sync with the remote\ndatabase. The local database file is fully compatible with SQLite.\n\n\ncaution\n\nYou should allow the libSQL SDK to create the local database files and perform\nwrite operations on them. Writes from other sources are not supported, and the\ndata might be lost upon the next sync with the remote database.\n\nWhen you provide a path to the local database file, two other files appear\nalongside it with the same name as the database file you provide with \"-shm\" and\n\"-wal\" suffixes. These files should be considered part of the local database. If\nyou need to relocate the embedded replica, these files should be moved along\nwith the main database file.\n\n- [ Access types ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#access-types)\n    - [ Local access ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#local-access)\n\n- [ Remote access ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#remote-access)\n\n- [ Hybrid access (embedded replica) ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#hybrid-access)\n- [ Client SDK capabilities ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#client-sdk-capabilities)\n    - [ Batches ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#batches)\n\n- [ Interactive transactions ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#interactive-transactions)\n\n- [ Embedded replicas ](https://docs.turso.tech//libsql/client-access#interactive-transactions/#embedded-replicas)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//concepts#primary": "# Concepts\n\nIn order to better understand how Turso works, please read through the following\nconcepts that are used throughout this documentation.\n\n## Location\u200b\n\nTurso databases are deployed using Fly.io, which allows Turso to host database\ninstances in[ many locations around the world ](https://fly.io/docs/reference/regions/), each identified with a three\nletter code. When creating a logical database in a placement group with replica\nlocations, you should consider which locations best support the code running any\nqueries. In general, the physical distance between the code and the database\ndetermines the latency, so it's recommended to benchmark your location options\nfor better performance.\n\nBy default, when the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)needs a primary location for a new placement\ngroup, it will automatically choose a location based on the physical location of\nthe machine where you run the CLI. The default can be overridden on the command\nline.\n\n## Placement group\u200b\n\nTurso requires that all logical databases belong to a \"placement group\". These\ngroups define how the databases in the group are deployed and replicated\ntogether in the same set of locations while also sharing the same managed\nhardware. In the Turso CLI, a placement group is abbreviated as \"[ group ](https://docs.turso.tech/reference/turso-cli#manage-placement-groups-and-logical-databases)\". You\nmight also hear this feature referred to as \"multitenancy\", where the tenants\nare databases you create that must share the same replication behavior and\nmanaged servers.\n\nPlacement groups are configured with a single primary location and zero or more\nreplica locations. Each logical database that you create within the placement\ngroup uses the same primary and replica locations - they are all \"placed\"\ntogether, each using the same replication behavior on the same hardware.\nHowever, each logical database within a placement group remains fully\nindependent and isolated in every other way.\n\nOnce a primary location is assigned to a placement group, it can't be moved to\nanother location. However, replica locations can be added and removed as needed.\n\n## Logical database\u200b\n\nA logical database is a collection of libSQL databases, each with a schema and\ndata that exists in one primary location and zero or more replica locations for\nthe placement group in which it was created. The schema and data are\nautomatically replicated from the primary to all replicas in the group.\n\nA logical database has a unique[ libSQL URL ](https://docs.turso.tech/reference/libsql-urls)that, when queried using the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access), routes the client to the database instance at the location\nwith the lowest latency, therefore minimizing the total round trip time for read\noperations.\n\n## Instance\u200b\n\nA database instance is one component of a logical database in specific location.\nAn instance is serviced by a managed installation of[ libSQL server ](https://github.com/libsql/libsql#readme)running on\na single machine. Database instances of multiple logical databases in the same\nplacement group are handled by the same libSQL server process in the same\nhardware.\n\nThere are two types of instances:[ primary ](https://docs.turso.tech//concepts#primary/#primary)and[ replica ](https://docs.turso.tech//concepts#primary/#replica).\n\n### Primary\u200b\n\nThe primary instance of a logical database is the main source of data for the\ndatabase. All changes to the logical database are handled by the primary, and\nthose changes are synchronized to all replica instances.\n\n### Replica\u200b\n\nA replica instance of a logical database contains a copy of all data from the\nprimary, and is kept in sync with it as changes are made over time. Client\napplications can connect directly to a replica for read and write operations,\nbut any writes are automatically forwarded to the primary. As such, read\noperations have minimized latency, but write operations must make another hop to\nthe primary. Changes on the primary are then pushed to all replicas. The\nreplicas provide snapshot isolation for read transactions.\n\n- [ Location ](https://docs.turso.tech//concepts#primary/#location)\n- [ Placement group ](https://docs.turso.tech//concepts#primary/#placement-group)\n- [ Logical database ](https://docs.turso.tech//concepts#primary/#logical-database)\n- [ Instance ](https://docs.turso.tech//concepts#primary/#instance)\n    - [ Primary ](https://docs.turso.tech//concepts#primary/#primary)\n\n- [ Replica ](https://docs.turso.tech//concepts#primary/#replica)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//concepts#replica": "# Concepts\n\nIn order to better understand how Turso works, please read through the following\nconcepts that are used throughout this documentation.\n\n## Location\u200b\n\nTurso databases are deployed using Fly.io, which allows Turso to host database\ninstances in[ many locations around the world ](https://fly.io/docs/reference/regions/), each identified with a three\nletter code. When creating a logical database in a placement group with replica\nlocations, you should consider which locations best support the code running any\nqueries. In general, the physical distance between the code and the database\ndetermines the latency, so it's recommended to benchmark your location options\nfor better performance.\n\nBy default, when the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)needs a primary location for a new placement\ngroup, it will automatically choose a location based on the physical location of\nthe machine where you run the CLI. The default can be overridden on the command\nline.\n\n## Placement group\u200b\n\nTurso requires that all logical databases belong to a \"placement group\". These\ngroups define how the databases in the group are deployed and replicated\ntogether in the same set of locations while also sharing the same managed\nhardware. In the Turso CLI, a placement group is abbreviated as \"[ group ](https://docs.turso.tech/reference/turso-cli#manage-placement-groups-and-logical-databases)\". You\nmight also hear this feature referred to as \"multitenancy\", where the tenants\nare databases you create that must share the same replication behavior and\nmanaged servers.\n\nPlacement groups are configured with a single primary location and zero or more\nreplica locations. Each logical database that you create within the placement\ngroup uses the same primary and replica locations - they are all \"placed\"\ntogether, each using the same replication behavior on the same hardware.\nHowever, each logical database within a placement group remains fully\nindependent and isolated in every other way.\n\nOnce a primary location is assigned to a placement group, it can't be moved to\nanother location. However, replica locations can be added and removed as needed.\n\n## Logical database\u200b\n\nA logical database is a collection of libSQL databases, each with a schema and\ndata that exists in one primary location and zero or more replica locations for\nthe placement group in which it was created. The schema and data are\nautomatically replicated from the primary to all replicas in the group.\n\nA logical database has a unique[ libSQL URL ](https://docs.turso.tech/reference/libsql-urls)that, when queried using the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access), routes the client to the database instance at the location\nwith the lowest latency, therefore minimizing the total round trip time for read\noperations.\n\n## Instance\u200b\n\nA database instance is one component of a logical database in specific location.\nAn instance is serviced by a managed installation of[ libSQL server ](https://github.com/libsql/libsql#readme)running on\na single machine. Database instances of multiple logical databases in the same\nplacement group are handled by the same libSQL server process in the same\nhardware.\n\nThere are two types of instances:[ primary ](https://docs.turso.tech//concepts#replica/#primary)and[ replica ](https://docs.turso.tech//concepts#replica/#replica).\n\n### Primary\u200b\n\nThe primary instance of a logical database is the main source of data for the\ndatabase. All changes to the logical database are handled by the primary, and\nthose changes are synchronized to all replica instances.\n\n### Replica\u200b\n\nA replica instance of a logical database contains a copy of all data from the\nprimary, and is kept in sync with it as changes are made over time. Client\napplications can connect directly to a replica for read and write operations,\nbut any writes are automatically forwarded to the primary. As such, read\noperations have minimized latency, but write operations must make another hop to\nthe primary. Changes on the primary are then pushed to all replicas. The\nreplicas provide snapshot isolation for read transactions.\n\n- [ Location ](https://docs.turso.tech//concepts#replica/#location)\n- [ Placement group ](https://docs.turso.tech//concepts#replica/#placement-group)\n- [ Logical database ](https://docs.turso.tech//concepts#replica/#logical-database)\n- [ Instance ](https://docs.turso.tech//concepts#replica/#instance)\n    - [ Primary ](https://docs.turso.tech//concepts#replica/#primary)\n\n- [ Replica ](https://docs.turso.tech//concepts#replica/#replica)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/auth/": "# Authentication API\n\n## Summary\u200b\n\nThe Authentication API allows you to work with platform authentication tokens\nfor use with all of the Turso Platform APIs.\n\nThe minted tokens never expire, they can only be revoked.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all Platform API tokens for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/get-tokens-for-user)\n- [ Mint a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/mint-token-for-user)\n- [ Revoke a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/revoke-token-for-user)\n- [ Validate a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/validate-token-for-user)\n\n\n## Objects\u200b\n\n### Platform API token object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `id`  | string | Unique ID, generated by the platform. |\n|  `name`  | string | Given name. |\n|  `token`  | string | Token string. Only appears in the object returned when[ minting a new token ](https://docs.turso.tech/reference/platform-rest-api/auth/mint-token-for-user). |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/auth/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/auth/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/auth/#objects)\n    - [ Platform API token object ](https://docs.turso.tech//reference/platform-rest-api/auth/#platform-api-token-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/organization/": "# Organization API\n\n## Summary\u200b\n\nThe Organization API allows you to work with Turso organizations, which enable\nteam access to the databases contained within them.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all organizations for the user ](https://docs.turso.tech/reference/platform-rest-api/organization/get-organizations-for-user)\n- [ Get all organization members ](https://docs.turso.tech/reference/platform-rest-api/organization/get-organization-members)\n\n\nThe Organization API only allows reading organization data. Use the Turso CLI to[ create and modify organizations ](https://docs.turso.tech/reference/turso-cli#team-collaboration-with-organizations).\n\n## Objects\u200b\n\n### Organization object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `name`  | string | The given name of the organization |\n|  `slug`  | string | The slug used to identify the organization in API calls; generated by the API based on the `name` provided during creation |\n|  `type`  | string |  `personal` or `team`  |\n\n\n### Organization member object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `username`  | string | The GitHub user name of the org member |\n|  `role`  | string |  `owner` (creator) or `member`  |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/organization/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/organization/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/organization/#objects)\n    - [ Organization object ](https://docs.turso.tech//reference/platform-rest-api/organization/#organization-object)\n\n- [ Organization member object ](https://docs.turso.tech//reference/platform-rest-api/organization/#organization-member-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/location/": "# Location API\n\n## Summary\u200b\n\nThe Location API allows you to discover supported locations for Turso database\ninstances.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all supported locations ](https://docs.turso.tech/reference/platform-rest-api/location/get-locations)\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/location/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/location/#operations)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/": "# Logical database API\n\n## Summary\u200b\n\nThe Logical database API allows you to work with Turso[ logical databases ](https://docs.turso.tech/concepts#logical-database)within an organization.\n\nEach database must be contained within an organization. Every GitHub account has\na personal organization with a name based on the GitHub account name. Team\norganizations are created and managed with the Turso CLI or the[ Organization\nAPI ](https://docs.turso.tech/reference/platform-rest-api/organization).\n\nAfter creating a logical database, use the[ Database instance API ](https://docs.turso.tech/reference/platform-rest-api/instance)to add and\nremove[ instances ](https://docs.turso.tech/concepts#instance)within that logical database.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all logical databases in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/get-databases-in-org)\n- [ Create a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/create-database-in-org)\n- [ Destroy a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/destroy-database-in-org)\n- [ Mint an auth token for a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/mint-token-for-database-in-org)\n- [ Invalidate all auth tokens for a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org)\n\n\n## Objects\u200b\n\n### Logical database object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `Name`  | string | Name of the logical database, unique among all databases in an organization |\n|  `Hostname`  | string | The DNS hostname used for client connections; used to build libsql and https URLs |\n|  `IssuedCertLimit`  | number |  |\n|  `IssuedCertCount`  | number |  |\n|  `DbId`  | string | UUID of the logical database |\n|  `regions`  | string array | List of location codes for all instances of this logical database |\n|  `primaryRegion`  | string | Location code for the primary instance |\n|  `type`  | string | \"logical\" |\n\n\nAny `username` and `password` values associated with a database are deprecated\nand should not be used by consumers of this API.\n\n### Logical database usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID of the logical database |\n|  `instances`  | array | List of[ database instance usage objects ](https://docs.turso.tech//reference/platform-rest-api/database/#database-instance-usage-object)of instances contributing usage for the current month |\n\n\n### Database instance usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID of the database instance |\n|  `usage`  | object | [ Usage object ](https://docs.turso.tech//reference/platform-rest-api/database/#usage-object)describing the usage of this instance for the current month |\n\n\n### Usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `rows_read`  | number | The number of row reads incurred during a monthly billing period |\n|  `rows_written`  | number | The number of row writes incurred during a monthly billing period |\n|  `storage_bytes`  | number | The total amount of storage used |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/database/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/database/#objects)\n    - [ Logical database object ](https://docs.turso.tech//reference/platform-rest-api/database/#logical-database-object)\n\n- [ Logical database usage object ](https://docs.turso.tech//reference/platform-rest-api/database/#logical-database-usage-object)\n\n- [ Database instance usage object ](https://docs.turso.tech//reference/platform-rest-api/database/#database-instance-usage-object)\n\n- [ Usage object ](https://docs.turso.tech//reference/platform-rest-api/database/#usage-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/instance/": "# Database instance API\n\n## Summary\u200b\n\nThe Database instance API allows you to work with Turso database[ instances ](https://docs.turso.tech/concepts#instance).\n\nBefore using this API, you must already have a[ logical database ](https://docs.turso.tech/concepts#logical-database)created by the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)or the[ Logical database API ](https://docs.turso.tech/reference/platform-rest-api/database)\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all instances in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/get-instances-in-database)\n- [ Create an instance in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/create-instance-in-database)\n- [ Destroy an instance in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/destroy-instance-in-database)\n- [ Wait for an instance to become ready in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/wait-instance-ready-in-database)\n\n\n## Objects\u200b\n\n### Database instance object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID, unique among all instances |\n|  `name`  | string | Given name (human readable) |\n|  `type`  | string | \"primary\" or \"replica\" |\n|  `region`  | string | Location code |\n|  `hostname`  | string | The DNS hostname used for client connections; used to build libsql and https URLs |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/instance/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/instance/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/instance/#objects)\n    - [ Database instance object ](https://docs.turso.tech//reference/platform-rest-api/instance/#database-instance-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/": "# Groups API\n\nThe Groups API lets you create a group for a collection of databases that share the same location(s).\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ List groups ](https://docs.turso.tech/reference/platform-rest-api/groups/list-groups)\n- [ Create group ](https://docs.turso.tech/reference/platform-rest-api/groups/create-group)\n- [ Retrieve group ](https://docs.turso.tech/reference/platform-rest-api/groups/retrieve-group)\n- [ Delete group ](https://docs.turso.tech/reference/platform-rest-api/groups/delete-group)\n- [ Add location ](https://docs.turso.tech/reference/platform-rest-api/groups/add-location)\n- [ Remove location ](https://docs.turso.tech/reference/platform-rest-api/groups/remove-location)\n- [ Mint token ](https://docs.turso.tech/reference/platform-rest-api/groups/mint-token)\n- [ Invalidate tokens ](https://docs.turso.tech/reference/platform-rest-api/groups/invalidate-tokens)\n\n\n## Objects\u200b\n\n### Group object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `name`  |  `string`  | The name of the group. |\n|  `locations`  |  `array[string]`  | An array of the[ locations ](https://docs.turso.tech/reference/platform-rest-api/location/get-locations#example)(three letter codes) assigned to the group. |\n|  `primary`  |  `string[string]`  | The primary[ location ](https://docs.turso.tech/reference/platform-rest-api/location/get-locations#example)(three letter code) assigned to the group. |\n\n\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/groups/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/groups/#objects)\n    - [ Group object ](https://docs.turso.tech//reference/platform-rest-api/groups/#group-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/auth": "# Authentication API\n\n## Summary\u200b\n\nThe Authentication API allows you to work with platform authentication tokens\nfor use with all of the Turso Platform APIs.\n\nThe minted tokens never expire, they can only be revoked.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all Platform API tokens for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/get-tokens-for-user)\n- [ Mint a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/mint-token-for-user)\n- [ Revoke a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/revoke-token-for-user)\n- [ Validate a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/validate-token-for-user)\n\n\n## Objects\u200b\n\n### Platform API token object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `id`  | string | Unique ID, generated by the platform. |\n|  `name`  | string | Given name. |\n|  `token`  | string | Token string. Only appears in the object returned when[ minting a new token ](https://docs.turso.tech/reference/platform-rest-api/auth/mint-token-for-user). |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/auth/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/auth/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/auth/#objects)\n    - [ Platform API token object ](https://docs.turso.tech//reference/platform-rest-api/auth/#platform-api-token-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#platform-api-auth-tokens/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#logging-in-to-the-cli/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/invalidate-tokens": "# Invalidate Group Tokens\n\nInvalidate all auth tokens for a group.\n\n## User Groups\u200b\n\n `POST /v1/groups/:group/auth/rotate` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --request POST\n  --location  'https://api.turso.tech/v1/groups/some_group/auth/rotate'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\nNote: The response body is empty but returns HTTP status `200` for successful rotations.\n\n## Organization Groups\u200b\n\n `POST /v1/organizations/:organization/groups/:group/auth/rotate` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `organization`  |  `string`  | The organization name. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --request POST  \\\n  --location  'https://api.turso.tech/v1/organizations/some_org/groups/some_group/auth/rotate'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\nNote: The response body is empty but returns HTTP status `200` for successful rotations.\n\n- [ User Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/invalidate-tokens/#user-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/invalidate-tokens/#headers)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/invalidate-tokens/#example)\n- [ Organization Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/invalidate-tokens/#organization-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/invalidate-tokens/#headers-1)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/invalidate-tokens/#path-parameters)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/invalidate-tokens/#example-1)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//libsql/client-access#embedded-replicas": "# Client SDKs\n\nlibSQL provides client SDKs that work for a variety of use cases:\n\n- [ Local access ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#local-access)(in-memory, or using the same database file\nformat as SQLite)\n- [ Remote access ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#remote-access)using a libSQL server instance (including\nTurso)\n- [ Hybrid access ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#hybrid-access)using an embedded replica of data primarily hosted by libSQL\nserver\n\n\nSDKs are provided for the following languages:\n\n- [ JavaScript & TypeScript ](https://docs.turso.tech/libsql/client-access/javascript-typescript-sdk)\n- [ Rust ](https://docs.turso.tech/libsql/client-access/rust-sdk)\n- [ Python ](https://docs.turso.tech/libsql/client-access/python-sdk)\n- [ Go ](https://docs.turso.tech/libsql/client-access/go-sdk)\n\n\n## Access types\u200b\n\n### Local access\u200b\n\nWhen building an application that uses a local database, the client libraries\ncan act as a replacement for embedded SQLite (using the[ libSQL core library ](https://github.com/libsql/libsql)with native language bindings). The database can be in memory, or persisted to a\nfile using the same database file format as SQLite.\n\nTo use a libSQL client SDK for local database access, you must provide a `file:` URL with the path to the database file to use. The SDK attempts to create the\nfile if it doesn\u2019t exist.\n\n### Remote access\u200b\n\nWhen building an application that uses a remote libSQL server (including Turso),\nyou can use libSQL client libraries that communicate with the server over HTTP\nusing a custom protocol (\u201chrana\u201d). This is appropriate for code deployed to edge\nand serverless frameworks that act as an API gateway or middleware for a client\napplication.\n\nTo use a libSQL client SDK for remote database access, you must provide an `http:` , `https:` , or `libsql:` URL identifying the libSQL server to use.\n\n#### Turso databases\u200b\n\nFor databases hosted by Turso, you must provide a libsql URL and authentication\ntoken.  The URL for a database can be found using the Turso CLI:\n\n`$ turso db show  $DBNAME  --url`\n\nYou can generate a new[ database client authentication token ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)using the\nfollowing command:\n\n`$ turso db tokens create  $DBNAME`\n\n### Hybrid access (embedded replica)\u200b\n\ninfo\n\nHybrid access with embedded replicas is currently only supported for the\nJavaScript runtimes Node.js, Bun, and Deno with write access to a filesystem.\nSupport for hybrid access requires version 0.3.5 or later of the JavaScript SDK.\n\nThe libSQL client SDKs have the ability to maintain an embedded local copy of\nthe data hosted by a remote libSQL server for fast read access without requiring\nnetwork connectivity at the time of the query. Applications can request the\nlatest updates from the remote server by simply calling a method. libSQL then\nfigures out which changes on the remote server must be synchronized to the local\nreplica. When the host application performs a write operation, it\u2019s forwarded to\nthe remote libSQL server for execution, similar to the way that all writes to a\nlibSQL server replica are forwarded to the primary instance.\n\n## Client SDK capabilities\u200b\n\n### Batches\u200b\n\nWith the libSQL client library, a batch is one or more SQL statements executed\nin order in an implicit transaction. The transaction is controlled by the libSQL\nbackend. If all of the statements are successful, the transaction is committed.\nIf any of the statements fail, the entire transaction is rolled back and no\nchanges are made.\n\n### Interactive transactions\u200b\n\nInteractive transactions allow you to execute a series of read and write\nstatements in the context of a[ SQLite transaction ](https://www.sqlite.org/lang_transaction.html). Reads and writes are all\nconsistent within the scope of that transaction, unaffected by other client\nactivity. The transaction API requires you to choose when to commit or roll back\nthe transaction.\n\ndanger\n\nInteractive transactions effectively lock the entire database for writing when a\nwrite is first performed, and until the transaction is committed or rolled back.\nlibSQL aborts transactions after a 5 second timeout. Transactions may negatively\nimpact overall database performance when used on high latency connections or\nwith busy databases.\n\n### Embedded replicas\u200b\n\nIn order to use an embedded replica for hybrid access, the SDK must be\ninitialized with three values:\n\n- The URL of the remote database hosted by libSQL server\n- An authentication token for that database (required only by Turso)\n- The path to the local database file to be kept in sync with the remote\ndatabase. The local database file is fully compatible with SQLite.\n\n\ncaution\n\nYou should allow the libSQL SDK to create the local database files and perform\nwrite operations on them. Writes from other sources are not supported, and the\ndata might be lost upon the next sync with the remote database.\n\nWhen you provide a path to the local database file, two other files appear\nalongside it with the same name as the database file you provide with \"-shm\" and\n\"-wal\" suffixes. These files should be considered part of the local database. If\nyou need to relocate the embedded replica, these files should be moved along\nwith the main database file.\n\n- [ Access types ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#access-types)\n    - [ Local access ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#local-access)\n\n- [ Remote access ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#remote-access)\n\n- [ Hybrid access (embedded replica) ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#hybrid-access)\n- [ Client SDK capabilities ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#client-sdk-capabilities)\n    - [ Batches ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#batches)\n\n- [ Interactive transactions ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#interactive-transactions)\n\n- [ Embedded replicas ](https://docs.turso.tech//libsql/client-access#embedded-replicas/#embedded-replicas)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//concepts#location": "# Concepts\n\nIn order to better understand how Turso works, please read through the following\nconcepts that are used throughout this documentation.\n\n## Location\u200b\n\nTurso databases are deployed using Fly.io, which allows Turso to host database\ninstances in[ many locations around the world ](https://fly.io/docs/reference/regions/), each identified with a three\nletter code. When creating a logical database in a placement group with replica\nlocations, you should consider which locations best support the code running any\nqueries. In general, the physical distance between the code and the database\ndetermines the latency, so it's recommended to benchmark your location options\nfor better performance.\n\nBy default, when the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)needs a primary location for a new placement\ngroup, it will automatically choose a location based on the physical location of\nthe machine where you run the CLI. The default can be overridden on the command\nline.\n\n## Placement group\u200b\n\nTurso requires that all logical databases belong to a \"placement group\". These\ngroups define how the databases in the group are deployed and replicated\ntogether in the same set of locations while also sharing the same managed\nhardware. In the Turso CLI, a placement group is abbreviated as \"[ group ](https://docs.turso.tech/reference/turso-cli#manage-placement-groups-and-logical-databases)\". You\nmight also hear this feature referred to as \"multitenancy\", where the tenants\nare databases you create that must share the same replication behavior and\nmanaged servers.\n\nPlacement groups are configured with a single primary location and zero or more\nreplica locations. Each logical database that you create within the placement\ngroup uses the same primary and replica locations - they are all \"placed\"\ntogether, each using the same replication behavior on the same hardware.\nHowever, each logical database within a placement group remains fully\nindependent and isolated in every other way.\n\nOnce a primary location is assigned to a placement group, it can't be moved to\nanother location. However, replica locations can be added and removed as needed.\n\n## Logical database\u200b\n\nA logical database is a collection of libSQL databases, each with a schema and\ndata that exists in one primary location and zero or more replica locations for\nthe placement group in which it was created. The schema and data are\nautomatically replicated from the primary to all replicas in the group.\n\nA logical database has a unique[ libSQL URL ](https://docs.turso.tech/reference/libsql-urls)that, when queried using the[ libSQL client SDKs ](https://docs.turso.tech/libsql/client-access), routes the client to the database instance at the location\nwith the lowest latency, therefore minimizing the total round trip time for read\noperations.\n\n## Instance\u200b\n\nA database instance is one component of a logical database in specific location.\nAn instance is serviced by a managed installation of[ libSQL server ](https://github.com/libsql/libsql#readme)running on\na single machine. Database instances of multiple logical databases in the same\nplacement group are handled by the same libSQL server process in the same\nhardware.\n\nThere are two types of instances:[ primary ](https://docs.turso.tech//concepts#location/#primary)and[ replica ](https://docs.turso.tech//concepts#location/#replica).\n\n### Primary\u200b\n\nThe primary instance of a logical database is the main source of data for the\ndatabase. All changes to the logical database are handled by the primary, and\nthose changes are synchronized to all replica instances.\n\n### Replica\u200b\n\nA replica instance of a logical database contains a copy of all data from the\nprimary, and is kept in sync with it as changes are made over time. Client\napplications can connect directly to a replica for read and write operations,\nbut any writes are automatically forwarded to the primary. As such, read\noperations have minimized latency, but write operations must make another hop to\nthe primary. Changes on the primary are then pushed to all replicas. The\nreplicas provide snapshot isolation for read transactions.\n\n- [ Location ](https://docs.turso.tech//concepts#location/#location)\n- [ Placement group ](https://docs.turso.tech//concepts#location/#placement-group)\n- [ Logical database ](https://docs.turso.tech//concepts#location/#logical-database)\n- [ Instance ](https://docs.turso.tech//concepts#location/#instance)\n    - [ Primary ](https://docs.turso.tech//concepts#location/#primary)\n\n- [ Replica ](https://docs.turso.tech//concepts#location/#replica)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/auth/get-tokens-for-user": "# Get all Platform API tokens for a user\n\n## Summary\u200b\n\n **Description** :\n\nReturns a list of all Turso Platform API tokens for the authenticated user. For\nsecurity purposes, the list does not contain the actual token values.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n\n\n **Analogous CLI command** : `turso auth api-tokens list` \n\n **Path** : `/v1/auth/api-tokens` \n\n **Method** : `GET` \n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `tokens`  | array | An array of[ Platform API token objects ](https://docs.turso.tech/reference/platform-rest-api/auth#api-token-object)for the user. |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/auth/api-tokens\"\n```\n\n```\n{\n   \"tokens\" :   [\n     {\n       \"name\" :   \"token1\" ,\n       \"id\" :   \"SYzcpe3jEe2We-rqOx4wmQ\"\n     } ,\n     {\n       \"name\" :   \"token2\" ,\n       \"id\" :   \"wPvoKe3qEe2We-rqOx4wmQ\"\n     }\n   ]\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/auth/get-tokens-for-user/#summary)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/auth/get-tokens-for-user/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/auth/get-tokens-for-user/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/auth/mint-token-for-user": "# Mint a Platform API token for a user\n\n## Summary\u200b\n\n **Description** :\n\nMints (creates) a new Platform API token for the authenticated user. Returns a[ Platform API token object ](https://docs.turso.tech/reference/platform-rest-api/auth#platform-api-token-object)that describes the newly created token.\n\ncaution\n\nThe response of this call contains the token value to use in future API calls.\nOnce you receive this value, save it somewhere secure. For security reasons, the\nAuthentication API will not give back the token value when[ listing tokens for\nthe user ](https://docs.turso.tech/reference/platform-rest-api/auth/get-tokens-for-user).\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n\n\n **Analogous CLI command** : `turso auth api-tokens mint [token_name]` \n\n **Path** : `/v1/auth/api-tokens/:token_name` \n\n **Method** : `POST` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `token_name`  | Name of the token to mint; must be unique among all tokens for the user |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `token`  | object | A[ Platform API token object ](https://docs.turso.tech/reference/platform-rest-api/auth#platform-api-token-object)describing the newly created token. |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X POST  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/auth/api-tokens/my-token\"\n```\n\n```\n{\n   \"id\" :   \"6FnEr-6fEe2rsyLfpvsWuA\" ,\n   \"name\" :   \"my-token\" ,\n   \"token\" :   \"token-value\"\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/auth/mint-token-for-user/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/auth/mint-token-for-user/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/auth/mint-token-for-user/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/auth/mint-token-for-user/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/auth/revoke-token-for-user": "# Revoke a Platform API token for a user\n\n## Summary\u200b\n\n **Description** :\n\nRevokes (deletes) a Platform API token of the given name for the authenticated\nuser.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n\n\n **Analogous CLI command** : `turso auth api-tokens revoke [token_name]` \n\n **Path** : `/v1/auth/api-tokens/:token_name` \n\n **Method** : `DELETE` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `token_name`  | Name of the token to revoke |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `token`  | string | The name of the token that was revoked |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X DELETE  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/auth/api-tokens/my-token\"\n```\n\n```\n{\n   \"token\" :   \"my-token\"\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/auth/revoke-token-for-user/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/auth/revoke-token-for-user/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/auth/revoke-token-for-user/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/auth/revoke-token-for-user/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/auth/validate-token-for-user": "# Validate a token for a user\n\n## Summary\u200b\n\n **Description** :\n\nValidates a platform token.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n\n\n **Path** : `/v1/auth/validate` \n\n **Method** : `GET` \n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `exp`  | number | The time of expiration for the provided token in unix epoch seconds, or -1 if there is no expiration |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/auth/validate\"\n```\n\n```\n{\n   \"exp\" :   999\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/auth/validate-token-for-user/#summary)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/auth/validate-token-for-user/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/auth/validate-token-for-user/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/#authentication": "# Turso Platform REST API\n\nThe Turso Platform REST API is used to perform actions on data and databases\nmanaged by Turso. The following groups of operations are available:\n\n- [ Authentication ](https://docs.turso.tech/reference/platform-rest-api/auth/)\n- [ Manage organizations ](https://docs.turso.tech/reference/platform-rest-api/organization/)\n- [ Location discovery ](https://docs.turso.tech/reference/platform-rest-api/location/)\n- [ Manage logical databases ](https://docs.turso.tech/reference/platform-rest-api/database/)\n- [ Manage database instances ](https://docs.turso.tech/reference/platform-rest-api/instance/)\n- [ Manage database groups ](https://docs.turso.tech/reference/platform-rest-api/groups/)\n\n\nThe API is served using HTTPS from the host `api.turso.tech` .\n\nnote\n\nThis API is used directly by the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli). However, the API does not operate\nexactly like the interface provided CLI. Each operation includes a reference to\nthe analogous Turso CLI command, noting where there are significant differences\nin behavior.\n\n## Conventions\u200b\n\n### Request and response\u200b\n\nThe API accepts variable inputs from placeholders in the URL path, the query\nstring, and the HTTP body. HTTP request and response bodies are expressed as\nJSON objects unless otherwise specified.\n\nAPI errors yield an HTTP response body containing a JSON object with a string\nproperty named \"error\".\n\n### Universal HTTP response codes\u200b\n\n| Code | Meaning |\n|---|---|\n| 200 | OK - operation completed successfully |\n| 401 | Unauthorized - ensure that the[ auth token ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#authentication)is present and valid |\n| 402 | Payment required - organization feature is not part of account plan |\n| 409 | Conflict - resource already exists |\n\n\n## About the examples in this documentation\u200b\n\nThe examples use curl and assume the following shell variables were established\nahead of time:\n\n```\nexport   TURSO_BASE_URL = https://api.turso.tech\nexport   TURSO_TOKEN = [ your-auth-token ]\n```\n\nFor `TURSO_TOKEN` , read the section about[ authentication ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#authentication).\n\n## Authentication\u200b\n\nThe Turso Platform API requires that all requests include an authentication\ntoken that identifies a user account. Operations are performed on behalf of this\nuser using the permissions granted to that user.\n\nThe recommended way to authenticate with the platform API is using[ platform API\ntokens ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#platform-api-tokens). You can also authenticate with[ user tokens from\nthe Turso CLI ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#user-authentication-tokens).\n\nnote\n\nThe platform and user tokens mentioned above are different from the database\ntokens used to allow[ client application access ](https://docs.turso.tech/libsql/client-access)to the database for the purpose\nof performing database queries. They are not interchangeable.\n\n### Platform API tokens\u200b\n\nYou can mint a platform API token in two ways:\n\n- [ Using the Authentication API ](https://docs.turso.tech/reference/platform-rest-api/auth)\n- [ Using the Turso CLI ](https://docs.turso.tech/reference/turso-cli#platform-api-auth-tokens)( `turso auth api-tokens mint` )\n\n\n### User authentication tokens\u200b\n\nThe Turso Platform API also recognizes tokens granted to a user when they[ log\nin to the Turso CLI ](https://docs.turso.tech/reference/turso-cli#logging-in-to-the-cli)using `turso auth login` . After logging in, run `turso auth\ntoken` to output the token string. These tokens expire after seven days, so they\nare not suitable for use with non-interactive applications.\n\n### Provide a token to the API\u200b\n\nAll HTTP requests must include the token string in the `Authorization` header.\nThe header takes the following form:\n\n`Authorization: Bearer [token]`\n\n `[token]` is is a placeholder for either a platform or user token.\n\n- [ Conventions ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#conventions)\n    - [ Request and response ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#request-and-response)\n\n- [ Universal HTTP response codes ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#universal-http-response-codes)\n- [ About the examples in this documentation ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#about-the-examples-in-this-documentation)\n- [ Authentication ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#authentication)\n    - [ Platform API tokens ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#platform-api-tokens)\n\n- [ User authentication tokens ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#user-authentication-tokens)\n\n- [ Provide a token to the API ](https://docs.turso.tech//reference/platform-rest-api/#authentication/#provide-a-token-to-the-api)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/organization/get-organizations-for-user": "# Get all organizations for the user\n\n## Summary\u200b\n\n **Description** :\n\nReturns all organizations for which the authenticated user is a member.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n\n\n **Analogous CLI command** : `turso org list` \n\n **Path** : `/v1/organizations` \n\n **Method** : `GET` \n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `organizations`  | array | An array of[ organization objects ](https://docs.turso.tech/reference/platform-rest-api/organization#organization-object) |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations\"\n```\n\n```\n{\n   \"organizations\" :   [\n     {\n       \"name\" :   \"personal\" ,\n       \"slug\" :   \"your-username\" ,\n       \"type\" :   \"personal\"\n     } ,\n     {\n       \"name\" :   \"my-org\" ,\n       \"slug\" :   \"my-org\" ,\n       \"type\" :   \"team\"\n     }\n   ]\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/organization/get-organizations-for-user/#summary)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/organization/get-organizations-for-user/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/organization/get-organizations-for-user/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/organization/get-organization-members": "# Get all organization members\n\n## Summary\u200b\n\n **Description** :\n\nReturns all of the members of an organization.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be the owner of the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation.\n\n **Analogous CLI command** : `turso org list members` \n\n **Path** : `/v1/organizations/:org_slug/members` \n\n **Method** : `GET` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization from which to get members |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `members`  | array | An array of[ organization member objects ](https://docs.turso.tech/reference/platform-rest-api/organization#organization-member-object) |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/members\"\n```\n\n```\n{\n   \"members\" :   [\n     {\n       \"role\" :   \"owner\" ,\n       \"username\" :   \"MyGitHubName\"\n     } ,\n     {\n       \"role\" :   \"member\" ,\n       \"username\" :   \"OthersGitHubName\"\n     }\n   ]\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/organization/get-organization-members/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/organization/get-organization-members/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/organization/get-organization-members/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/organization/get-organization-members/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations": "# Turso CLI\n\nThe Turso CLI is the tool provided for managing Turso databases. If you are\ngetting started for the first time, we recommend following along with the[ getting started tutorial ](https://docs.turso.tech/tutorials/get-started-turso-cli), which walks you through the process of installation,\nauthentication, creating a database, replicating it, querying it, and destroying\nit.\n\n## Conventions\u200b\n\nThe example commands on this page assume the following placeholders, expressed\nas shell variables:\n\n- `$GROUP_NAME` : The name of a[ placement group ](https://docs.turso.tech/concepts#placement-group)to work with\n- `$DB_NAME` : The name of the database that was specified or assigned during\ncreation.\n- `$LOCATION_CODE` : A three-letter location code that indicate the physical\nlocation of a database instance. The command `turso db locations` outputs a\nfull list of supported location codes.\n\n\n## Installation\u200b\n\nThe Turso CLI has two installation options.\n\n### Homebrew (macOS and Linux)\u200b\n\nThere is a Homebrew formula that's installed with the following command:\n\n`$ brew  install  tursodatabase/tap/turso`\n\nThe formula includes an executable with autocompletion scripts for bash, fish,\nand zsh.\n\n### Scripted install\u200b\n\nIf you prefer the manage the installation directly, run the following command to\nexecute a shell script that downloads and installs the CLI:\n\n`$  curl  -sSfL https://get.tur.so/install.sh  |   bash`\n\nThe CLI is installed in a directory called `.turso` in your home directory. The\nshell script attempts to add that to your shell\u2019s PATH configuration. You must\nstart a new shell to see the change, or add it manually to the current shell.\n\n### Verify the installation\u200b\n\nRun the following command to make sure the Turso CLI is in your PATH:\n\n`$ turso --version`\n\n### Upgrade the CLI\u200b\n\nIf Homebrew was used to install the CLI, use the following commands to update\nit:\n\n```\n$ brew update\n$ brew upgrade\n```\n\nIf you used the scripted install, use the CLI itself to update:\n\n`$ turso update`\n\n## Logging in to the CLI\u200b\n\nThe Turso CLI requires a GitHub account for authentication. You must log in to\nbe able to work with databases. All databases created while logged in with an\naccount belong to that account and are controlled by it. There is currently no\nway to share database access with other accounts.\n\nUse the command `turso auth login` to start the login process. The command\nlaunches your default browser and prompts you to log in with GitHub. The first\ntime, you are asked to grant the GitHub Turso app some permissions to your\naccount. Accept this in order to continue. (If desired, you can revoke those\npermissions later in the GitHub settings for your account.)\n\nWhen the authentication process finishes, you are issued a user authentication\ntoken. This token identifies your account to Turso. The token expires after one\nweek; afterward, you must log in again to get a new token.\n\ninfo\n\nThe user auth tokens generated by the `turso auth login` command are different\nin purpose from[ database auth tokens for client access ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#database-client-authentication-tokens)and[ platform API tokens ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#platform-api-auth-tokens). They are not\ninterchangeable.\n\n### Running locally\u200b\n\nIf you are running the CLI on your local machine, the CLI receives this token as\npart of the login flow and[ stores it locally ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#local-storage)for future use.\nYou can retrieve the persisted token string using:\n\n`$ turso auth token`\n\n### Running remotely\u200b\n\nIf you are running the CLI on a remote machine, it might not be able to launch a\nbrowser. In that case, use the URL provided by `turso auth login` with a browser\nyou have access to in order to authenticate. The process ends with a page\nshowing your token. You can put this string in the environment variable `TURSO_API_TOKEN` in a shell before running commands using a CLI that is not\nlogged in. For example:\n\n```\n$  export   TURSO_API_TOKEN = [ YOUR-TOKEN-STRING ]\n$ turso db locations\n```\n\n## Manage placement groups and logical databases\u200b\n\ninfo\n\nWhen working with[ placement groups ](https://docs.turso.tech/concepts#placement-group), note that they count toward the maximum\ndatabase allowance in your billing plan, even if you haven\u2019t yet created a\ndatabase within the group. A placement group requires one database \"unit\" for\neach location in the group, and you must have that capacity available in your\norganization when you create a placement group or expand it to another location.\n\n### Create a placement group\u200b\n\nTo create a new placement group using a primary location with the lowest latency\nto the machine where the command is run:\n\n`$ turso group create  $GROUP_NAME`\n\nYou can specify the location using the `--location` flag, providing the\nlocation's three letter code.\n\nnote\n\nIt costs one database from your billing plan\u2019s allowance to create a placement\ngroup.\n\nnote\n\nEvery placement group is assigned to an[ organization ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#team-collaboration-with-organizations)which is used for\ncollaboration and billing. When you create a database, the CLI uses the current\norganization as the container. By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create a logical database within a group\u200b\n\nTo create a new[ logical database ](https://docs.turso.tech/concepts#logical-database)with a random name in the named placement\ngroup:\n\n`$ turso db create --group  $GROUP_NAME`\n\nTo specify the name of the database:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME`\n\nIf you omit the `--group` flag:\n\n- If you have only one placement group, it is used.\n- If you don't have any placement groups, one is created using the name\n\"default\".\n\n\n#### Create a logical database using a SQLite database file\u200b\n\nTo create a new logical database and seed it with the contents of an existing[ SQLite3-compatible database file ](https://www.sqlite.org/fileformat.html), use the `--from-file` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-file  $DB_FILE`\n\nThe file is limited to 2GB is size.\n\n#### Create a logical database using a SQLite database dump\u200b\n\nTo create a new logical database and seed it with the contents of an existing\nSQLite database dump, use the `--from-dump` flag:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-dump  $SQL_FILE`\n\nThe file must be a text file with SQL commands. It is typically generated by the[ .dump ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#database-dump-and-load)command or the Turso CLI or SQLite CLI.\n\n#### Create a logical database by copying another logical database\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization:\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME`\n\n#### Create a logical database by copying another logical database at a point in time (restoring a backup)\u200b\n\nTo create a new database with the same contents as an existing database in your\norganization, with contents specified from a specific point in time, use the `--timestamp` flag with `--from-db` :\n\n`$ turso db create  $DB_NAME  --group  $GROUP_NAME  --from-db  $OTHER_DB_NAME  --timestamp  $RFC3339`\n\nThe `--timestamp` argument must be a timestamp with[ RFC3339 ](https://datatracker.ietf.org/doc/html/rfc3339)format (see[ timestamp examples ](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8)).\n\nThis can be used to eventually restore a database to contents from a particular\npoint in time. After making a copy like this, you must delete the original\ndatabase and recreate it with the contents of the newly created database.\n\ninfo\n\nThe contents of the newly created database contains data strictly before the\ngiven timestamp. It also might be missing up to 15 seconds of data before the\ntimestamp, depending on when Turso last created a periodic batch checkpoint.\n\n### Replicate a database by adding a location to a group\u200b\n\nYou can replicate a logical database by adding a location to its placement\ngroup. To add a location:\n\n`$ turso group locations  add   $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nIt costs one database from your billing plan\u2019s allowance to add a location to a\nplacement group, no matter how many logical databases are contained within that\ngroup.\n\nAdding a replica location to a group effectively replicates all logical\ndatabases in that group, since they each share the same deployment and\nreplication behavior on the same hardware.\n\nClient applications using a[ logical database URL ](https://docs.turso.tech/reference/libsql-urls#logical-database-url)are routed to the new\nlocation if it's observed to have the lowest latency among all available\nlocations in the group.\n\nSimilarly, you can remove a replica location from a placement group:\n\n`$ turso group locations remove  $GROUP_NAME   $LOCATION_CODE`\n\ninfo\n\nRemoving a replica location is considered \"safe\" in that doesn't eliminate any\nof the data in any logical database. The primary location always retains a copy\nof everything.\n\nYou can list the locations of a placement group using the `list` subcommand:\n\n`$ turso group locations list  $GROUP_NAME`\n\n### Destroy a logical database\u200b\n\ndanger\n\nDestruction of a logical database cannot be reversed. All copies of data are\ndeleted. The command prompts you to ensure this is really what you want.\n\nTo destroy a logical database (from all locations, including the primary):\n\n`$ turso db destroy  $DB_NAME`\n\n### Destroy a placement group\u200b\n\ndanger\n\nDestroying a placement group permanently deletes all copies of all databases in\nthe group.\n\nTo destroy an existing placement group:\n\n`$ turso group destroy  $GROUP_NAME`\n\n### Update the libSQL server version of a placement group\u200b\n\nTo upgrade the version of libSQL server used for every logical database in a\nplacement group:\n\n`$ turso group update  $GROUP_NAME`\n\nThis command causes a brief moment of downtime for each instance as the update\nhappens. All existing connections are closed and must be reconnected. The libSQL\nclient libraries do this automatically.\n\nTo check the version of libSQL server for a logical database:\n\n`$ turso db show  $DB_NAME`\n\n## Database client authentication tokens\u200b\n\n[ Client access ](https://docs.turso.tech/libsql/client-access)to query a Turso database from your application requires a\ndatabase authentication token. Treat any database token as a secret for use only\nby your application backend.\n\ninfo\n\nThe database auth tokens generated by the `turso db tokens create` command are\ndifferent in purpose from the user auth tokens received from[ logging in to the\nCLI ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#logging-in-to-the-cli)and[ platform API auth\ntokens ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#platform-api-auth-tokens). They are not interchangeable.\n\n### Creating a database token\u200b\n\nTo get a database auth token suitable for your app, run the following command:\n\n`$ turso db tokens create  $DB_NAME`\n\n `$DB_NAME` is the name of your database. This command outputs an auth token\nstring that you can use to configure the libSQL client library wherever it\nrequires an \"auth token\" string.\n\nDatabase tokens are not individually recorded by Turso. You may create as many\nas you want. By default, these tokens never expire.\n\n### Token expiration\u200b\n\nIf you want to put a limit on how much time a database token is valid, use the `--expiration` flag to specify a duration in days. For example, for a 7-day\ntoken, run the following:\n\n`$ turso db tokens create  $DB_NAME  --expiration 7d`\n\n### Read-only database tokens\u200b\n\nTo generate an auth token that has read-only access to the database.\n\n`$ turso db tokens create  $DB_NAME  --read-only`\n\nRead-only tokens enable a client to run queries with `select` , but disallow `update` , `insert` , and `delete` commands.\n\n### Invalidate database tokens\u200b\n\nIf a database token is ever leaked, you can invalidate all prior tokens for your\ndatabase with the following command:\n\n`$ turso db tokens invalidate  $DB_NAME`\n\nThis command restarts all of your database instances to use a new database token\nsigning key for any new tokens you create afterward.\n\n## Team collaboration with organizations\u200b\n\nTurso allows you to manage team database access and billing using a grouping\nmechanism called \"organizations\". By default, the CLI assumes a personal\norganization with the same name as your GitHub username.\n\n### Create an organization\u200b\n\nYou can create a new organization using the CLI with the command:\n\n`$ turso org create  $ORG_NAME`\n\nWhen the organization is created with the CLI:\n\n- The organization is assigned a \"slug\" string which uniquely identifies it,\nbased on the provided name.\n- Your account is assigned the \"owner\" role. Only one owner per organization is\nsupported.\n- The new organization becomes the current organization for future CLI commands.\nYou can[ switch to another organization ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#switch-organizations)as needed.\n\n\nnote\n\nOrganization slugs are globally unique. Creation of an organization fails in\ncase its assigned slug already exists.\n\n### List organizations\u200b\n\nTo list organizations of which you are the owner or a member:\n\n`$ turso org list`\n\n### Switch organizations\u200b\n\nTo change the current organization for future CLI commands, including those that\nwork with logical databases, provide its unique slug to the following command:\n\n`$ turso org switch  $ORG_SLUG`\n\nThe current organization is persisted in[ local storage ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#local-storage).\n\n### Delete an organization\u200b\n\nTo delete an organization and all of its associated databases and billing\ninformation:\n\n`$ turso org destroy  $ORG_SLUG`\n\nYour personal organization can't be destroyed.\n\nThe CLI doesn't allow destroying an organization that is also the current\norganization. You must[ switch organizations ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#switch-organizations)if\nnecessary.\n\n### Manage members of an organization\u200b\n\nMembers of an organization are able to fully control all databases contained\nwithin that organization. Only the owner is allow to access billing information.\n\nTo add a member to the current organization:\n\n`$ turso org members  add   $GITHUB_USERNAME`\n\nUse the `-a` flag to add with the admin role.\n\nTo list existing members:\n\n`$ turso org members list`\n\nTo remove a member from the current organization:\n\n`$ turso org members  rm   $GITHUB_USERNAME`\n\n### Invite members to an organization\u200b\n\nThe owner of an organization can invite others to join. Sending an invitation\nrequires an email address. It can be any email address, not necessarily linked\nto a GitHub account. To send the invitation:\n\n`$ turso org members invite  $EMAIL`\n\nThe recipient is asked to sign in to GitHub and accept the invitation to\ncomplete the process. Turso then uses the GitHub account's address for further\nemail notifications.\n\nUse the `-a` flag to invite with the admin role.\n\n## Manage billing\u200b\n\nThe owner of an organization may manage billing information for the current\norganization using the following commands:\n\n| Command | Action |\n|---|---|\n|  `turso plan show`  | Shows the current payment plan and usage |\n|  `turso plan upgrade`  | Upgrade the current plan (from starter to scaler) |\n|  `turso plan select`  | Select a specific payment plan |\n|  `turso org billing`  | Update credit card information |\n\n\nA credit card is required to switch to the scaler plan. Credit card information\nis entered on a per-organization basis. The CLI launches a web browser to manage\ncredit card information for the current organization.\n\nSee the website for[ Turso pricing information ](https://turso.tech/pricing).\n\n## Platform API auth tokens\u200b\n\nThe Turso CLI can mint tokens for authentication with the[ Turso Platform API ](https://docs.turso.tech/reference/platform-rest-api).\n\ninfo\n\nThe platform API auth tokens generated by the `turso auth api-tokens` command\nare different in purpose from[ database auth tokens for client\naccess ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#database-client-authentication-tokens). They are not interchangeable.\n\n### Mint a platform token\u200b\n\nTo mint a new token with a given name:\n\n`$ turso auth api-tokens mint  $TOKEN_NAME`\n\nThe CLI outputs the string value of the token.\n\ndanger\n\nBe sure to copy the token to a safe place immediately after minting. The CLI\nwill not display its value again, and it is not recoverable.\n\n### List platform tokens\u200b\n\nTo list all tokens:\n\n`$ turso auth api-tokens list`\n\n### Revoke a platform token\u200b\n\nTo revoke a token with a given name:\n\n`$ turso auth api-tokens revoke  $TOKEN_NAME`\n\n## Inspect database usage\u200b\n\nTotal database usage, measured for the purpose of[ billing ](https://docs.turso.tech/billing-details), is aggregated\nacross all[ logical databases ](https://docs.turso.tech/concepts#logical-database)associated with an account. Depending on your\npayment plan, limits are applied to the following usage stats:\n\n- Total amount of storage\n- Number of rows read\n- Number of rows written\n- Total number of database instances (primary and replicas)\n- Total number of database locations used\n\n\nTo see a summary for all databases for your account, use the following command:\n\n`$ turso plan show`\n\nYou can get more detailed data about the current monthly usage of a single\nlogical database using the following command:\n\n`$ turso db inspect  $DB_NAME`\n\nIt might take up to one minute for the output to reflect recent operations.\n\nYou can show usage grouped per instance by running:\n\n`$ turso db inspect  $DB_NAME  --verbose`\n\n## Database dump and load\u200b\n\nYou can dump the entire contents of a Turso database using the following\ncommand:\n\n`$ turso db shell  $DB_NAME  .dump  >  dumpfile.sql`\n\nThe file `dumpfile.sql` contains all of the SQL commands necessary to rebuild\nthe database. libSQL and SQLite internal tables are not present.\n\nnote\n\n `.dump` is a command you can run in the interactive shell, but you should\nconsider running it on the command line so its output can be easily saved in a\nfile.\n\nAfter creating a dump file, you can then load the dumped data into a new\ndatabase using the following command:\n\n`$ turso db shell  $NEW_DB_NAME   <  dumpfile.sql`\n\nYou can also[ create a new database using the contents of the dump\nfile ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#create-a-logical-database-using-a-sqlite-database-dump).\n\n## Use libSQL server locally\u200b\n\nThe Turso CLI can invoke[ libSQL server ](https://github.com/libsql/libsql#readme)for use during[ local development ](https://docs.turso.tech/reference/local-development)instead of a managed Turso database. You must have the `sqld` binary in your\nshell PATH. To start the server on port 8080, run:\n\n`$ turso dev`\n\nThis starts libSQL server using an in-memory database. To persist data in a\nSQLite database file, specify the path of the file:\n\n`$ turso dev --db-file path/to/db-file`\n\nThe CLI outputs a URL you can use to connect to the local server. Use this URL\ninstead of the Turso database[ libsql URL ](https://docs.turso.tech/reference/libsql-urls)when building locally. This URL can\nbe used with `turso db shell` and the libSQL client libraries.\n\nYou can change the client access port with the `--port` flag.\n\n## Get help\u200b\n\nThe CLI offers help for all commands and subcommands. Run `turso help` to get a\nlist of all commands. Use the `--help` flag to get help for a specific command\nor subcommand. For example: `turso db --help` .\n\n## Local storage\u200b\n\nThe CLI stores persistent data, including your auth token, in a file on your\ncomputer. On macOS, the containing folder is `$HOME/Library/Application\nSupport/turso` . On Linux, it's `$HOME/.turso` . It's safe to delete this folder,\nsince it can be restored by logging in to the CLI again.\n\n- [ Conventions ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#conventions)\n- [ Installation ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#installation)\n    - [ Homebrew (macOS and Linux) ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#homebrew-macos-and-linux)\n\n- [ Scripted install ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#scripted-install)\n\n- [ Verify the installation ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#verify-the-installation)\n\n- [ Upgrade the CLI ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#upgrade-the-cli)\n- [ Logging in to the CLI ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#logging-in-to-the-cli)\n    - [ Running locally ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#running-locally)\n\n- [ Running remotely ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#running-remotely)\n- [ Manage placement groups and logical databases ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#manage-placement-groups-and-logical-databases)\n    - [ Create a placement group ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#create-a-placement-group)\n\n- [ Create a logical database within a group ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#create-a-logical-database-within-a-group)\n\n- [ Replicate a database by adding a location to a group ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#replicate-a-database-by-adding-a-location-to-a-group)\n\n- [ Destroy a logical database ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#destroy-a-logical-database)\n\n- [ Destroy a placement group ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#destroy-a-placement-group)\n\n- [ Update the libSQL server version of a placement group ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#update-the-libsql-server-version-of-a-placement-group)\n- [ Database client authentication tokens ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#database-client-authentication-tokens)\n    - [ Creating a database token ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#creating-a-database-token)\n\n- [ Token expiration ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#token-expiration)\n\n- [ Read-only database tokens ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#read-only-database-tokens)\n\n- [ Invalidate database tokens ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#invalidate-database-tokens)\n- [ Team collaboration with organizations ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#team-collaboration-with-organizations)\n    - [ Create an organization ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#create-an-organization)\n\n- [ List organizations ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#list-organizations)\n\n- [ Switch organizations ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#switch-organizations)\n\n- [ Delete an organization ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#delete-an-organization)\n\n- [ Manage members of an organization ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#manage-members-of-an-organization)\n\n- [ Invite members to an organization ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#invite-members-to-an-organization)\n- [ Manage billing ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#manage-billing)\n- [ Platform API auth tokens ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#platform-api-auth-tokens)\n    - [ Mint a platform token ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#mint-a-platform-token)\n\n- [ List platform tokens ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#list-platform-tokens)\n\n- [ Revoke a platform token ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#revoke-a-platform-token)\n- [ Inspect database usage ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#inspect-database-usage)\n- [ Database dump and load ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#database-dump-and-load)\n- [ Use libSQL server locally ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#use-libsql-server-locally)\n- [ Get help ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#get-help)\n- [ Local storage ](https://docs.turso.tech//reference/turso-cli#team-collaboration-with-organizations/#local-storage)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/location/get-locations": "# Get all supported locations\n\n## Summary\u200b\n\n **Description** :\n\nReturns all supported database instance deployment locations.\n\nThe three letter codes in the response can be used wherever a \"location code\" is\naccepted by the[ Database instance API ](https://docs.turso.tech/reference/platform-rest-api/instance).\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n\n\n **Analogous CLI command** : `turso db locations` \n\ninfo\n\nThe Turso CLI suggests a default location near the user, which is not part of\nthis API. The CLI uses[ https://region.turso.io/ ](https://region.turso.io/)to get the most most suitable\ndefault.\n\n **Path** : `/v1/locations` \n\n **Method** : `GET` \n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Description |\n|---|---|\n|  `locations`  | An object whose properties are locations codes and values are display names of those locations |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/locations\"\n```\n\n```\n{\n   \"locations\" :   {\n     \"ams\" :   \"Amsterdam, Netherlands\" ,\n     \"arn\" :   \"Stockholm, Sweden\" ,\n     \"bog\" :   \"Bogot\u00e1, Colombia\" ,\n     \"bos\" :   \"Boston, Massachusetts (US)\" ,\n     \"cdg\" :   \"Paris, France\" ,\n     \"den\" :   \"Denver, Colorado (US)\" ,\n     \"dfw\" :   \"Dallas, Texas (US)\" ,\n     \"ewr\" :   \"Secaucus, NJ (US)\" ,\n     \"fra\" :   \"Frankfurt, Germany\" ,\n     \"gdl\" :   \"Guadalajara, Mexico\" ,\n     \"gig\" :   \"Rio de Janeiro, Brazil\" ,\n     \"gru\" :   \"S\u00e3o Paulo, Brazil\" ,\n     \"hkg\" :   \"Hong Kong, Hong Kong\" ,\n     \"iad\" :   \"Ashburn, Virginia (US)\" ,\n     \"jnb\" :   \"Johannesburg, South Africa\" ,\n     \"lax\" :   \"Los Angeles, California (US)\" ,\n     \"lhr\" :   \"London, United Kingdom\" ,\n     \"mad\" :   \"Madrid, Spain\" ,\n     \"mia\" :   \"Miami, Florida (US)\" ,\n     \"nrt\" :   \"Tokyo, Japan\" ,\n     \"ord\" :   \"Chicago, Illinois (US)\" ,\n     \"otp\" :   \"Bucharest, Romania\" ,\n     \"qro\" :   \"Quer\u00e9taro, Mexico\" ,\n     \"scl\" :   \"Santiago, Chile\" ,\n     \"sea\" :   \"Seattle, Washington (US)\" ,\n     \"sin\" :   \"Singapore, Singapore\" ,\n     \"sjc\" :   \"San Jose, California (US)\" ,\n     \"syd\" :   \"Sydney, Australia\" ,\n     \"waw\" :   \"Warsaw, Poland\" ,\n     \"yul\" :   \"Montreal, Canada\" ,\n     \"yyz\" :   \"Toronto, Canada\"\n   }\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/location/get-locations/#summary)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/location/get-locations/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/location/get-locations/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/get-databases-in-org": "# Get all logical databases in an organization\n\n## Summary\u200b\n\n **Description** :\n\nReturns a list of all logical databases in an organization.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation.\n\n **Analogous CLI command** : `turso db list` \n\n **Path** : `/v1/organizations/:org_slug/databases` \n\n **Method** : `GET` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the databases |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `databases`  | array | An array of[ logical database objects ](https://docs.turso.tech/reference/platform-rest-api/database#logical-database-object)with all databases. |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases\"\n```\n\n```\n{\n   \"databases\" :   [\n     {\n       \"Name\" :   \"my-db\" ,\n       \"Hostname\" :   \"my-db-my-org.turso.io\" ,\n       \"IssuedCertLimit\" :   0 ,\n       \"IssuedCertCount\" :   0 ,\n       \"DbId\" :   \"416756c4-cef9-11ed-b40d-c68341370672\" ,\n       \"regions\" :   [\n         \"ord\"\n       ] ,\n       \"primaryRegion\" :   \"ord\" ,\n       \"type\" :   \"logical\"\n     } ,\n     {\n       \"Name\" :   \"t\" ,\n       \"Hostname\" :   \"t-my-org.turso.io\" ,\n       \"IssuedCertLimit\" :   0 ,\n       \"IssuedCertCount\" :   0 ,\n       \"DbId\" :   \"e4a94d21-e2aa-11ed-bb4f-2ae75da7784d\" ,\n       \"regions\" :   [\n         \"ord\"\n       ] ,\n       \"primaryRegion\" :   \"ord\" ,\n       \"type\" :   \"logical\"\n     }\n   ]\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/get-databases-in-org/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/database/get-databases-in-org/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/database/get-databases-in-org/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/database/get-databases-in-org/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/get-database-in-org": "# Get a logical database in an organization\n\n## Summary\u200b\n\n **Description** :\n\nReturns a named logical databases in an organization.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation.\n\n **Analogous CLI command** : `turso db show [db_name]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name` \n\n **Method** : `GET` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the databases |\n|  `db_name`  | Name of the logical database to get |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `database`  | object | A[ logical database object ](https://docs.turso.tech/reference/platform-rest-api/database#logical-database-object) |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db\"\n```\n\n```\n{\n   \"database\" :   {\n     \"Name\" :   \"my-db\" ,\n     \"Hostname\" :   \"my-db-my-org.turso.io\" ,\n     \"IssuedCertLimit\" :   0 ,\n     \"IssuedCertCount\" :   0 ,\n     \"DbId\" :   \"416756c4-cef9-11ed-b40d-c68341370672\" ,\n     \"regions\" :   [\n       \"ord\"\n     ] ,\n     \"primaryRegion\" :   \"ord\" ,\n     \"type\" :   \"logical\"\n   }\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/get-database-in-org/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/database/get-database-in-org/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/database/get-database-in-org/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/database/get-database-in-org/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/create-database-in-org": "# Create a logical database in an organization\n\n## Summary\u200b\n\n **Description** :\n\nCreates a logical database in an organization. Returns a[ logical database\nobject ](https://docs.turso.tech/reference/platform-rest-api/database#logical-database-object)that describes the newly created database.\n\nThe result of this operation is an empty logical database with no instances. The\ndatabase is not useful until an instance is created with the[ Database instance\nAPI ](https://docs.turso.tech/reference/platform-rest-api/instance/). The first created instance becomes the primary for the logical database.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation.\n\n **Analogous CLI command** : `turso db create [db_name]` \n\ninfo\n\n `turso db create` automatically creates the primary instance using the closest\n(or specified location) after creating the logical database. This function is\nnot provided by the API, and you must use the[ Database instance API ](https://docs.turso.tech/reference/platform-rest-api/instance/)to create\nthe first instance yourself in the location you specify.\n\ninfo\n\n `turso db create` with no arguments creates a database with a random name, but\nthe API does not offer this function. The CLI is randomly generating the name\nitself and passing that to the API in the request body using the `name` property.\n\n **Path** : `/v1/organizations/:org_slug/databases` \n\n **Method** : `POST` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization to contain the database |\n\n\n **JSON body properties** :\n\n| Property | Required | Description |\n|---|---|---|\n|  `name`  | yes | Slug of the logical database to create; must be unique among all of the user's databases |\n|  `image`  | no | Type of database image to use; `latest` (default) or `canary`  |\n|  `group`  | no | The name of the group to add this database to. Defaults to `default`  |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `database`  | object | A[ logical database object ](https://docs.turso.tech/reference/platform-rest-api/database#logical-database-object)describing the newly created database. |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X POST  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases\"   \\\n  -d  '{\"name\": \"my-db\", \"image\": \"latest\"}'\n```\n\n```\n{\n   \"database\" :   {\n     \"Name\" :   \"my-db\" ,\n     \"Hostname\" :   \"my-db-my-org.turso.io\" ,\n     \"IssuedCertLimit\" :   0 ,\n     \"IssuedCertCount\" :   0 ,\n     \"DbId\" :   \"444f7e33-ea1d-11ed-afb4-d228a44fc89f\"\n   } ,\n   \"password\" :   \"[password]\" ,\n   \"username\" :   \"[username]\"\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/create-database-in-org/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/database/create-database-in-org/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/database/create-database-in-org/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/database/create-database-in-org/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/update-database-in-org": "# Update the version of all instances of a logical database in an organization\n\n## Summary\u200b\n\n **Description** :\n\nUpdates the version of libSQL server of all instances of a logical database in\nan organization. This operation causes some amount of downtime to occur during\nthe update process. The version of libSQL server is taken from the latest built\ndocker image.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation. The logical database is identified by the name it was given at\ncreation.\n\n **Analogous CLI command** : `turso db update [db_name]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/update` \n\n **Method** : `POST` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the database |\n|  `db_name`  | Name of the logical database whose instance to update |\n\n\n## Output\u200b\n\nNone. The API sends an empty response with HTTP status 200 when the\nupdate is complete.\n\n## Example\u200b\n\n```\ncurl   \\\n  -X POST  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/update\"\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/update-database-in-org/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/database/update-database-in-org/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/database/update-database-in-org/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/database/update-database-in-org/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/destroy-database-in-org": "# Destroy a logical database in an organization\n\n## Summary\u200b\n\n **Description** :\n\nDestroys a logical database (and all of its instances) in an organization.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation. The logical database is identified by the name it was given at\ncreation.\n\n **Analogous CLI command** : `turso db destroy [db_name]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name` \n\n **Method** : `DELETE` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the database |\n|  `db_name`  | Name of the logical database to destroy |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `database`  | string | The name of the logical database that was destroyed |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X DELETE  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db\"\n```\n\n```\n{\n   \"database\" :   \"my-db\"\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/destroy-database-in-org/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/database/destroy-database-in-org/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/database/destroy-database-in-org/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/database/destroy-database-in-org/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/mint-token-for-database-in-org": "# Mint an auth token for a logical database in an organization\n\n## Summary\u200b\n\n **Description** :\n\nMints an[ auth token for client access ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)to a logical database in an\norganization.\n\nThe returned token:\n\n- Can't be retrieved again; there is no record kept of it by Turso\n- Can't be revoked individually.\n\n\nAll previously minted tokens can be[ invalidated ](https://docs.turso.tech/reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org).\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation.\n\n **Analogous CLI command** : `turso db tokens create [db_name]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/auth/tokens` \n\n **Method** : `POST` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the database |\n|  `db_name`  | Name of the logical database |\n\n\n **Query string parameters** :\n\n| Parameter | Required | Description |\n|---|---|---|\n|  `expiration`  | no | Duration of the token until expiration as parsed by[ go-str2duration ](https://github.com/xhit/go-str2duration), or `never` (default); for example: \"1w2d6h3ns\" (1 week 2 days 6 hours and 3 nanoseconds) |\n|  `authorization`  | no | Level of access granted to the bearer of the token; `read-only` or `full-access` (default) |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `jwt`  | string | An auth token with the requested access to the logical database |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X POST  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/auth/tokens?expiration=1d&authorization=read-only\"\n```\n\n```\n{\n   \"jwt\" :   \"AUTH-TOKEN-STRING\"\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/mint-token-for-database-in-org/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/database/mint-token-for-database-in-org/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/database/mint-token-for-database-in-org/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/database/mint-token-for-database-in-org/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org": "# Invalidate all auth tokens for a logical database in an organization\n\n## Summary\u200b\n\n **Description** :\n\nInvalidates all[ auth tokens ](https://docs.turso.tech/reference/turso-cli#database-client-authentication-tokens)previously[ minted ](https://docs.turso.tech/reference/platform-rest-api/database/mint-token-for-database-in-org)for a logical database in an\norganization. This is achieved by randomly changing the signing key for the\ndatabase so that tokens signed with the prior key are no longer valid.\n\ncaution\n\nThis operation cannot be reverted. A short downtime is required to complete the\nchanges.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation.\n\n **Analogous CLI command** : `turso db tokens invalidate [db_name]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/auth/rotate` \n\n **Method** : `POST` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the database |\n|  `db_name`  | Name of the logical database |\n\n\n## Output\u200b\n\nNone.\n\n## Example\u200b\n\n```\ncurl   \\\n  -X POST  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/auth/rotate\"\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database/get-usage-database-in-org": "# Get the current month's usage for a logical database in an organization\n\n## Summary\u200b\n\n **Description** :\n\nReturns usage statistics for the current calendar month that are used for\npurpose of billing and monthly limits.\n\nUsage is reported per individual database instance. Any instance that\ncontributed to the usage for the calendar month is present in the output, even\nif that instance was deleted.\n\nTo get more information about each instance, given their IDs in the output, make\nanother request to[ get the logical database ](https://docs.turso.tech/reference/platform-rest-api/database/get-database-in-org).\n\nTo learn more about how usage is measured, read the[ technical billing\ndocumentation ](https://docs.turso.tech/billing-details).\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation.\n\n **Analogous CLI command** : `turso db inspect [db_name]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/usage` \n\n **Method** : `GET` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the databases |\n|  `db_name`  | Name of the logical database to get |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `database`  | object | A[ logical database usage object ](https://docs.turso.tech/reference/platform-rest-api/database#logical-database-usage-object) |\n|  `instances`  | object | Deprecated - do not use |\n|  `total`  | object | Deprecated - do not use |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/usage\"\n```\n\n```\n{\n   \"database\" :   {\n     \"uuid\" :   \"0c3b1c40-04a5-11ee-897e-ea9ebfc69781\" ,\n     \"instances\" :   [\n       {\n         \"uuid\" :   \"0d2a4482-04a5-11ee-897e-ea9ebfc69781\" ,\n         \"usage\" :   {\n           \"rows_read\" :   11 ,\n           \"rows_written\" :   1 ,\n           \"storage_bytes\" :   28672\n         }\n       } ,\n       {\n         \"uuid\" :   \"b1d366e4-08ad-11ee-b472-02aae2e52fd2\" ,\n         \"usage\" :   {\n           \"rows_read\" :   0 ,\n           \"rows_written\" :   0 ,\n           \"storage_bytes\" :   20480\n         }\n       }\n     ] ,\n     \"usage\" :   {\n       \"rows_read\" :   11 ,\n       \"rows_written\" :   1 ,\n       \"storage_bytes\" :   53248\n     }\n   }\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/get-usage-database-in-org/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/database/get-usage-database-in-org/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/database/get-usage-database-in-org/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/database/get-usage-database-in-org/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/organization": "# Organization API\n\n## Summary\u200b\n\nThe Organization API allows you to work with Turso organizations, which enable\nteam access to the databases contained within them.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all organizations for the user ](https://docs.turso.tech/reference/platform-rest-api/organization/get-organizations-for-user)\n- [ Get all organization members ](https://docs.turso.tech/reference/platform-rest-api/organization/get-organization-members)\n\n\nThe Organization API only allows reading organization data. Use the Turso CLI to[ create and modify organizations ](https://docs.turso.tech/reference/turso-cli#team-collaboration-with-organizations).\n\n## Objects\u200b\n\n### Organization object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `name`  | string | The given name of the organization |\n|  `slug`  | string | The slug used to identify the organization in API calls; generated by the API based on the `name` provided during creation |\n|  `type`  | string |  `personal` or `team`  |\n\n\n### Organization member object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `username`  | string | The GitHub user name of the org member |\n|  `role`  | string |  `owner` (creator) or `member`  |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/organization/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/organization/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/organization/#objects)\n    - [ Organization object ](https://docs.turso.tech//reference/platform-rest-api/organization/#organization-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/instance": "# Database instance API\n\n## Summary\u200b\n\nThe Database instance API allows you to work with Turso database[ instances ](https://docs.turso.tech/concepts#instance).\n\nBefore using this API, you must already have a[ logical database ](https://docs.turso.tech/concepts#logical-database)created by the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)or the[ Logical database API ](https://docs.turso.tech/reference/platform-rest-api/database)\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all instances in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/get-instances-in-database)\n- [ Create an instance in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/create-instance-in-database)\n- [ Destroy an instance in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/destroy-instance-in-database)\n- [ Wait for an instance to become ready in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/wait-instance-ready-in-database)\n\n\n## Objects\u200b\n\n### Database instance object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID, unique among all instances |\n|  `name`  | string | Given name (human readable) |\n|  `type`  | string | \"primary\" or \"replica\" |\n|  `region`  | string | Location code |\n|  `hostname`  | string | The DNS hostname used for client connections; used to build libsql and https URLs |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/instance/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/instance/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/instance/#objects)\n    - [ Database instance object ](https://docs.turso.tech//reference/platform-rest-api/instance/#database-instance-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/instance/get-instances-in-database": "# Get all instances in a logical database\n\n## Summary\u200b\n\n **Description** :\n\nReturns all instances in a logical database in an organization.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation. The logical database is identified by the name it was given at\ncreation.\n\n **Analogous CLI command** : `turso db show [db_name]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/instances` \n\n **Method** : `GET` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the logical database |\n|  `db_name`  | Name of the logical database containing the instances |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `instances`  | array | An array of[ database instance objects ](https://docs.turso.tech/reference/platform-rest-api/instance#database-instance-object)with all instances. |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/instances\"\n```\n\n```\n{\n   \"instances\" :   [\n     {\n       \"uuid\" :   \"424a1738-cef9-11ed-b40d-c68341370672\" ,\n       \"name\" :   \"my-instance\" ,\n       \"type\" :   \"primary\" ,\n       \"region\" :   \"ord\" ,\n       \"hostname\" :   \"e784ee57c52d83-my-db-my-org.turso.io\"\n     } ,\n     {\n       \"uuid\" :   \"cc93f685-1785-11ee-8e67-ee1bce83c37e\" ,\n       \"name\" :   \"my-replica\" ,\n       \"type\" :   \"replica\" ,\n       \"region\" :   \"phx\" ,\n       \"hostname\" :   \"17811114a90e89-my-db-my-org.turso.io\"\n     }\n   ]\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/instance/get-instances-in-database/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/instance/get-instances-in-database/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/instance/get-instances-in-database/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/instance/get-instances-in-database/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/instance/get-instance-in-database": "# Get an instance in a logical database\n\n## Summary\u200b\n\n **Description** :\n\nReturns all instances in a logical database in an organization.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n- The named instance must already exist in the named database.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation. The logical database is identified by the name it was given at\ncreation.\n\n **Analogous CLI command** : `turso db show [db_name]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/instances/:instance_name` \n\n **Method** : `GET` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the logical database |\n|  `db_name`  | Name of the logical database containing the instances |\n|  `instance_name`  | Name of the instance to get |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `instance`  | object | A[ database instance object ](https://docs.turso.tech/reference/platform-rest-api/instance#database-instance-object) |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/instances/my-instance\"\n```\n\n```\n{\n   \"instance\" :   {\n     \"uuid\" :   \"424a1738-cef9-11ed-b40d-c68341370672\" ,\n     \"name\" :   \"my-instance\" ,\n     \"type\" :   \"primary\" ,\n     \"region\" :   \"ord\" ,\n     \"hostname\" :   \"e784ee57c52d83-my-db-my-org.turso.io\"\n   }\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/instance/get-instance-in-database/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/instance/get-instance-in-database/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/instance/get-instance-in-database/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/instance/get-instance-in-database/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/instance/create-instance-in-database": "# Create an instance in a logical database\n\n## Summary\u200b\n\n **Description** :\n\nCreates an instance in a logical database in an organization.\n\nThe first instance created becomes the primary instance for that database and\ncan't be destroyed later.\n\nEach instance must be provisioned in a location identified with a location code.\nGet a list of location codes using the[ Location API ](https://docs.turso.tech/reference/platform-rest-api/location).\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation.  The logical database is identified by the name it was given at\ncreation.\n\n **Analogous CLI command** : `turso db replicate [db_name] [location]` \n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/instances` \n\n **Method** : `POST` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the logical database |\n|  `db_name`  | Name of the logical database to contain the new instance |\n\n\n **JSON body properties** :\n\n| Property | Required | Description |\n|---|---|---|\n|  `location`  | yes | The location code for the location of the instance |\n|  `image`  | no | Type of database image to use; `latest` (default) or `canary`  |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `instance`  | object | A[ database instance object ](https://docs.turso.tech/reference/platform-rest-api/instance#database-instance-object)that describes the newly created instance. |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X POST  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/instances\"   \\\n  -d  '{\"location\": \"ord\", \"image\": \"latest\"}'\n```\n\n```\n{\n   \"instance\" :   {\n     \"uuid\" :   \"a3446118-ea9d-11ed-a213-a2c7dbd646dc\" ,\n     \"name\" :   \"my-instance\" ,\n     \"type\" :   \"primary\" ,\n     \"region\" :   \"sjc\" ,\n     \"hostname\" :   \"3287469dae4185-my-db-my-org.turso.io\"\n   } ,\n   \"password\" :   \"[password]\" ,\n   \"username\" :   \"[username]\"\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/instance/create-instance-in-database/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/instance/create-instance-in-database/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/instance/create-instance-in-database/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/instance/create-instance-in-database/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/instance/destroy-instance-in-database": "# Destroy an instance in a logical database\n\n## Summary\u200b\n\n **Description** :\n\nDestroys an instance in a logical database in an organization.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n- The named instance must already exist in the named database.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation. The logical database is identified by the name it was given at\ncreation. The instance is identified by the name it was assigned by the API at\nthe time it was created.\n\n **Analogous CLI command** : `turso db destroy [db_name] --instance [instance_name]` \n\ninfo\n\nThe CLI allows you to destroy instances by their location with the command `turso db destroy [db_name] --location [location_code]` , but the API does not\noffer this function directly. The implementation of the CLI first[ gets a list\nof database instances ](https://docs.turso.tech/reference/platform-rest-api/instance/get-instances-in-database), then destroys the individual instances that match the\nprovided location code.\n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/instances/:instance_name` \n\n **Method** : `DELETE` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the logical database |\n|  `db_name`  | Name of the logical database containing the instance |\n|  `instance_name`  | Name of the database instance to destroy |\n\n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Type | Description |\n|---|---|---|\n|  `instance`  | string | The name of the destroyed instance |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X POST  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/instances/my-instance\"\n```\n\n```\n{\n   \"instance\" :   \"my-instance\"\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/instance/destroy-instance-in-database/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/instance/destroy-instance-in-database/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/instance/destroy-instance-in-database/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/instance/destroy-instance-in-database/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database": "# Logical database API\n\n## Summary\u200b\n\nThe Logical database API allows you to work with Turso[ logical databases ](https://docs.turso.tech/concepts#logical-database)within an organization.\n\nEach database must be contained within an organization. Every GitHub account has\na personal organization with a name based on the GitHub account name. Team\norganizations are created and managed with the Turso CLI or the[ Organization\nAPI ](https://docs.turso.tech/reference/platform-rest-api/organization).\n\nAfter creating a logical database, use the[ Database instance API ](https://docs.turso.tech/reference/platform-rest-api/instance)to add and\nremove[ instances ](https://docs.turso.tech/concepts#instance)within that logical database.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all logical databases in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/get-databases-in-org)\n- [ Create a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/create-database-in-org)\n- [ Destroy a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/destroy-database-in-org)\n- [ Mint an auth token for a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/mint-token-for-database-in-org)\n- [ Invalidate all auth tokens for a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org)\n\n\n## Objects\u200b\n\n### Logical database object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `Name`  | string | Name of the logical database, unique among all databases in an organization |\n|  `Hostname`  | string | The DNS hostname used for client connections; used to build libsql and https URLs |\n|  `IssuedCertLimit`  | number |  |\n|  `IssuedCertCount`  | number |  |\n|  `DbId`  | string | UUID of the logical database |\n|  `regions`  | string array | List of location codes for all instances of this logical database |\n|  `primaryRegion`  | string | Location code for the primary instance |\n|  `type`  | string | \"logical\" |\n\n\nAny `username` and `password` values associated with a database are deprecated\nand should not be used by consumers of this API.\n\n### Logical database usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID of the logical database |\n|  `instances`  | array | List of[ database instance usage objects ](https://docs.turso.tech//reference/platform-rest-api/database/#database-instance-usage-object)of instances contributing usage for the current month |\n\n\n### Database instance usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID of the database instance |\n|  `usage`  | object | [ Usage object ](https://docs.turso.tech//reference/platform-rest-api/database/#usage-object)describing the usage of this instance for the current month |\n\n\n### Usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `rows_read`  | number | The number of row reads incurred during a monthly billing period |\n|  `rows_written`  | number | The number of row writes incurred during a monthly billing period |\n|  `storage_bytes`  | number | The total amount of storage used |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/database/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/database/#objects)\n    - [ Logical database object ](https://docs.turso.tech//reference/platform-rest-api/database/#logical-database-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/instance/wait-instance-ready-in-database": "# Wait for an instance to become ready in a logical database\n\n## Summary\u200b\n\n **Description** :\n\nWaits for an instance to be able to receive a query. Typically invoked\nimmediately after an instance is created to know when it's ready for use.\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n- The authenticated user must be a member of the named organization.\n- The named logical database must already exist in the named organization.\n\n\nThe organization is identified by the unique slug string it was assigned during\ncreation. The logical database is identified by the name it was given at\ncreation. The instance is identified by the name it was assigned by the API at\nthe time it was created.\n\n **Path** : `/v1/organizations/:org_slug/databases/:db_name/instances/:instance_name/wait` \n\n **Method** : `GET` \n\n## Inputs\u200b\n\n **Path parameters** :\n\n| Parameter | Description |\n|---|---|\n|  `org_slug`  | Slug of the organization containing the logical database |\n|  `db_name`  | Name of the logical database containing the instance |\n|  `instance_name`  | Name of the database instance to wait for |\n\n\n## Output\u200b\n\nNone. The API sends an empty response with HTTP status 200 when the instance is\nready to receive queries.\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/organizations/my-org/databases/my-db/instances/my-instance/wait\"\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/instance/wait-instance-ready-in-database/#summary)\n- [ Inputs ](https://docs.turso.tech//reference/platform-rest-api/instance/wait-instance-ready-in-database/#inputs)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/instance/wait-instance-ready-in-database/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/instance/wait-instance-ready-in-database/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/list-groups": "# List Groups\n\nReturns a list of groups and the assigned locations.\n\n## User Groups\u200b\n\n `GET /v1/groups` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Accept`  |  `application/json`  | The data requested should be JSON. |\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location  'https://api.turso.tech/v1/groups'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"groups\" :   [\n     {\n       \"locations\" :   [ \"bos\" ,   \"lhr\" ] ,\n       \"name\" :   \"default\" ,\n       \"primary\" :   \"lhr\"\n     }\n   ]\n}\n```\n\n## Organization Groups\u200b\n\n `GET /v1/organizations/:organization/groups` \n\nThis endpoint retrieves groups that are specific to an organization.\n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Accept`  |  `application/json`  | The data requested should be JSON. |\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Header | Type | Description |\n|---|---|---|\n|  `organization`  |  `string`  | The organization name. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location  'https://api.turso.tech/v1/organizations/some_org/groups'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"groups\" :   [\n     {\n       \"locations\" :   [ \"lhr\" ] ,\n       \"name\" :   \"default\" ,\n       \"primary\" :   \"lhr\"\n     }\n   ]\n}\n```\n\n- [ User Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/list-groups/#user-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/list-groups/#headers)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/list-groups/#example)\n- [ Organization Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/list-groups/#organization-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/list-groups/#headers-1)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/list-groups/#path-parameters)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/list-groups/#example-1)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/create-group": "# Create Group\n\nCreate a group for a specific user or organization.\n\n## User Groups\u200b\n\n `POST /v1/groups` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n|  `Content-Type`  |  `application/json`  | The data sent must be JSON. |\n\n\n### Request Body\u200b\n\n| Field | Type | Description |\n|---|---|---|\n|  `name`  |  `string`  | The group name. |\n|  `location`  |  `[location]`  | A valid supported location name. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location  'https://api.turso.tech/v1/groups'   \\\n  --header  'Authorization: Bearer TOKEN'   \\\n  --header  'Content-Type: application/json'   \\\n  --data  '{\n      \"name\": \"group2\",\n      \"location\": \"lhr\"\n  }'\n```\n\n```\n{\n   \"group\" :   {\n     \"locations\" :   [ \"lhr\" ] ,\n     \"name\" :   \"group2\" ,\n     \"primary\" :   \"lhr\"\n   }\n}\n```\n\n## Organization Groups\u200b\n\n `POST /v1/organizations/:organization/groups` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n|  `Content-Type`  |  `application/json`  | The data sent must be JSON. |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `organization`  |  `string`  | The organization name. |\n\n\n### Request Body\u200b\n\n| Field | Type | Description |\n|---|---|---|\n|  `name`  |  `string`  | The group name. |\n|  `location`  |  `[location]`  | A valid supported location name. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location  'https://api.turso.tech/v1/organizations/some_org/groups'   \\\n  --header  'Authorization: Bearer TOKEN'   \\\n  --header  'Content-Type: application/json'   \\\n  --data  '{\n      \"name\": \"group2\",\n      \"location\": \"lhr\"\n  }'\n```\n\n```\n{\n   \"group\" :   {\n     \"locations\" :   [ \"lhr\" ] ,\n     \"name\" :   \"group2\" ,\n     \"primary\" :   \"lhr\"\n   }\n}\n```\n\n- [ User Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#user-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#headers)\n\n- [ Request Body ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#request-body)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#example)\n- [ Organization Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#organization-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#headers-1)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#path-parameters)\n\n- [ Request Body ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#request-body-1)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/create-group/#example-1)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group": "# Retrieve Group\n\nReturns a single group and its locations by name for a specific user or organization.\n\n## User Groups\u200b\n\n `GET /v1/groups/:group` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Accept`  |  `application/json`  | The data requested should be JSON. |\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `group`  |  `string`  | The group name. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location  'https://api.turso.tech/v1/groups/default'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"group\" :   {\n     \"name\" :   \"default\" ,\n     \"locations\" :   [ \"fra\" ] ,\n     \"primary\" :   \"fra\"\n   }\n}\n```\n\n## Organization Groups\u200b\n\n `GET /v1/organizations/:organization/groups/:group` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Accept`  |  `application/json`  | The data requested should be JSON. |\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `organization`  |  `string`  | The organization name. |\n|  `group`  |  `string`  | The group name. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location --request POST  'https://api.turso.tech/v1/organizations/some_org/groups/default'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"group\" :   {\n     \"name\" :   \"default\" ,\n     \"locations\" :   [ \"fra\" ] ,\n     \"primary\" :   \"fra\"\n   }\n}\n```\n\n- [ User Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group/#user-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group/#headers)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group/#path-parameters)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group/#example)\n- [ Organization Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group/#organization-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group/#headers-1)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group/#path-parameters-1)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/retrieve-group/#example-1)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/delete-group": "# Delete Group\n\nDelete a group for a specific user or organization.\n\n## User Groups\u200b\n\n `DELETE /v1/groups/:group` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Accept`  |  `application/json`  | The data requested should be JSON. |\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `group`  |  `string`  | The group name. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location --request DELETE  'https://api.turso.tech/v1/groups/group2'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"group\" :   {\n     \"name\" :   \"foo\" ,\n     \"locations\" :   [ \"fra\" ] ,\n     \"primary\" :   \"fra\"\n   }\n}\n```\n\n## Organization Groups\u200b\n\n `DELETE /v1/organizations/:organization/groups/:group` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Accept`  |  `application/json`  | The data requested should be JSON. |\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `organization`  |  `string`  | The organization name. |\n|  `group`  |  `string`  | The group name. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location --request DELETE  'https://api.turso.tech/v1/organizations/some_org/groups/group2'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"group\" :   {\n     \"locations\" :   [ \"lhr\" ] ,\n     \"name\" :   \"group2\" ,\n     \"primary\" :   \"lhr\"\n   }\n}\n```\n\n- [ User Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/delete-group/#user-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/delete-group/#headers)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/delete-group/#path-parameters)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/delete-group/#example)\n- [ Organization Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/delete-group/#organization-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/delete-group/#headers-1)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/delete-group/#path-parameters-1)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/delete-group/#example-1)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/add-location": "# Add location to a group\n\nAdd a location to a group for a specific user or organization.\n\n## User Groups\u200b\n\n `POST /v1/groups/:group/locations/:location` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `group`  |  `string`  | The group name. |\n|  `location`  |  `string`  | The three letter location code to be added to the group. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location --request POST  'https://api.turso.tech/v1/groups/default/locations/bos'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"group\" :   {\n     \"name\" :   \"default\" ,\n     \"locations\" :   [ \"fra\" ,   \"lhr\" ,   \"bos\" ] ,\n     \"primary\" :   \"fra\"\n   }\n}\n```\n\n## Organization Groups\u200b\n\n `POST /v1/organizations/:organization/groups/:group/locations/:location` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `organization`  |  `string`  | The organization name. |\n|  `group`  |  `string`  | The group name. |\n|  `location`  |  `string`  | The three letter location code to be added to the group. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location --request POST  'https://api.turso.tech/v1/organizations/some_org/groups/default/locations/bos'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"group\" :   {\n     \"name\" :   \"default\" ,\n     \"locations\" :   [ \"fra\" ,   \"lhr\" ,   \"bos\" ] ,\n     \"primary\" :   \"fra\"\n   }\n}\n```\n\n- [ User Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/add-location/#user-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/add-location/#headers)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/add-location/#path-parameters)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/add-location/#example)\n- [ Organization Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/add-location/#organization-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/add-location/#headers-1)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/add-location/#path-parameters-1)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/add-location/#example-1)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/remove-location": "# Remove location from a group\n\nRemove a location from a group for a specific user or organization.\n\n## User Groups\u200b\n\n `DELETE /v1/groups/:group/locations/:location` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `group`  |  `string`  | The group name. |\n|  `location`  |  `string`  | The three letter location code to be removed from the group. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location --request DELETE  'https://api.turso.tech/v1/groups/default/locations/bos'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"group\" :   {\n     \"name\" :   \"foo\" ,\n     \"locations\" :   [ \"fra\" ,   \"lhr\" ] ,\n     \"primary\" :   \"fra\"\n   }\n}\n```\n\n## Organization Groups\u200b\n\n `DELETE /v1/organizations/:organization/groups/:group/locations/:location` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `organization`  |  `string`  | The organization name. |\n|  `group`  |  `string`  | The group name. |\n|  `location`  |  `string`  | The three letter location code to be added to the group. |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --location --request DELETE  'https://api.turso.tech/v1/organizations/some_org/groups/default/locations/bos'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"group\" :   {\n     \"name\" :   \"default\" ,\n     \"locations\" :   [ \"fra\" ,   \"lhr\" ,   \"bos\" ] ,\n     \"primary\" :   \"fra\"\n   }\n}\n```\n\n- [ User Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/remove-location/#user-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/remove-location/#headers)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/remove-location/#path-parameters)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/remove-location/#example)\n- [ Organization Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/remove-location/#organization-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/remove-location/#headers-1)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/remove-location/#path-parameters-1)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/remove-location/#example-1)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/groups/mint-token": "# Create Group Token\n\nCreate an auth token for a group.\n\nThe returned token:\n\n- Can't be retrieved again; there is no record kept of it by Turso\n- Can't be revoked individually.\n\n\n## User Groups\u200b\n\n `POST /v1/groups/:group/auth/tokens` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Query String Parameters\u200b\n\n| Parameter | Required | Description |\n|---|---|---|\n|  `expiration`  | no | Duration of the token until expiration as parsed by[ go-str2duration ](https://github.com/xhit/go-str2duration), or `never` (default); for example: `1w2d6h3ns` (1 week 2 days 6 hours and 3 nanoseconds) |\n|  `authorization`  | no | Level of access granted to the bearer of the token; `read-only` or `full-access` (default) |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --request POST  \\\n  --location  'https://api.turso.tech/v1/groups/some_group/auth/tokens?expiration=1d&authorization=read-only'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"jwt\" :   \"TOKEN\"\n}\n```\n\n## Organization Groups\u200b\n\n `POST /v1/organizations/:organization/groups/:group/auth/tokens` \n\n### Headers\u200b\n\n| Header | Example | Description |\n|---|---|---|\n|  `Authorization`  |  `Bearer TOKEN`  | The platform or user auth `TOKEN` . |\n\n\n### Path Parameters\u200b\n\n| Parameter | Type | Description |\n|---|---|---|\n|  `organization`  |  `string`  | The organization name. |\n\n\n### Query String Parameters\u200b\n\n| Parameter | Required | Description |\n|---|---|---|\n|  `expiration`  | no | Duration of the token until expiration as parsed by[ go-str2duration ](https://github.com/xhit/go-str2duration), or `never` (default); for example: `1w2d6h3ns` (1 week 2 days 6 hours and 3 nanoseconds) |\n|  `authorization`  | no | Level of access granted to the bearer of the token; `read-only` or `full-access` (default) |\n\n\n### Example\u200b\n\n```\ncurl   \\\n  --request POST  \\\n  --location  'https://api.turso.tech/v1/organizations/some_org/groups/some_group/auth/tokens?expiration=1d&authorization=read-only'   \\\n  --header  'Authorization: Bearer TOKEN'\n```\n\n```\n{\n   \"jwt\" :   \"TOKEN\"\n}\n```\n\n- [ User Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#user-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#headers)\n\n- [ Query String Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#query-string-parameters)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#example)\n- [ Organization Groups ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#organization-groups)\n    - [ Headers ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#headers-1)\n\n- [ Path Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#path-parameters)\n\n- [ Query String Parameters ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#query-string-parameters-1)\n\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/groups/mint-token/#example-1)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/location/get-locations#example": "# Get all supported locations\n\n## Summary\u200b\n\n **Description** :\n\nReturns all supported database instance deployment locations.\n\nThe three letter codes in the response can be used wherever a \"location code\" is\naccepted by the[ Database instance API ](https://docs.turso.tech/reference/platform-rest-api/instance).\n\n **Requirements** :\n\n- The caller must provide an[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication)token.\n\n\n **Analogous CLI command** : `turso db locations` \n\ninfo\n\nThe Turso CLI suggests a default location near the user, which is not part of\nthis API. The CLI uses[ https://region.turso.io/ ](https://region.turso.io/)to get the most most suitable\ndefault.\n\n **Path** : `/v1/locations` \n\n **Method** : `GET` \n\n## Output\u200b\n\n **JSON body properties** :\n\n| Property | Description |\n|---|---|\n|  `locations`  | An object whose properties are locations codes and values are display names of those locations |\n\n\n## Example\u200b\n\n```\ncurl   \\\n  -X GET  \\\n  -H  \"Authorization: Bearer  $TURSO_TOKEN \"   \\\n   \" $TURSO_BASE_URL /v1/locations\"\n```\n\n```\n{\n   \"locations\" :   {\n     \"ams\" :   \"Amsterdam, Netherlands\" ,\n     \"arn\" :   \"Stockholm, Sweden\" ,\n     \"bog\" :   \"Bogot\u00e1, Colombia\" ,\n     \"bos\" :   \"Boston, Massachusetts (US)\" ,\n     \"cdg\" :   \"Paris, France\" ,\n     \"den\" :   \"Denver, Colorado (US)\" ,\n     \"dfw\" :   \"Dallas, Texas (US)\" ,\n     \"ewr\" :   \"Secaucus, NJ (US)\" ,\n     \"fra\" :   \"Frankfurt, Germany\" ,\n     \"gdl\" :   \"Guadalajara, Mexico\" ,\n     \"gig\" :   \"Rio de Janeiro, Brazil\" ,\n     \"gru\" :   \"S\u00e3o Paulo, Brazil\" ,\n     \"hkg\" :   \"Hong Kong, Hong Kong\" ,\n     \"iad\" :   \"Ashburn, Virginia (US)\" ,\n     \"jnb\" :   \"Johannesburg, South Africa\" ,\n     \"lax\" :   \"Los Angeles, California (US)\" ,\n     \"lhr\" :   \"London, United Kingdom\" ,\n     \"mad\" :   \"Madrid, Spain\" ,\n     \"mia\" :   \"Miami, Florida (US)\" ,\n     \"nrt\" :   \"Tokyo, Japan\" ,\n     \"ord\" :   \"Chicago, Illinois (US)\" ,\n     \"otp\" :   \"Bucharest, Romania\" ,\n     \"qro\" :   \"Quer\u00e9taro, Mexico\" ,\n     \"scl\" :   \"Santiago, Chile\" ,\n     \"sea\" :   \"Seattle, Washington (US)\" ,\n     \"sin\" :   \"Singapore, Singapore\" ,\n     \"sjc\" :   \"San Jose, California (US)\" ,\n     \"syd\" :   \"Sydney, Australia\" ,\n     \"waw\" :   \"Warsaw, Poland\" ,\n     \"yul\" :   \"Montreal, Canada\" ,\n     \"yyz\" :   \"Toronto, Canada\"\n   }\n}\n```\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/location/get-locations#example/#summary)\n- [ Output ](https://docs.turso.tech//reference/platform-rest-api/location/get-locations#example/#output)\n- [ Example ](https://docs.turso.tech//reference/platform-rest-api/location/get-locations#example/#example)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/auth#api-token-object": "# Authentication API\n\n## Summary\u200b\n\nThe Authentication API allows you to work with platform authentication tokens\nfor use with all of the Turso Platform APIs.\n\nThe minted tokens never expire, they can only be revoked.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all Platform API tokens for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/get-tokens-for-user)\n- [ Mint a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/mint-token-for-user)\n- [ Revoke a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/revoke-token-for-user)\n- [ Validate a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/validate-token-for-user)\n\n\n## Objects\u200b\n\n### Platform API token object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `id`  | string | Unique ID, generated by the platform. |\n|  `name`  | string | Given name. |\n|  `token`  | string | Token string. Only appears in the object returned when[ minting a new token ](https://docs.turso.tech/reference/platform-rest-api/auth/mint-token-for-user). |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/auth#api-token-object/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/auth#api-token-object/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/auth#api-token-object/#objects)\n    - [ Platform API token object ](https://docs.turso.tech//reference/platform-rest-api/auth#api-token-object/#platform-api-token-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/auth#platform-api-token-object": "# Authentication API\n\n## Summary\u200b\n\nThe Authentication API allows you to work with platform authentication tokens\nfor use with all of the Turso Platform APIs.\n\nThe minted tokens never expire, they can only be revoked.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all Platform API tokens for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/get-tokens-for-user)\n- [ Mint a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/mint-token-for-user)\n- [ Revoke a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/revoke-token-for-user)\n- [ Validate a Platform API token for a user ](https://docs.turso.tech/reference/platform-rest-api/auth/validate-token-for-user)\n\n\n## Objects\u200b\n\n### Platform API token object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `id`  | string | Unique ID, generated by the platform. |\n|  `name`  | string | Given name. |\n|  `token`  | string | Token string. Only appears in the object returned when[ minting a new token ](https://docs.turso.tech/reference/platform-rest-api/auth/mint-token-for-user). |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/auth#platform-api-token-object/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/auth#platform-api-token-object/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/auth#platform-api-token-object/#objects)\n    - [ Platform API token object ](https://docs.turso.tech//reference/platform-rest-api/auth#platform-api-token-object/#platform-api-token-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/organization#organization-object": "# Organization API\n\n## Summary\u200b\n\nThe Organization API allows you to work with Turso organizations, which enable\nteam access to the databases contained within them.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all organizations for the user ](https://docs.turso.tech/reference/platform-rest-api/organization/get-organizations-for-user)\n- [ Get all organization members ](https://docs.turso.tech/reference/platform-rest-api/organization/get-organization-members)\n\n\nThe Organization API only allows reading organization data. Use the Turso CLI to[ create and modify organizations ](https://docs.turso.tech/reference/turso-cli#team-collaboration-with-organizations).\n\n## Objects\u200b\n\n### Organization object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `name`  | string | The given name of the organization |\n|  `slug`  | string | The slug used to identify the organization in API calls; generated by the API based on the `name` provided during creation |\n|  `type`  | string |  `personal` or `team`  |\n\n\n### Organization member object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `username`  | string | The GitHub user name of the org member |\n|  `role`  | string |  `owner` (creator) or `member`  |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-object/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-object/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-object/#objects)\n    - [ Organization object ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-object/#organization-object)\n\n- [ Organization member object ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-object/#organization-member-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/organization#organization-member-object": "# Organization API\n\n## Summary\u200b\n\nThe Organization API allows you to work with Turso organizations, which enable\nteam access to the databases contained within them.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all organizations for the user ](https://docs.turso.tech/reference/platform-rest-api/organization/get-organizations-for-user)\n- [ Get all organization members ](https://docs.turso.tech/reference/platform-rest-api/organization/get-organization-members)\n\n\nThe Organization API only allows reading organization data. Use the Turso CLI to[ create and modify organizations ](https://docs.turso.tech/reference/turso-cli#team-collaboration-with-organizations).\n\n## Objects\u200b\n\n### Organization object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `name`  | string | The given name of the organization |\n|  `slug`  | string | The slug used to identify the organization in API calls; generated by the API based on the `name` provided during creation |\n|  `type`  | string |  `personal` or `team`  |\n\n\n### Organization member object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `username`  | string | The GitHub user name of the org member |\n|  `role`  | string |  `owner` (creator) or `member`  |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-member-object/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-member-object/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-member-object/#objects)\n    - [ Organization object ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-member-object/#organization-object)\n\n- [ Organization member object ](https://docs.turso.tech//reference/platform-rest-api/organization#organization-member-object/#organization-member-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object": "# Logical database API\n\n## Summary\u200b\n\nThe Logical database API allows you to work with Turso[ logical databases ](https://docs.turso.tech/concepts#logical-database)within an organization.\n\nEach database must be contained within an organization. Every GitHub account has\na personal organization with a name based on the GitHub account name. Team\norganizations are created and managed with the Turso CLI or the[ Organization\nAPI ](https://docs.turso.tech/reference/platform-rest-api/organization).\n\nAfter creating a logical database, use the[ Database instance API ](https://docs.turso.tech/reference/platform-rest-api/instance)to add and\nremove[ instances ](https://docs.turso.tech/concepts#instance)within that logical database.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all logical databases in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/get-databases-in-org)\n- [ Create a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/create-database-in-org)\n- [ Destroy a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/destroy-database-in-org)\n- [ Mint an auth token for a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/mint-token-for-database-in-org)\n- [ Invalidate all auth tokens for a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org)\n\n\n## Objects\u200b\n\n### Logical database object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `Name`  | string | Name of the logical database, unique among all databases in an organization |\n|  `Hostname`  | string | The DNS hostname used for client connections; used to build libsql and https URLs |\n|  `IssuedCertLimit`  | number |  |\n|  `IssuedCertCount`  | number |  |\n|  `DbId`  | string | UUID of the logical database |\n|  `regions`  | string array | List of location codes for all instances of this logical database |\n|  `primaryRegion`  | string | Location code for the primary instance |\n|  `type`  | string | \"logical\" |\n\n\nAny `username` and `password` values associated with a database are deprecated\nand should not be used by consumers of this API.\n\n### Logical database usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID of the logical database |\n|  `instances`  | array | List of[ database instance usage objects ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#database-instance-usage-object)of instances contributing usage for the current month |\n\n\n### Database instance usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID of the database instance |\n|  `usage`  | object | [ Usage object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#usage-object)describing the usage of this instance for the current month |\n\n\n### Usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `rows_read`  | number | The number of row reads incurred during a monthly billing period |\n|  `rows_written`  | number | The number of row writes incurred during a monthly billing period |\n|  `storage_bytes`  | number | The total amount of storage used |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#objects)\n    - [ Logical database object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#logical-database-object)\n\n- [ Logical database usage object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#logical-database-usage-object)\n\n- [ Database instance usage object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#database-instance-usage-object)\n\n- [ Usage object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-object/#usage-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object": "# Logical database API\n\n## Summary\u200b\n\nThe Logical database API allows you to work with Turso[ logical databases ](https://docs.turso.tech/concepts#logical-database)within an organization.\n\nEach database must be contained within an organization. Every GitHub account has\na personal organization with a name based on the GitHub account name. Team\norganizations are created and managed with the Turso CLI or the[ Organization\nAPI ](https://docs.turso.tech/reference/platform-rest-api/organization).\n\nAfter creating a logical database, use the[ Database instance API ](https://docs.turso.tech/reference/platform-rest-api/instance)to add and\nremove[ instances ](https://docs.turso.tech/concepts#instance)within that logical database.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all logical databases in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/get-databases-in-org)\n- [ Create a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/create-database-in-org)\n- [ Destroy a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/destroy-database-in-org)\n- [ Mint an auth token for a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/mint-token-for-database-in-org)\n- [ Invalidate all auth tokens for a logical database in an organization ](https://docs.turso.tech/reference/platform-rest-api/database/invalidate-all-tokens-for-database-in-org)\n\n\n## Objects\u200b\n\n### Logical database object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `Name`  | string | Name of the logical database, unique among all databases in an organization |\n|  `Hostname`  | string | The DNS hostname used for client connections; used to build libsql and https URLs |\n|  `IssuedCertLimit`  | number |  |\n|  `IssuedCertCount`  | number |  |\n|  `DbId`  | string | UUID of the logical database |\n|  `regions`  | string array | List of location codes for all instances of this logical database |\n|  `primaryRegion`  | string | Location code for the primary instance |\n|  `type`  | string | \"logical\" |\n\n\nAny `username` and `password` values associated with a database are deprecated\nand should not be used by consumers of this API.\n\n### Logical database usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID of the logical database |\n|  `instances`  | array | List of[ database instance usage objects ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#database-instance-usage-object)of instances contributing usage for the current month |\n\n\n### Database instance usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID of the database instance |\n|  `usage`  | object | [ Usage object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#usage-object)describing the usage of this instance for the current month |\n\n\n### Usage object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `rows_read`  | number | The number of row reads incurred during a monthly billing period |\n|  `rows_written`  | number | The number of row writes incurred during a monthly billing period |\n|  `storage_bytes`  | number | The total amount of storage used |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#objects)\n    - [ Logical database object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#logical-database-object)\n\n- [ Logical database usage object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#logical-database-usage-object)\n\n- [ Database instance usage object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#database-instance-usage-object)\n\n- [ Usage object ](https://docs.turso.tech//reference/platform-rest-api/database#logical-database-usage-object/#usage-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/instance#database-instance-object": "# Database instance API\n\n## Summary\u200b\n\nThe Database instance API allows you to work with Turso database[ instances ](https://docs.turso.tech/concepts#instance).\n\nBefore using this API, you must already have a[ logical database ](https://docs.turso.tech/concepts#logical-database)created by the[ Turso CLI ](https://docs.turso.tech/reference/turso-cli)or the[ Logical database API ](https://docs.turso.tech/reference/platform-rest-api/database)\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all instances in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/get-instances-in-database)\n- [ Create an instance in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/create-instance-in-database)\n- [ Destroy an instance in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/destroy-instance-in-database)\n- [ Wait for an instance to become ready in a logical database ](https://docs.turso.tech/reference/platform-rest-api/instance/wait-instance-ready-in-database)\n\n\n## Objects\u200b\n\n### Database instance object\u200b\n\n| Property | Type | Description |\n|---|---|---|\n|  `uuid`  | string | UUID, unique among all instances |\n|  `name`  | string | Given name (human readable) |\n|  `type`  | string | \"primary\" or \"replica\" |\n|  `region`  | string | Location code |\n|  `hostname`  | string | The DNS hostname used for client connections; used to build libsql and https URLs |\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/instance#database-instance-object/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/instance#database-instance-object/#operations)\n- [ Objects ](https://docs.turso.tech//reference/platform-rest-api/instance#database-instance-object/#objects)\n    - [ Database instance object ](https://docs.turso.tech//reference/platform-rest-api/instance#database-instance-object/#database-instance-object)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)", "https://docs.turso.tech//reference/platform-rest-api/location": "# Location API\n\n## Summary\u200b\n\nThe Location API allows you to discover supported locations for Turso database\ninstances.\n\n## Operations\u200b\n\nAll operations require[ authentication ](https://docs.turso.tech/reference/platform-rest-api/#authentication).\n\n- [ Get all supported locations ](https://docs.turso.tech/reference/platform-rest-api/location/get-locations)\n\n\n- [ Summary ](https://docs.turso.tech//reference/platform-rest-api/location/#summary)\n- [ Operations ](https://docs.turso.tech//reference/platform-rest-api/location/#operations)\n\n\n- [ \n\nSign Up\n\n\n\n\n ](https://api.turso.tech/?webui=true&type=signup)\n- [ \n\nStar Our Repo\n\n\n\n\n\n\n ](https://github.com/libsql/libsql)\n\n\nSign Up\n\nStar Our Repo\n\n- [ About ](https://turso.tech/about-us)\n- [ Investors ](https://turso.tech/investors)\n- [ Blog ](https://blog.turso.tech)\n\n\n- [ Turso Discord ](https://discord.com/invite/4B5D7hYwub)\n- [ libSQL Discord ](https://discord.gg/VzbXemj6Rg)\n- [ Follow us on Twitter ](https://twitter.com/tursodatabase)\n- [ Schedule a Zoom ](https://calendly.com/d/gt7-bfd-83n/meet-with-chiselstrike)\n\n\n- [ Turso GitHub ](https://github.com/tursodatabase/)\n- [ Turso extended GitHub ](https://github.com/turso-extended/)\n- [ libSQL GitHub ](http://github.com/tursodatabase/libsql)\n\n\n- [ Privacy Policy ](https://turso.tech/privacy-policy)\n- [ Terms of Use ](https://turso.tech/terms-of-use)\n\n\nImage: [ Turso logo ](https://docs.turso.tech/img/turso.svg)"}